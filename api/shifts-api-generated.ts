/* tslint:disable */
/* eslint-disable */
/*
7shifts API

7shifts is a team management software designed for restaurants. We help managers and operators spend less time and effort scheduling their staff, reduce their monthly labor costs and improve team communication. The result is simplified team management, one shift at a time.

7shifts also offers free mobile apps (iOS and Android) allowing managers and employees to have everything at their fingertips.

Start your free trial or request a demo at www.7shifts.com.

The version of the OpenAPI document: 2023-05-01
Contact: api-support@7shifts.com

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ShiftsCreateNewShift400Response } from '../models';
// @ts-ignore
import { ShiftsCreateNewShift403Response } from '../models';
// @ts-ignore
import { ShiftsCreateNewShift422Response } from '../models';
// @ts-ignore
import { ShiftsCreateNewShiftRequest } from '../models';
// @ts-ignore
import { ShiftsCreateNewShiftRequestBreaksInner } from '../models';
// @ts-ignore
import { ShiftsCreateNewShiftResponse } from '../models';
// @ts-ignore
import { ShiftsDeleteShiftById403Response } from '../models';
// @ts-ignore
import { ShiftsDeleteShiftById404Response } from '../models';
// @ts-ignore
import { ShiftsDeleteShiftById500Response } from '../models';
// @ts-ignore
import { ShiftsDeleteShiftByIdResponse } from '../models';
// @ts-ignore
import { ShiftsGetShiftById400Response } from '../models';
// @ts-ignore
import { ShiftsGetShiftById401Response } from '../models';
// @ts-ignore
import { ShiftsGetShiftById403Response } from '../models';
// @ts-ignore
import { ShiftsGetShiftById404Response } from '../models';
// @ts-ignore
import { ShiftsGetShiftById500Response } from '../models';
// @ts-ignore
import { ShiftsGetShiftByIdResponse } from '../models';
// @ts-ignore
import { ShiftsList400Response } from '../models';
// @ts-ignore
import { ShiftsList403Response } from '../models';
// @ts-ignore
import { ShiftsListResponse } from '../models';
// @ts-ignore
import { ShiftsUpdateShiftById400Response } from '../models';
// @ts-ignore
import { ShiftsUpdateShiftById401Response } from '../models';
// @ts-ignore
import { ShiftsUpdateShiftById403Response } from '../models';
// @ts-ignore
import { ShiftsUpdateShiftById404Response } from '../models';
// @ts-ignore
import { ShiftsUpdateShiftById500Response } from '../models';
// @ts-ignore
import { ShiftsUpdateShiftByIdRequest } from '../models';
// @ts-ignore
import { ShiftsUpdateShiftByIdRequestBreaksInner } from '../models';
// @ts-ignore
import { ShiftsUpdateShiftByIdResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * ShiftsApi - axios parameter creator
 * @export
 */
export const ShiftsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create Shift
         * @param {number} companyId Company ID
         * @param {ShiftsCreateNewShiftRequest} shiftsCreateNewShiftRequest 
         * @param {string} [xApiVersion] 7shifts API version
         * @param {string} [xCompanyGuid] Company GUID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewShift: async (companyId: number, shiftsCreateNewShiftRequest: ShiftsCreateNewShiftRequest, xApiVersion?: string, xCompanyGuid?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('createNewShift', 'companyId', companyId)
            // verify required parameter 'shiftsCreateNewShiftRequest' is not null or undefined
            assertParamExists('createNewShift', 'shiftsCreateNewShiftRequest', shiftsCreateNewShiftRequest)
            const localVarPath = `/v2/company/{company_id}/shifts`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId !== undefined ? companyId : `-company_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication cookieAuth required
            await setApiKeyToObject({object: localVarHeaderParameter, type: "Cookie", key: "Cookie", keyParamName: "7session", configuration})
            if (xApiVersion != null) {
                localVarHeaderParameter['x-api-version'] = String(xApiVersion);
            }

            if (xCompanyGuid != null) {
                localVarHeaderParameter['x-company-guid'] = String(xCompanyGuid);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: shiftsCreateNewShiftRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/company/{company_id}/shifts',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(shiftsCreateNewShiftRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete Shift
         * @param {number} companyId Company ID
         * @param {number} shiftId Shift ID
         * @param {string} [xApiVersion] 7shifts API version
         * @param {string} [xCompanyGuid] Company GUID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteShiftById: async (companyId: number, shiftId: number, xApiVersion?: string, xCompanyGuid?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('deleteShiftById', 'companyId', companyId)
            // verify required parameter 'shiftId' is not null or undefined
            assertParamExists('deleteShiftById', 'shiftId', shiftId)
            const localVarPath = `/v2/company/{company_id}/shifts/{shift_id}`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId !== undefined ? companyId : `-company_id-`)))
                .replace(`{${"shift_id"}}`, encodeURIComponent(String(shiftId !== undefined ? shiftId : `-shift_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication cookieAuth required
            await setApiKeyToObject({object: localVarHeaderParameter, type: "Cookie", key: "Cookie", keyParamName: "7session", configuration})
            if (xApiVersion != null) {
                localVarHeaderParameter['x-api-version'] = String(xApiVersion);
            }

            if (xCompanyGuid != null) {
                localVarHeaderParameter['x-company-guid'] = String(xCompanyGuid);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/company/{company_id}/shifts/{shift_id}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve Shift
         * @param {number} companyId Company ID
         * @param {number} shiftId Shift ID
         * @param {string} [xApiVersion] 7shifts API version
         * @param {string} [xCompanyGuid] Company GUID
         * @param {boolean} [includeDeleted] Return the shift even if its deleted
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getShiftById: async (companyId: number, shiftId: number, xApiVersion?: string, xCompanyGuid?: string, includeDeleted?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('getShiftById', 'companyId', companyId)
            // verify required parameter 'shiftId' is not null or undefined
            assertParamExists('getShiftById', 'shiftId', shiftId)
            const localVarPath = `/v2/company/{company_id}/shifts/{shift_id}`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId !== undefined ? companyId : `-company_id-`)))
                .replace(`{${"shift_id"}}`, encodeURIComponent(String(shiftId !== undefined ? shiftId : `-shift_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication cookieAuth required
            await setApiKeyToObject({object: localVarHeaderParameter, type: "Cookie", key: "Cookie", keyParamName: "7session", configuration})
            if (includeDeleted !== undefined) {
                localVarQueryParameter['include_deleted'] = includeDeleted;
            }

            if (xApiVersion != null) {
                localVarHeaderParameter['x-api-version'] = String(xApiVersion);
            }

            if (xCompanyGuid != null) {
                localVarHeaderParameter['x-company-guid'] = String(xCompanyGuid);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/company/{company_id}/shifts/{shift_id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List Shifts
         * @param {number} companyId Company ID
         * @param {string} [xApiVersion] 7shifts API version
         * @param {string} [xCompanyGuid] Company GUID
         * @param {string} [cursor] Cursor for the next or previous page of results.
         * @param {number} [limit] The number of results desired per page.
         * @param {number} [locationId] Location ID
         * @param {Array<number>} [shiftIds] A comma separated list of Shift IDs
         * @param {number} [departmentId] Department ID
         * @param {Array<number>} [departmentIds] Department IDs
         * @param {number} [roleId] Role ID
         * @param {number} [userId] User ID
         * @param {string} [startLte] Return shifts that start before or on specified date. In ISO8601 Format
         * @param {string} [startGte] Return shifts that start after or on specified date time. In ISO8601 Format
         * @param {string} [endLte] Return shifts that end before or on specified date time. In ISO8601 Format
         * @param {string} [endGte] Return shifts that end after or on specified date time. In ISO8601 Format
         * @param {boolean} [deleted] Return shifts that were published and have been deleted. Cannot be combined with draft.
         * @param {boolean} [draft] Return shifts that are in draft. Draft shifts have created, edited or deleted but not been published. Overrides deleted flag.
         * @param {boolean} [includeDraft] Return shifts that are published, and also shifts in draft. Overrides deleted flag and draft flag.
         * @param {boolean} [open] Return shifts that are open. Open shifts means anyone can request to take it and not assigned to any individual.
         * @param {string} [modifiedSince] Return only shifts that have been modified from specified date time. In ISO8601 Format
         * @param {string} [sortBy] Sort by either start or end
         * @param {string} [sortDir] Sort by direction (asc, desc)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list: async (companyId: number, xApiVersion?: string, xCompanyGuid?: string, cursor?: string, limit?: number, locationId?: number, shiftIds?: Array<number>, departmentId?: number, departmentIds?: Array<number>, roleId?: number, userId?: number, startLte?: string, startGte?: string, endLte?: string, endGte?: string, deleted?: boolean, draft?: boolean, includeDraft?: boolean, open?: boolean, modifiedSince?: string, sortBy?: string, sortDir?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('list', 'companyId', companyId)
            const localVarPath = `/v2/company/{company_id}/shifts`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId !== undefined ? companyId : `-company_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication cookieAuth required
            await setApiKeyToObject({object: localVarHeaderParameter, type: "Cookie", key: "Cookie", keyParamName: "7session", configuration})
            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (locationId !== undefined) {
                localVarQueryParameter['location_id'] = locationId;
            }

            if (shiftIds) {
                localVarQueryParameter['shift_ids'] = shiftIds.join(COLLECTION_FORMATS.csv);
            }

            if (departmentId !== undefined) {
                localVarQueryParameter['department_id'] = departmentId;
            }

            if (departmentIds) {
                localVarQueryParameter['department_ids'] = departmentIds.join(COLLECTION_FORMATS.csv);
            }

            if (roleId !== undefined) {
                localVarQueryParameter['role_id'] = roleId;
            }

            if (userId !== undefined) {
                localVarQueryParameter['user_id'] = userId;
            }

            if (startLte !== undefined) {
                localVarQueryParameter['start[lte]'] = (startLte as any instanceof Date) ?
                    (startLte as any).toISOString() :
                    startLte;
            }

            if (startGte !== undefined) {
                localVarQueryParameter['start[gte]'] = (startGte as any instanceof Date) ?
                    (startGte as any).toISOString() :
                    startGte;
            }

            if (endLte !== undefined) {
                localVarQueryParameter['end[lte]'] = (endLte as any instanceof Date) ?
                    (endLte as any).toISOString() :
                    endLte;
            }

            if (endGte !== undefined) {
                localVarQueryParameter['end[gte]'] = (endGte as any instanceof Date) ?
                    (endGte as any).toISOString() :
                    endGte;
            }

            if (deleted !== undefined) {
                localVarQueryParameter['deleted'] = deleted;
            }

            if (draft !== undefined) {
                localVarQueryParameter['draft'] = draft;
            }

            if (includeDraft !== undefined) {
                localVarQueryParameter['include_draft'] = includeDraft;
            }

            if (open !== undefined) {
                localVarQueryParameter['open'] = open;
            }

            if (modifiedSince !== undefined) {
                localVarQueryParameter['modified_since'] = (modifiedSince as any instanceof Date) ?
                    (modifiedSince as any).toISOString() :
                    modifiedSince;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (sortDir !== undefined) {
                localVarQueryParameter['sort_dir'] = sortDir;
            }

            if (xApiVersion != null) {
                localVarHeaderParameter['x-api-version'] = String(xApiVersion);
            }

            if (xCompanyGuid != null) {
                localVarHeaderParameter['x-company-guid'] = String(xCompanyGuid);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/company/{company_id}/shifts',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update Shift
         * @param {number} companyId Company ID
         * @param {number} shiftId Shift ID
         * @param {ShiftsUpdateShiftByIdRequest} shiftsUpdateShiftByIdRequest 
         * @param {string} [xApiVersion] 7shifts API version
         * @param {string} [xCompanyGuid] Company GUID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateShiftById: async (companyId: number, shiftId: number, shiftsUpdateShiftByIdRequest: ShiftsUpdateShiftByIdRequest, xApiVersion?: string, xCompanyGuid?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('updateShiftById', 'companyId', companyId)
            // verify required parameter 'shiftId' is not null or undefined
            assertParamExists('updateShiftById', 'shiftId', shiftId)
            // verify required parameter 'shiftsUpdateShiftByIdRequest' is not null or undefined
            assertParamExists('updateShiftById', 'shiftsUpdateShiftByIdRequest', shiftsUpdateShiftByIdRequest)
            const localVarPath = `/v2/company/{company_id}/shifts/{shift_id}`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId !== undefined ? companyId : `-company_id-`)))
                .replace(`{${"shift_id"}}`, encodeURIComponent(String(shiftId !== undefined ? shiftId : `-shift_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication cookieAuth required
            await setApiKeyToObject({object: localVarHeaderParameter, type: "Cookie", key: "Cookie", keyParamName: "7session", configuration})
            if (xApiVersion != null) {
                localVarHeaderParameter['x-api-version'] = String(xApiVersion);
            }

            if (xCompanyGuid != null) {
                localVarHeaderParameter['x-company-guid'] = String(xCompanyGuid);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: shiftsUpdateShiftByIdRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/company/{company_id}/shifts/{shift_id}',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(shiftsUpdateShiftByIdRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ShiftsApi - functional programming interface
 * @export
 */
export const ShiftsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ShiftsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create Shift
         * @param {ShiftsApiCreateNewShiftRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createNewShift(requestParameters: ShiftsApiCreateNewShiftRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ShiftsCreateNewShiftResponse>> {
            const shiftsCreateNewShiftRequest: ShiftsCreateNewShiftRequest = {
                location_id: requestParameters.location_id,
                user_id: requestParameters.user_id,
                department_id: requestParameters.department_id,
                role_id: requestParameters.role_id,
                station_id: requestParameters.station_id,
                start: requestParameters.start,
                end: requestParameters.end,
                close: requestParameters.close,
                business_decline: requestParameters.business_decline,
                notes: requestParameters.notes,
                draft: requestParameters.draft,
                notified: requestParameters.notified,
                open: requestParameters.open,
                open_offer_type: requestParameters.open_offer_type,
                unassigned: requestParameters.unassigned,
                unassigned_skill_level: requestParameters.unassigned_skill_level,
                status: requestParameters.status,
                late_minutes: requestParameters.late_minutes,
                breaks: requestParameters.breaks
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createNewShift(requestParameters.companyId, shiftsCreateNewShiftRequest, requestParameters.xApiVersion, requestParameters.xCompanyGuid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete Shift
         * @param {ShiftsApiDeleteShiftByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteShiftById(requestParameters: ShiftsApiDeleteShiftByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteShiftById(requestParameters.companyId, requestParameters.shiftId, requestParameters.xApiVersion, requestParameters.xCompanyGuid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Retrieve Shift
         * @param {ShiftsApiGetShiftByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getShiftById(requestParameters: ShiftsApiGetShiftByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ShiftsGetShiftByIdResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getShiftById(requestParameters.companyId, requestParameters.shiftId, requestParameters.xApiVersion, requestParameters.xCompanyGuid, requestParameters.includeDeleted, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary List Shifts
         * @param {ShiftsApiListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async list(requestParameters: ShiftsApiListRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ShiftsListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.list(requestParameters.companyId, requestParameters.xApiVersion, requestParameters.xCompanyGuid, requestParameters.cursor, requestParameters.limit, requestParameters.locationId, requestParameters.shiftIds, requestParameters.departmentId, requestParameters.departmentIds, requestParameters.roleId, requestParameters.userId, requestParameters.startLte, requestParameters.startGte, requestParameters.endLte, requestParameters.endGte, requestParameters.deleted, requestParameters.draft, requestParameters.includeDraft, requestParameters.open, requestParameters.modifiedSince, requestParameters.sortBy, requestParameters.sortDir, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update Shift
         * @param {ShiftsApiUpdateShiftByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateShiftById(requestParameters: ShiftsApiUpdateShiftByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ShiftsUpdateShiftByIdResponse>> {
            const shiftsUpdateShiftByIdRequest: ShiftsUpdateShiftByIdRequest = {
                location_id: requestParameters.location_id,
                user_id: requestParameters.user_id,
                department_id: requestParameters.department_id,
                role_id: requestParameters.role_id,
                station_id: requestParameters.station_id,
                start: requestParameters.start,
                end: requestParameters.end,
                close: requestParameters.close,
                business_decline: requestParameters.business_decline,
                notes: requestParameters.notes,
                draft: requestParameters.draft,
                open: requestParameters.open,
                open_offer_type: requestParameters.open_offer_type,
                unassigned: requestParameters.unassigned,
                unassigned_skill_level: requestParameters.unassigned_skill_level,
                status: requestParameters.status,
                late_minutes: requestParameters.late_minutes,
                breaks: requestParameters.breaks
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateShiftById(requestParameters.companyId, requestParameters.shiftId, shiftsUpdateShiftByIdRequest, requestParameters.xApiVersion, requestParameters.xCompanyGuid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ShiftsApi - factory interface
 * @export
 */
export const ShiftsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ShiftsApiFp(configuration)
    return {
        /**
         * 
         * @summary Create Shift
         * @param {ShiftsApiCreateNewShiftRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewShift(requestParameters: ShiftsApiCreateNewShiftRequest, options?: AxiosRequestConfig): AxiosPromise<ShiftsCreateNewShiftResponse> {
            return localVarFp.createNewShift(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete Shift
         * @param {ShiftsApiDeleteShiftByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteShiftById(requestParameters: ShiftsApiDeleteShiftByIdRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteShiftById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve Shift
         * @param {ShiftsApiGetShiftByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getShiftById(requestParameters: ShiftsApiGetShiftByIdRequest, options?: AxiosRequestConfig): AxiosPromise<ShiftsGetShiftByIdResponse> {
            return localVarFp.getShiftById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List Shifts
         * @param {ShiftsApiListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list(requestParameters: ShiftsApiListRequest, options?: AxiosRequestConfig): AxiosPromise<ShiftsListResponse> {
            return localVarFp.list(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update Shift
         * @param {ShiftsApiUpdateShiftByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateShiftById(requestParameters: ShiftsApiUpdateShiftByIdRequest, options?: AxiosRequestConfig): AxiosPromise<ShiftsUpdateShiftByIdResponse> {
            return localVarFp.updateShiftById(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createNewShift operation in ShiftsApi.
 * @export
 * @interface ShiftsApiCreateNewShiftRequest
 */
export type ShiftsApiCreateNewShiftRequest = {
    
    /**
    * Company ID
    * @type {number}
    * @memberof ShiftsApiCreateNewShift
    */
    readonly companyId: number
    
    /**
    * 7shifts API version
    * @type {string}
    * @memberof ShiftsApiCreateNewShift
    */
    readonly xApiVersion?: string
    
    /**
    * Company GUID
    * @type {string}
    * @memberof ShiftsApiCreateNewShift
    */
    readonly xCompanyGuid?: string
    
} & ShiftsCreateNewShiftRequest

/**
 * Request parameters for deleteShiftById operation in ShiftsApi.
 * @export
 * @interface ShiftsApiDeleteShiftByIdRequest
 */
export type ShiftsApiDeleteShiftByIdRequest = {
    
    /**
    * Company ID
    * @type {number}
    * @memberof ShiftsApiDeleteShiftById
    */
    readonly companyId: number
    
    /**
    * Shift ID
    * @type {number}
    * @memberof ShiftsApiDeleteShiftById
    */
    readonly shiftId: number
    
    /**
    * 7shifts API version
    * @type {string}
    * @memberof ShiftsApiDeleteShiftById
    */
    readonly xApiVersion?: string
    
    /**
    * Company GUID
    * @type {string}
    * @memberof ShiftsApiDeleteShiftById
    */
    readonly xCompanyGuid?: string
    
}

/**
 * Request parameters for getShiftById operation in ShiftsApi.
 * @export
 * @interface ShiftsApiGetShiftByIdRequest
 */
export type ShiftsApiGetShiftByIdRequest = {
    
    /**
    * Company ID
    * @type {number}
    * @memberof ShiftsApiGetShiftById
    */
    readonly companyId: number
    
    /**
    * Shift ID
    * @type {number}
    * @memberof ShiftsApiGetShiftById
    */
    readonly shiftId: number
    
    /**
    * 7shifts API version
    * @type {string}
    * @memberof ShiftsApiGetShiftById
    */
    readonly xApiVersion?: string
    
    /**
    * Company GUID
    * @type {string}
    * @memberof ShiftsApiGetShiftById
    */
    readonly xCompanyGuid?: string
    
    /**
    * Return the shift even if its deleted
    * @type {boolean}
    * @memberof ShiftsApiGetShiftById
    */
    readonly includeDeleted?: boolean
    
}

/**
 * Request parameters for list operation in ShiftsApi.
 * @export
 * @interface ShiftsApiListRequest
 */
export type ShiftsApiListRequest = {
    
    /**
    * Company ID
    * @type {number}
    * @memberof ShiftsApiList
    */
    readonly companyId: number
    
    /**
    * 7shifts API version
    * @type {string}
    * @memberof ShiftsApiList
    */
    readonly xApiVersion?: string
    
    /**
    * Company GUID
    * @type {string}
    * @memberof ShiftsApiList
    */
    readonly xCompanyGuid?: string
    
    /**
    * Cursor for the next or previous page of results.
    * @type {string}
    * @memberof ShiftsApiList
    */
    readonly cursor?: string
    
    /**
    * The number of results desired per page.
    * @type {number}
    * @memberof ShiftsApiList
    */
    readonly limit?: number
    
    /**
    * Location ID
    * @type {number}
    * @memberof ShiftsApiList
    */
    readonly locationId?: number
    
    /**
    * A comma separated list of Shift IDs
    * @type {Array<number>}
    * @memberof ShiftsApiList
    */
    readonly shiftIds?: Array<number>
    
    /**
    * Department ID
    * @type {number}
    * @memberof ShiftsApiList
    */
    readonly departmentId?: number
    
    /**
    * Department IDs
    * @type {Array<number>}
    * @memberof ShiftsApiList
    */
    readonly departmentIds?: Array<number>
    
    /**
    * Role ID
    * @type {number}
    * @memberof ShiftsApiList
    */
    readonly roleId?: number
    
    /**
    * User ID
    * @type {number}
    * @memberof ShiftsApiList
    */
    readonly userId?: number
    
    /**
    * Return shifts that start before or on specified date. In ISO8601 Format
    * @type {string}
    * @memberof ShiftsApiList
    */
    readonly startLte?: string
    
    /**
    * Return shifts that start after or on specified date time. In ISO8601 Format
    * @type {string}
    * @memberof ShiftsApiList
    */
    readonly startGte?: string
    
    /**
    * Return shifts that end before or on specified date time. In ISO8601 Format
    * @type {string}
    * @memberof ShiftsApiList
    */
    readonly endLte?: string
    
    /**
    * Return shifts that end after or on specified date time. In ISO8601 Format
    * @type {string}
    * @memberof ShiftsApiList
    */
    readonly endGte?: string
    
    /**
    * Return shifts that were published and have been deleted. Cannot be combined with draft.
    * @type {boolean}
    * @memberof ShiftsApiList
    */
    readonly deleted?: boolean
    
    /**
    * Return shifts that are in draft. Draft shifts have created, edited or deleted but not been published. Overrides deleted flag.
    * @type {boolean}
    * @memberof ShiftsApiList
    */
    readonly draft?: boolean
    
    /**
    * Return shifts that are published, and also shifts in draft. Overrides deleted flag and draft flag.
    * @type {boolean}
    * @memberof ShiftsApiList
    */
    readonly includeDraft?: boolean
    
    /**
    * Return shifts that are open. Open shifts means anyone can request to take it and not assigned to any individual.
    * @type {boolean}
    * @memberof ShiftsApiList
    */
    readonly open?: boolean
    
    /**
    * Return only shifts that have been modified from specified date time. In ISO8601 Format
    * @type {string}
    * @memberof ShiftsApiList
    */
    readonly modifiedSince?: string
    
    /**
    * Sort by either start or end
    * @type {string}
    * @memberof ShiftsApiList
    */
    readonly sortBy?: string
    
    /**
    * Sort by direction (asc, desc)
    * @type {string}
    * @memberof ShiftsApiList
    */
    readonly sortDir?: string
    
}

/**
 * Request parameters for updateShiftById operation in ShiftsApi.
 * @export
 * @interface ShiftsApiUpdateShiftByIdRequest
 */
export type ShiftsApiUpdateShiftByIdRequest = {
    
    /**
    * Company ID
    * @type {number}
    * @memberof ShiftsApiUpdateShiftById
    */
    readonly companyId: number
    
    /**
    * Shift ID
    * @type {number}
    * @memberof ShiftsApiUpdateShiftById
    */
    readonly shiftId: number
    
    /**
    * 7shifts API version
    * @type {string}
    * @memberof ShiftsApiUpdateShiftById
    */
    readonly xApiVersion?: string
    
    /**
    * Company GUID
    * @type {string}
    * @memberof ShiftsApiUpdateShiftById
    */
    readonly xCompanyGuid?: string
    
} & ShiftsUpdateShiftByIdRequest

/**
 * ShiftsApiGenerated - object-oriented interface
 * @export
 * @class ShiftsApiGenerated
 * @extends {BaseAPI}
 */
export class ShiftsApiGenerated extends BaseAPI {
    /**
     * 
     * @summary Create Shift
     * @param {ShiftsApiCreateNewShiftRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShiftsApiGenerated
     */
    public createNewShift(requestParameters: ShiftsApiCreateNewShiftRequest, options?: AxiosRequestConfig) {
        return ShiftsApiFp(this.configuration).createNewShift(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete Shift
     * @param {ShiftsApiDeleteShiftByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShiftsApiGenerated
     */
    public deleteShiftById(requestParameters: ShiftsApiDeleteShiftByIdRequest, options?: AxiosRequestConfig) {
        return ShiftsApiFp(this.configuration).deleteShiftById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve Shift
     * @param {ShiftsApiGetShiftByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShiftsApiGenerated
     */
    public getShiftById(requestParameters: ShiftsApiGetShiftByIdRequest, options?: AxiosRequestConfig) {
        return ShiftsApiFp(this.configuration).getShiftById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List Shifts
     * @param {ShiftsApiListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShiftsApiGenerated
     */
    public list(requestParameters: ShiftsApiListRequest, options?: AxiosRequestConfig) {
        return ShiftsApiFp(this.configuration).list(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update Shift
     * @param {ShiftsApiUpdateShiftByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShiftsApiGenerated
     */
    public updateShiftById(requestParameters: ShiftsApiUpdateShiftByIdRequest, options?: AxiosRequestConfig) {
        return ShiftsApiFp(this.configuration).updateShiftById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
