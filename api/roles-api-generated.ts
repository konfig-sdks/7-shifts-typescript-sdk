/* tslint:disable */
/* eslint-disable */
/*
7shifts API

7shifts is a team management software designed for restaurants. We help managers and operators spend less time and effort scheduling their staff, reduce their monthly labor costs and improve team communication. The result is simplified team management, one shift at a time.

7shifts also offers free mobile apps (iOS and Android) allowing managers and employees to have everything at their fingertips.

Start your free trial or request a demo at www.7shifts.com.

The version of the OpenAPI document: 2023-05-01
Contact: api-support@7shifts.com

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { RolesCreateRole400Response } from '../models';
// @ts-ignore
import { RolesCreateRole403Response } from '../models';
// @ts-ignore
import { RolesCreateRole422Response } from '../models';
// @ts-ignore
import { RolesCreateRole500Response } from '../models';
// @ts-ignore
import { RolesCreateRoleRequest } from '../models';
// @ts-ignore
import { RolesCreateRoleRequestStationsInner } from '../models';
// @ts-ignore
import { RolesCreateRoleResponse } from '../models';
// @ts-ignore
import { RolesDeleteRole403Response } from '../models';
// @ts-ignore
import { RolesDeleteRole404Response } from '../models';
// @ts-ignore
import { RolesDeleteRole500Response } from '../models';
// @ts-ignore
import { RolesDeleteRoleResponse } from '../models';
// @ts-ignore
import { RolesGetRole403Response } from '../models';
// @ts-ignore
import { RolesGetRole404Response } from '../models';
// @ts-ignore
import { RolesGetRole500Response } from '../models';
// @ts-ignore
import { RolesGetRoleResponse } from '../models';
// @ts-ignore
import { RolesList400Response } from '../models';
// @ts-ignore
import { RolesList403Response } from '../models';
// @ts-ignore
import { RolesList404Response } from '../models';
// @ts-ignore
import { RolesList500Response } from '../models';
// @ts-ignore
import { RolesListResponse } from '../models';
// @ts-ignore
import { RolesUpdateRoleById400Response } from '../models';
// @ts-ignore
import { RolesUpdateRoleById403Response } from '../models';
// @ts-ignore
import { RolesUpdateRoleById404Response } from '../models';
// @ts-ignore
import { RolesUpdateRoleById422Response } from '../models';
// @ts-ignore
import { RolesUpdateRoleById500Response } from '../models';
// @ts-ignore
import { RolesUpdateRoleByIdRequest } from '../models';
// @ts-ignore
import { RolesUpdateRoleByIdRequestStationsInner } from '../models';
// @ts-ignore
import { RolesUpdateRoleByIdResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * RolesApi - axios parameter creator
 * @export
 */
export const RolesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create Role
         * @param {number} companyId The company id
         * @param {RolesCreateRoleRequest} rolesCreateRoleRequest 
         * @param {string} [xApiVersion] 7shifts API version
         * @param {string} [xCompanyGuid] Company GUID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRole: async (companyId: number, rolesCreateRoleRequest: RolesCreateRoleRequest, xApiVersion?: string, xCompanyGuid?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('createRole', 'companyId', companyId)
            // verify required parameter 'rolesCreateRoleRequest' is not null or undefined
            assertParamExists('createRole', 'rolesCreateRoleRequest', rolesCreateRoleRequest)
            const localVarPath = `/v2/company/{company_id}/roles`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId !== undefined ? companyId : `-company_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication cookieAuth required
            await setApiKeyToObject({object: localVarHeaderParameter, type: "Cookie", key: "Cookie", keyParamName: "7session", configuration})
            if (xApiVersion != null) {
                localVarHeaderParameter['x-api-version'] = String(xApiVersion);
            }

            if (xCompanyGuid != null) {
                localVarHeaderParameter['x-company-guid'] = String(xCompanyGuid);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: rolesCreateRoleRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/company/{company_id}/roles',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(rolesCreateRoleRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete Role
         * @param {number} companyId Company ID
         * @param {number} roleId Role ID
         * @param {string} [xApiVersion] 7shifts API version
         * @param {string} [xCompanyGuid] Company GUID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRole: async (companyId: number, roleId: number, xApiVersion?: string, xCompanyGuid?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('deleteRole', 'companyId', companyId)
            // verify required parameter 'roleId' is not null or undefined
            assertParamExists('deleteRole', 'roleId', roleId)
            const localVarPath = `/v2/company/{company_id}/roles/{role_id}`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId !== undefined ? companyId : `-company_id-`)))
                .replace(`{${"role_id"}}`, encodeURIComponent(String(roleId !== undefined ? roleId : `-role_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication cookieAuth required
            await setApiKeyToObject({object: localVarHeaderParameter, type: "Cookie", key: "Cookie", keyParamName: "7session", configuration})
            if (xApiVersion != null) {
                localVarHeaderParameter['x-api-version'] = String(xApiVersion);
            }

            if (xCompanyGuid != null) {
                localVarHeaderParameter['x-company-guid'] = String(xCompanyGuid);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/company/{company_id}/roles/{role_id}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve Role
         * @param {number} companyId Company ID
         * @param {number} roleId Role ID
         * @param {string} [xApiVersion] 7shifts API version
         * @param {string} [xCompanyGuid] Company GUID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRole: async (companyId: number, roleId: number, xApiVersion?: string, xCompanyGuid?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('getRole', 'companyId', companyId)
            // verify required parameter 'roleId' is not null or undefined
            assertParamExists('getRole', 'roleId', roleId)
            const localVarPath = `/v2/company/{company_id}/roles/{role_id}`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId !== undefined ? companyId : `-company_id-`)))
                .replace(`{${"role_id"}}`, encodeURIComponent(String(roleId !== undefined ? roleId : `-role_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication cookieAuth required
            await setApiKeyToObject({object: localVarHeaderParameter, type: "Cookie", key: "Cookie", keyParamName: "7session", configuration})
            if (xApiVersion != null) {
                localVarHeaderParameter['x-api-version'] = String(xApiVersion);
            }

            if (xCompanyGuid != null) {
                localVarHeaderParameter['x-company-guid'] = String(xCompanyGuid);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/company/{company_id}/roles/{role_id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List Roles
         * @param {number} companyId Company ID
         * @param {string} [xApiVersion] 7shifts API version
         * @param {string} [xCompanyGuid] Company GUID
         * @param {number} [locationId] Location ID
         * @param {number} [departmentId] Department ID
         * @param {Array<number>} [ids] Role IDs
         * @param {string} [modifiedSince] Return roles that have been modified since the specified date. Format YYYY-MM-DD
         * @param {string} [cursor] Cursor for the next or previous page of results.
         * @param {number} [limit] The number of results desired per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list: async (companyId: number, xApiVersion?: string, xCompanyGuid?: string, locationId?: number, departmentId?: number, ids?: Array<number>, modifiedSince?: string, cursor?: string, limit?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('list', 'companyId', companyId)
            const localVarPath = `/v2/company/{company_id}/roles`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId !== undefined ? companyId : `-company_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication cookieAuth required
            await setApiKeyToObject({object: localVarHeaderParameter, type: "Cookie", key: "Cookie", keyParamName: "7session", configuration})
            if (locationId !== undefined) {
                localVarQueryParameter['location_id'] = locationId;
            }

            if (departmentId !== undefined) {
                localVarQueryParameter['department_id'] = departmentId;
            }

            if (ids) {
                localVarQueryParameter['ids'] = ids.join(COLLECTION_FORMATS.csv);
            }

            if (modifiedSince !== undefined) {
                localVarQueryParameter['modified_since'] = modifiedSince;
            }

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (xApiVersion != null) {
                localVarHeaderParameter['x-api-version'] = String(xApiVersion);
            }

            if (xCompanyGuid != null) {
                localVarHeaderParameter['x-company-guid'] = String(xCompanyGuid);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/company/{company_id}/roles',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update Role
         * @param {number} companyId Company ID
         * @param {number} roleId Role ID
         * @param {RolesUpdateRoleByIdRequest} rolesUpdateRoleByIdRequest 
         * @param {string} [xApiVersion] 7shifts API version
         * @param {string} [xCompanyGuid] Company GUID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRoleById: async (companyId: number, roleId: number, rolesUpdateRoleByIdRequest: RolesUpdateRoleByIdRequest, xApiVersion?: string, xCompanyGuid?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('updateRoleById', 'companyId', companyId)
            // verify required parameter 'roleId' is not null or undefined
            assertParamExists('updateRoleById', 'roleId', roleId)
            // verify required parameter 'rolesUpdateRoleByIdRequest' is not null or undefined
            assertParamExists('updateRoleById', 'rolesUpdateRoleByIdRequest', rolesUpdateRoleByIdRequest)
            const localVarPath = `/v2/company/{company_id}/roles/{role_id}`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId !== undefined ? companyId : `-company_id-`)))
                .replace(`{${"role_id"}}`, encodeURIComponent(String(roleId !== undefined ? roleId : `-role_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication cookieAuth required
            await setApiKeyToObject({object: localVarHeaderParameter, type: "Cookie", key: "Cookie", keyParamName: "7session", configuration})
            if (xApiVersion != null) {
                localVarHeaderParameter['x-api-version'] = String(xApiVersion);
            }

            if (xCompanyGuid != null) {
                localVarHeaderParameter['x-company-guid'] = String(xCompanyGuid);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: rolesUpdateRoleByIdRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/company/{company_id}/roles/{role_id}',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(rolesUpdateRoleByIdRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RolesApi - functional programming interface
 * @export
 */
export const RolesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = RolesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create Role
         * @param {RolesApiCreateRoleRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createRole(requestParameters: RolesApiCreateRoleRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RolesCreateRoleResponse>> {
            const rolesCreateRoleRequest: RolesCreateRoleRequest = {
                name: requestParameters.name,
                color: requestParameters.color,
                location_id: requestParameters.location_id,
                department_id: requestParameters.department_id,
                sort: requestParameters.sort,
                job_code: requestParameters.job_code,
                stations: requestParameters.stations
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createRole(requestParameters.companyId, rolesCreateRoleRequest, requestParameters.xApiVersion, requestParameters.xCompanyGuid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete Role
         * @param {RolesApiDeleteRoleRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteRole(requestParameters: RolesApiDeleteRoleRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteRole(requestParameters.companyId, requestParameters.roleId, requestParameters.xApiVersion, requestParameters.xCompanyGuid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Retrieve Role
         * @param {RolesApiGetRoleRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRole(requestParameters: RolesApiGetRoleRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RolesGetRoleResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRole(requestParameters.companyId, requestParameters.roleId, requestParameters.xApiVersion, requestParameters.xCompanyGuid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary List Roles
         * @param {RolesApiListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async list(requestParameters: RolesApiListRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RolesListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.list(requestParameters.companyId, requestParameters.xApiVersion, requestParameters.xCompanyGuid, requestParameters.locationId, requestParameters.departmentId, requestParameters.ids, requestParameters.modifiedSince, requestParameters.cursor, requestParameters.limit, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update Role
         * @param {RolesApiUpdateRoleByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateRoleById(requestParameters: RolesApiUpdateRoleByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RolesUpdateRoleByIdResponse>> {
            const rolesUpdateRoleByIdRequest: RolesUpdateRoleByIdRequest = {
                department_id: requestParameters.department_id,
                sort: requestParameters.sort,
                color: requestParameters.color,
                name: requestParameters.name,
                job_code: requestParameters.job_code,
                stations: requestParameters.stations
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateRoleById(requestParameters.companyId, requestParameters.roleId, rolesUpdateRoleByIdRequest, requestParameters.xApiVersion, requestParameters.xCompanyGuid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * RolesApi - factory interface
 * @export
 */
export const RolesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = RolesApiFp(configuration)
    return {
        /**
         * 
         * @summary Create Role
         * @param {RolesApiCreateRoleRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRole(requestParameters: RolesApiCreateRoleRequest, options?: AxiosRequestConfig): AxiosPromise<RolesCreateRoleResponse> {
            return localVarFp.createRole(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete Role
         * @param {RolesApiDeleteRoleRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRole(requestParameters: RolesApiDeleteRoleRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteRole(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve Role
         * @param {RolesApiGetRoleRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRole(requestParameters: RolesApiGetRoleRequest, options?: AxiosRequestConfig): AxiosPromise<RolesGetRoleResponse> {
            return localVarFp.getRole(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List Roles
         * @param {RolesApiListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list(requestParameters: RolesApiListRequest, options?: AxiosRequestConfig): AxiosPromise<RolesListResponse> {
            return localVarFp.list(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update Role
         * @param {RolesApiUpdateRoleByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRoleById(requestParameters: RolesApiUpdateRoleByIdRequest, options?: AxiosRequestConfig): AxiosPromise<RolesUpdateRoleByIdResponse> {
            return localVarFp.updateRoleById(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createRole operation in RolesApi.
 * @export
 * @interface RolesApiCreateRoleRequest
 */
export type RolesApiCreateRoleRequest = {
    
    /**
    * The company id
    * @type {number}
    * @memberof RolesApiCreateRole
    */
    readonly companyId: number
    
    /**
    * 7shifts API version
    * @type {string}
    * @memberof RolesApiCreateRole
    */
    readonly xApiVersion?: string
    
    /**
    * Company GUID
    * @type {string}
    * @memberof RolesApiCreateRole
    */
    readonly xCompanyGuid?: string
    
} & RolesCreateRoleRequest

/**
 * Request parameters for deleteRole operation in RolesApi.
 * @export
 * @interface RolesApiDeleteRoleRequest
 */
export type RolesApiDeleteRoleRequest = {
    
    /**
    * Company ID
    * @type {number}
    * @memberof RolesApiDeleteRole
    */
    readonly companyId: number
    
    /**
    * Role ID
    * @type {number}
    * @memberof RolesApiDeleteRole
    */
    readonly roleId: number
    
    /**
    * 7shifts API version
    * @type {string}
    * @memberof RolesApiDeleteRole
    */
    readonly xApiVersion?: string
    
    /**
    * Company GUID
    * @type {string}
    * @memberof RolesApiDeleteRole
    */
    readonly xCompanyGuid?: string
    
}

/**
 * Request parameters for getRole operation in RolesApi.
 * @export
 * @interface RolesApiGetRoleRequest
 */
export type RolesApiGetRoleRequest = {
    
    /**
    * Company ID
    * @type {number}
    * @memberof RolesApiGetRole
    */
    readonly companyId: number
    
    /**
    * Role ID
    * @type {number}
    * @memberof RolesApiGetRole
    */
    readonly roleId: number
    
    /**
    * 7shifts API version
    * @type {string}
    * @memberof RolesApiGetRole
    */
    readonly xApiVersion?: string
    
    /**
    * Company GUID
    * @type {string}
    * @memberof RolesApiGetRole
    */
    readonly xCompanyGuid?: string
    
}

/**
 * Request parameters for list operation in RolesApi.
 * @export
 * @interface RolesApiListRequest
 */
export type RolesApiListRequest = {
    
    /**
    * Company ID
    * @type {number}
    * @memberof RolesApiList
    */
    readonly companyId: number
    
    /**
    * 7shifts API version
    * @type {string}
    * @memberof RolesApiList
    */
    readonly xApiVersion?: string
    
    /**
    * Company GUID
    * @type {string}
    * @memberof RolesApiList
    */
    readonly xCompanyGuid?: string
    
    /**
    * Location ID
    * @type {number}
    * @memberof RolesApiList
    */
    readonly locationId?: number
    
    /**
    * Department ID
    * @type {number}
    * @memberof RolesApiList
    */
    readonly departmentId?: number
    
    /**
    * Role IDs
    * @type {Array<number>}
    * @memberof RolesApiList
    */
    readonly ids?: Array<number>
    
    /**
    * Return roles that have been modified since the specified date. Format YYYY-MM-DD
    * @type {string}
    * @memberof RolesApiList
    */
    readonly modifiedSince?: string
    
    /**
    * Cursor for the next or previous page of results.
    * @type {string}
    * @memberof RolesApiList
    */
    readonly cursor?: string
    
    /**
    * The number of results desired per page.
    * @type {number}
    * @memberof RolesApiList
    */
    readonly limit?: number
    
}

/**
 * Request parameters for updateRoleById operation in RolesApi.
 * @export
 * @interface RolesApiUpdateRoleByIdRequest
 */
export type RolesApiUpdateRoleByIdRequest = {
    
    /**
    * Company ID
    * @type {number}
    * @memberof RolesApiUpdateRoleById
    */
    readonly companyId: number
    
    /**
    * Role ID
    * @type {number}
    * @memberof RolesApiUpdateRoleById
    */
    readonly roleId: number
    
    /**
    * 7shifts API version
    * @type {string}
    * @memberof RolesApiUpdateRoleById
    */
    readonly xApiVersion?: string
    
    /**
    * Company GUID
    * @type {string}
    * @memberof RolesApiUpdateRoleById
    */
    readonly xCompanyGuid?: string
    
} & RolesUpdateRoleByIdRequest

/**
 * RolesApiGenerated - object-oriented interface
 * @export
 * @class RolesApiGenerated
 * @extends {BaseAPI}
 */
export class RolesApiGenerated extends BaseAPI {
    /**
     * 
     * @summary Create Role
     * @param {RolesApiCreateRoleRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolesApiGenerated
     */
    public createRole(requestParameters: RolesApiCreateRoleRequest, options?: AxiosRequestConfig) {
        return RolesApiFp(this.configuration).createRole(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete Role
     * @param {RolesApiDeleteRoleRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolesApiGenerated
     */
    public deleteRole(requestParameters: RolesApiDeleteRoleRequest, options?: AxiosRequestConfig) {
        return RolesApiFp(this.configuration).deleteRole(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve Role
     * @param {RolesApiGetRoleRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolesApiGenerated
     */
    public getRole(requestParameters: RolesApiGetRoleRequest, options?: AxiosRequestConfig) {
        return RolesApiFp(this.configuration).getRole(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List Roles
     * @param {RolesApiListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolesApiGenerated
     */
    public list(requestParameters: RolesApiListRequest, options?: AxiosRequestConfig) {
        return RolesApiFp(this.configuration).list(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update Role
     * @param {RolesApiUpdateRoleByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolesApiGenerated
     */
    public updateRoleById(requestParameters: RolesApiUpdateRoleByIdRequest, options?: AxiosRequestConfig) {
        return RolesApiFp(this.configuration).updateRoleById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
