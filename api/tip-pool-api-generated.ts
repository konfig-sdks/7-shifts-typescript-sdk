/* tslint:disable */
/* eslint-disable */
/*
7shifts API

7shifts is a team management software designed for restaurants. We help managers and operators spend less time and effort scheduling their staff, reduce their monthly labor costs and improve team communication. The result is simplified team management, one shift at a time.

7shifts also offers free mobile apps (iOS and Android) allowing managers and employees to have everything at their fingertips.

Start your free trial or request a demo at www.7shifts.com.

The version of the OpenAPI document: 2023-05-01
Contact: api-support@7shifts.com

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { TipPoolGetDetailedReport400Response } from '../models';
// @ts-ignore
import { TipPoolGetDetailedReport401Response } from '../models';
// @ts-ignore
import { TipPoolGetDetailedReport403Response } from '../models';
// @ts-ignore
import { TipPoolGetDetailedReport404Response } from '../models';
// @ts-ignore
import { TipPoolGetDetailedReport500Response } from '../models';
// @ts-ignore
import { TipPoolGetDetailedReportResponse } from '../models';
// @ts-ignore
import { TipPoolGetManualEntryTips401Response } from '../models';
// @ts-ignore
import { TipPoolGetManualEntryTips403Response } from '../models';
// @ts-ignore
import { TipPoolGetManualEntryTipsResponse } from '../models';
// @ts-ignore
import { TipPoolGetSettings403Response } from '../models';
// @ts-ignore
import { TipPoolGetSettings404Response } from '../models';
// @ts-ignore
import { TipPoolGetSettingsResponse } from '../models';
// @ts-ignore
import { TipPoolGetSummaryReport400Response } from '../models';
// @ts-ignore
import { TipPoolGetSummaryReport401Response } from '../models';
// @ts-ignore
import { TipPoolGetSummaryReport403Response } from '../models';
// @ts-ignore
import { TipPoolGetSummaryReport404Response } from '../models';
// @ts-ignore
import { TipPoolGetSummaryReport500Response } from '../models';
// @ts-ignore
import { TipPoolGetSummaryReportResponse } from '../models';
// @ts-ignore
import { TipPoolSaveManualEntry400Response } from '../models';
// @ts-ignore
import { TipPoolSaveManualEntry401Response } from '../models';
// @ts-ignore
import { TipPoolSaveManualEntry403Response } from '../models';
// @ts-ignore
import { TipPoolSaveManualEntry422Response } from '../models';
// @ts-ignore
import { TipPoolSaveManualEntry500Response } from '../models';
// @ts-ignore
import { TipPoolSaveManualEntryRequest } from '../models';
// @ts-ignore
import { TipPoolSaveManualEntryRequestDataInner } from '../models';
// @ts-ignore
import { TipPoolSaveManualEntryResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * TipPoolApi - axios parameter creator
 * @export
 */
export const TipPoolApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Retreive Tip Pool Detailed Report
         * @param {number} companyId Company ID
         * @param {number} locationId Location ID
         * @param {string} startDate The start date in YYYY-MM-DD format
         * @param {string} endDate The end date in YYYY-MM-DD format
         * @param {string} [xApiVersion] 7shifts API version
         * @param {string} [xCompanyGuid] Company GUID
         * @param {string} [tipPoolUuid] The tip pool UUID, when omitted the report will return all tip pools
         * @param {string} [dayPartUuid] Daypart UUID, when omitted the report will return all dayparts
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDetailedReport: async (companyId: number, locationId: number, startDate: string, endDate: string, xApiVersion?: string, xCompanyGuid?: string, tipPoolUuid?: string, dayPartUuid?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('getDetailedReport', 'companyId', companyId)
            // verify required parameter 'locationId' is not null or undefined
            assertParamExists('getDetailedReport', 'locationId', locationId)
            // verify required parameter 'startDate' is not null or undefined
            assertParamExists('getDetailedReport', 'startDate', startDate)
            // verify required parameter 'endDate' is not null or undefined
            assertParamExists('getDetailedReport', 'endDate', endDate)
            const localVarPath = `/v2/company/{company_id}/locations/{location_id}/tip_pool_detailed_report`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId !== undefined ? companyId : `-company_id-`)))
                .replace(`{${"location_id"}}`, encodeURIComponent(String(locationId !== undefined ? locationId : `-location_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication cookieAuth required
            await setApiKeyToObject({object: localVarHeaderParameter, type: "Cookie", key: "Cookie", keyParamName: "7session", configuration})
            if (tipPoolUuid !== undefined) {
                localVarQueryParameter['tip_pool_uuid'] = tipPoolUuid;
            }

            if (dayPartUuid !== undefined) {
                localVarQueryParameter['day_part_uuid'] = dayPartUuid;
            }

            if (startDate !== undefined) {
                localVarQueryParameter['start_date'] = startDate;
            }

            if (endDate !== undefined) {
                localVarQueryParameter['end_date'] = endDate;
            }

            if (xApiVersion != null) {
                localVarHeaderParameter['x-api-version'] = String(xApiVersion);
            }

            if (xCompanyGuid != null) {
                localVarHeaderParameter['x-company-guid'] = String(xCompanyGuid);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/company/{company_id}/locations/{location_id}/tip_pool_detailed_report',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Grabs manual entry tips for a tip pool
         * @param {number} companyId The company ID for the target tip pool settings
         * @param {string} tipPoolSettingsUuid The tip pool settings uuid
         * @param {string | Date} startDate The start date of the manual entry query range
         * @param {string | Date} endDate The end date of the manual entry query range
         * @param {string} [xApiVersion] 7shifts API version
         * @param {string} [xCompanyGuid] Company GUID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getManualEntryTips: async (companyId: number, tipPoolSettingsUuid: string, startDate: string | Date, endDate: string | Date, xApiVersion?: string, xCompanyGuid?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('getManualEntryTips', 'companyId', companyId)
            // verify required parameter 'tipPoolSettingsUuid' is not null or undefined
            assertParamExists('getManualEntryTips', 'tipPoolSettingsUuid', tipPoolSettingsUuid)
            // verify required parameter 'startDate' is not null or undefined
            assertParamExists('getManualEntryTips', 'startDate', startDate)
            // verify required parameter 'endDate' is not null or undefined
            assertParamExists('getManualEntryTips', 'endDate', endDate)
            const localVarPath = `/v2/company/{company_id}/tip_pool/{tip_pool_settings_uuid}/manual_entry`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId !== undefined ? companyId : `-company_id-`)))
                .replace(`{${"tip_pool_settings_uuid"}}`, encodeURIComponent(String(tipPoolSettingsUuid !== undefined ? tipPoolSettingsUuid : `-tip_pool_settings_uuid-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication cookieAuth required
            await setApiKeyToObject({object: localVarHeaderParameter, type: "Cookie", key: "Cookie", keyParamName: "7session", configuration})
            if (startDate !== undefined) {
                localVarQueryParameter['start_date'] = (startDate as any instanceof Date) ?
                    (startDate as any).toISOString().substr(0,10) :
                    startDate;
            }

            if (endDate !== undefined) {
                localVarQueryParameter['end_date'] = (endDate as any instanceof Date) ?
                    (endDate as any).toISOString().substr(0,10) :
                    endDate;
            }

            if (xApiVersion != null) {
                localVarHeaderParameter['x-api-version'] = String(xApiVersion);
            }

            if (xCompanyGuid != null) {
                localVarHeaderParameter['x-company-guid'] = String(xCompanyGuid);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/company/{company_id}/tip_pool/{tip_pool_settings_uuid}/manual_entry',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gets tip pool settings for a company
         * @param {number} companyId Company ID
         * @param {string} [xApiVersion] 7shifts API version
         * @param {string} [xCompanyGuid] Company GUID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSettings: async (companyId: number, xApiVersion?: string, xCompanyGuid?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('getSettings', 'companyId', companyId)
            const localVarPath = `/v2/company/{company_id}/tip_pool_settings`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId !== undefined ? companyId : `-company_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication cookieAuth required
            await setApiKeyToObject({object: localVarHeaderParameter, type: "Cookie", key: "Cookie", keyParamName: "7session", configuration})
            if (xApiVersion != null) {
                localVarHeaderParameter['x-api-version'] = String(xApiVersion);
            }

            if (xCompanyGuid != null) {
                localVarHeaderParameter['x-company-guid'] = String(xCompanyGuid);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/company/{company_id}/tip_pool_settings',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retreive Tip Pool Summary Report
         * @param {number} companyId Company ID
         * @param {number} locationId Location ID
         * @param {string} startDate The start date in YYYY-MM-DD format
         * @param {string} endDate The end date in YYYY-MM-DD format
         * @param {string} [xApiVersion] 7shifts API version
         * @param {string} [xCompanyGuid] Company GUID
         * @param {string} [tipPoolUuid] The tip pool UUID, when omitted the report will return all tip pools
         * @param {string} [dayPartUuid] Daypart UUID, when omitted the report will return all dayparts
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSummaryReport: async (companyId: number, locationId: number, startDate: string, endDate: string, xApiVersion?: string, xCompanyGuid?: string, tipPoolUuid?: string, dayPartUuid?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('getSummaryReport', 'companyId', companyId)
            // verify required parameter 'locationId' is not null or undefined
            assertParamExists('getSummaryReport', 'locationId', locationId)
            // verify required parameter 'startDate' is not null or undefined
            assertParamExists('getSummaryReport', 'startDate', startDate)
            // verify required parameter 'endDate' is not null or undefined
            assertParamExists('getSummaryReport', 'endDate', endDate)
            const localVarPath = `/v2/company/{company_id}/locations/{location_id}/tip_pool_summary_report`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId !== undefined ? companyId : `-company_id-`)))
                .replace(`{${"location_id"}}`, encodeURIComponent(String(locationId !== undefined ? locationId : `-location_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication cookieAuth required
            await setApiKeyToObject({object: localVarHeaderParameter, type: "Cookie", key: "Cookie", keyParamName: "7session", configuration})
            if (tipPoolUuid !== undefined) {
                localVarQueryParameter['tip_pool_uuid'] = tipPoolUuid;
            }

            if (dayPartUuid !== undefined) {
                localVarQueryParameter['day_part_uuid'] = dayPartUuid;
            }

            if (startDate !== undefined) {
                localVarQueryParameter['start_date'] = startDate;
            }

            if (endDate !== undefined) {
                localVarQueryParameter['end_date'] = endDate;
            }

            if (xApiVersion != null) {
                localVarHeaderParameter['x-api-version'] = String(xApiVersion);
            }

            if (xCompanyGuid != null) {
                localVarHeaderParameter['x-company-guid'] = String(xCompanyGuid);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/company/{company_id}/locations/{location_id}/tip_pool_summary_report',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Saves manual entries for a tip pool
         * @param {number} companyId The company ID for the target tip pool settings
         * @param {string} tipPoolSettingsUuid The tip pool settings uuid
         * @param {TipPoolSaveManualEntryRequest} tipPoolSaveManualEntryRequest 
         * @param {string} [xApiVersion] 7shifts API version
         * @param {string} [xCompanyGuid] Company GUID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveManualEntry: async (companyId: number, tipPoolSettingsUuid: string, tipPoolSaveManualEntryRequest: TipPoolSaveManualEntryRequest, xApiVersion?: string, xCompanyGuid?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('saveManualEntry', 'companyId', companyId)
            // verify required parameter 'tipPoolSettingsUuid' is not null or undefined
            assertParamExists('saveManualEntry', 'tipPoolSettingsUuid', tipPoolSettingsUuid)
            // verify required parameter 'tipPoolSaveManualEntryRequest' is not null or undefined
            assertParamExists('saveManualEntry', 'tipPoolSaveManualEntryRequest', tipPoolSaveManualEntryRequest)
            const localVarPath = `/v2/company/{company_id}/tip_pool/{tip_pool_settings_uuid}/manual_entry`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId !== undefined ? companyId : `-company_id-`)))
                .replace(`{${"tip_pool_settings_uuid"}}`, encodeURIComponent(String(tipPoolSettingsUuid !== undefined ? tipPoolSettingsUuid : `-tip_pool_settings_uuid-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication cookieAuth required
            await setApiKeyToObject({object: localVarHeaderParameter, type: "Cookie", key: "Cookie", keyParamName: "7session", configuration})
            if (xApiVersion != null) {
                localVarHeaderParameter['x-api-version'] = String(xApiVersion);
            }

            if (xCompanyGuid != null) {
                localVarHeaderParameter['x-company-guid'] = String(xCompanyGuid);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: tipPoolSaveManualEntryRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/company/{company_id}/tip_pool/{tip_pool_settings_uuid}/manual_entry',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(tipPoolSaveManualEntryRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TipPoolApi - functional programming interface
 * @export
 */
export const TipPoolApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TipPoolApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Retreive Tip Pool Detailed Report
         * @param {TipPoolApiGetDetailedReportRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDetailedReport(requestParameters: TipPoolApiGetDetailedReportRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TipPoolGetDetailedReportResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDetailedReport(requestParameters.companyId, requestParameters.locationId, requestParameters.startDate, requestParameters.endDate, requestParameters.xApiVersion, requestParameters.xCompanyGuid, requestParameters.tipPoolUuid, requestParameters.dayPartUuid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Grabs manual entry tips for a tip pool
         * @param {TipPoolApiGetManualEntryTipsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getManualEntryTips(requestParameters: TipPoolApiGetManualEntryTipsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TipPoolGetManualEntryTipsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getManualEntryTips(requestParameters.companyId, requestParameters.tipPoolSettingsUuid, requestParameters.startDate, requestParameters.endDate, requestParameters.xApiVersion, requestParameters.xCompanyGuid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Gets tip pool settings for a company
         * @param {TipPoolApiGetSettingsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSettings(requestParameters: TipPoolApiGetSettingsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TipPoolGetSettingsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSettings(requestParameters.companyId, requestParameters.xApiVersion, requestParameters.xCompanyGuid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Retreive Tip Pool Summary Report
         * @param {TipPoolApiGetSummaryReportRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSummaryReport(requestParameters: TipPoolApiGetSummaryReportRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TipPoolGetSummaryReportResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSummaryReport(requestParameters.companyId, requestParameters.locationId, requestParameters.startDate, requestParameters.endDate, requestParameters.xApiVersion, requestParameters.xCompanyGuid, requestParameters.tipPoolUuid, requestParameters.dayPartUuid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Saves manual entries for a tip pool
         * @param {TipPoolApiSaveManualEntryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async saveManualEntry(requestParameters: TipPoolApiSaveManualEntryRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TipPoolSaveManualEntryResponse>> {
            const tipPoolSaveManualEntryRequest: TipPoolSaveManualEntryRequest = {
                object: requestParameters.object,
                data: requestParameters.data
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.saveManualEntry(requestParameters.companyId, requestParameters.tipPoolSettingsUuid, tipPoolSaveManualEntryRequest, requestParameters.xApiVersion, requestParameters.xCompanyGuid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TipPoolApi - factory interface
 * @export
 */
export const TipPoolApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TipPoolApiFp(configuration)
    return {
        /**
         * 
         * @summary Retreive Tip Pool Detailed Report
         * @param {TipPoolApiGetDetailedReportRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDetailedReport(requestParameters: TipPoolApiGetDetailedReportRequest, options?: AxiosRequestConfig): AxiosPromise<TipPoolGetDetailedReportResponse> {
            return localVarFp.getDetailedReport(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Grabs manual entry tips for a tip pool
         * @param {TipPoolApiGetManualEntryTipsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getManualEntryTips(requestParameters: TipPoolApiGetManualEntryTipsRequest, options?: AxiosRequestConfig): AxiosPromise<TipPoolGetManualEntryTipsResponse> {
            return localVarFp.getManualEntryTips(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Gets tip pool settings for a company
         * @param {TipPoolApiGetSettingsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSettings(requestParameters: TipPoolApiGetSettingsRequest, options?: AxiosRequestConfig): AxiosPromise<TipPoolGetSettingsResponse> {
            return localVarFp.getSettings(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retreive Tip Pool Summary Report
         * @param {TipPoolApiGetSummaryReportRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSummaryReport(requestParameters: TipPoolApiGetSummaryReportRequest, options?: AxiosRequestConfig): AxiosPromise<TipPoolGetSummaryReportResponse> {
            return localVarFp.getSummaryReport(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Saves manual entries for a tip pool
         * @param {TipPoolApiSaveManualEntryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveManualEntry(requestParameters: TipPoolApiSaveManualEntryRequest, options?: AxiosRequestConfig): AxiosPromise<TipPoolSaveManualEntryResponse> {
            return localVarFp.saveManualEntry(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getDetailedReport operation in TipPoolApi.
 * @export
 * @interface TipPoolApiGetDetailedReportRequest
 */
export type TipPoolApiGetDetailedReportRequest = {
    
    /**
    * Company ID
    * @type {number}
    * @memberof TipPoolApiGetDetailedReport
    */
    readonly companyId: number
    
    /**
    * Location ID
    * @type {number}
    * @memberof TipPoolApiGetDetailedReport
    */
    readonly locationId: number
    
    /**
    * The start date in YYYY-MM-DD format
    * @type {string}
    * @memberof TipPoolApiGetDetailedReport
    */
    readonly startDate: string
    
    /**
    * The end date in YYYY-MM-DD format
    * @type {string}
    * @memberof TipPoolApiGetDetailedReport
    */
    readonly endDate: string
    
    /**
    * 7shifts API version
    * @type {string}
    * @memberof TipPoolApiGetDetailedReport
    */
    readonly xApiVersion?: string
    
    /**
    * Company GUID
    * @type {string}
    * @memberof TipPoolApiGetDetailedReport
    */
    readonly xCompanyGuid?: string
    
    /**
    * The tip pool UUID, when omitted the report will return all tip pools
    * @type {string}
    * @memberof TipPoolApiGetDetailedReport
    */
    readonly tipPoolUuid?: string
    
    /**
    * Daypart UUID, when omitted the report will return all dayparts
    * @type {string}
    * @memberof TipPoolApiGetDetailedReport
    */
    readonly dayPartUuid?: string
    
}

/**
 * Request parameters for getManualEntryTips operation in TipPoolApi.
 * @export
 * @interface TipPoolApiGetManualEntryTipsRequest
 */
export type TipPoolApiGetManualEntryTipsRequest = {
    
    /**
    * The company ID for the target tip pool settings
    * @type {number}
    * @memberof TipPoolApiGetManualEntryTips
    */
    readonly companyId: number
    
    /**
    * The tip pool settings uuid
    * @type {string}
    * @memberof TipPoolApiGetManualEntryTips
    */
    readonly tipPoolSettingsUuid: string
    
    /**
    * The start date of the manual entry query range
    * @type {string | Date}
    * @memberof TipPoolApiGetManualEntryTips
    */
    readonly startDate: string | Date
    
    /**
    * The end date of the manual entry query range
    * @type {string | Date}
    * @memberof TipPoolApiGetManualEntryTips
    */
    readonly endDate: string | Date
    
    /**
    * 7shifts API version
    * @type {string}
    * @memberof TipPoolApiGetManualEntryTips
    */
    readonly xApiVersion?: string
    
    /**
    * Company GUID
    * @type {string}
    * @memberof TipPoolApiGetManualEntryTips
    */
    readonly xCompanyGuid?: string
    
}

/**
 * Request parameters for getSettings operation in TipPoolApi.
 * @export
 * @interface TipPoolApiGetSettingsRequest
 */
export type TipPoolApiGetSettingsRequest = {
    
    /**
    * Company ID
    * @type {number}
    * @memberof TipPoolApiGetSettings
    */
    readonly companyId: number
    
    /**
    * 7shifts API version
    * @type {string}
    * @memberof TipPoolApiGetSettings
    */
    readonly xApiVersion?: string
    
    /**
    * Company GUID
    * @type {string}
    * @memberof TipPoolApiGetSettings
    */
    readonly xCompanyGuid?: string
    
}

/**
 * Request parameters for getSummaryReport operation in TipPoolApi.
 * @export
 * @interface TipPoolApiGetSummaryReportRequest
 */
export type TipPoolApiGetSummaryReportRequest = {
    
    /**
    * Company ID
    * @type {number}
    * @memberof TipPoolApiGetSummaryReport
    */
    readonly companyId: number
    
    /**
    * Location ID
    * @type {number}
    * @memberof TipPoolApiGetSummaryReport
    */
    readonly locationId: number
    
    /**
    * The start date in YYYY-MM-DD format
    * @type {string}
    * @memberof TipPoolApiGetSummaryReport
    */
    readonly startDate: string
    
    /**
    * The end date in YYYY-MM-DD format
    * @type {string}
    * @memberof TipPoolApiGetSummaryReport
    */
    readonly endDate: string
    
    /**
    * 7shifts API version
    * @type {string}
    * @memberof TipPoolApiGetSummaryReport
    */
    readonly xApiVersion?: string
    
    /**
    * Company GUID
    * @type {string}
    * @memberof TipPoolApiGetSummaryReport
    */
    readonly xCompanyGuid?: string
    
    /**
    * The tip pool UUID, when omitted the report will return all tip pools
    * @type {string}
    * @memberof TipPoolApiGetSummaryReport
    */
    readonly tipPoolUuid?: string
    
    /**
    * Daypart UUID, when omitted the report will return all dayparts
    * @type {string}
    * @memberof TipPoolApiGetSummaryReport
    */
    readonly dayPartUuid?: string
    
}

/**
 * Request parameters for saveManualEntry operation in TipPoolApi.
 * @export
 * @interface TipPoolApiSaveManualEntryRequest
 */
export type TipPoolApiSaveManualEntryRequest = {
    
    /**
    * The company ID for the target tip pool settings
    * @type {number}
    * @memberof TipPoolApiSaveManualEntry
    */
    readonly companyId: number
    
    /**
    * The tip pool settings uuid
    * @type {string}
    * @memberof TipPoolApiSaveManualEntry
    */
    readonly tipPoolSettingsUuid: string
    
    /**
    * 7shifts API version
    * @type {string}
    * @memberof TipPoolApiSaveManualEntry
    */
    readonly xApiVersion?: string
    
    /**
    * Company GUID
    * @type {string}
    * @memberof TipPoolApiSaveManualEntry
    */
    readonly xCompanyGuid?: string
    
} & TipPoolSaveManualEntryRequest

/**
 * TipPoolApiGenerated - object-oriented interface
 * @export
 * @class TipPoolApiGenerated
 * @extends {BaseAPI}
 */
export class TipPoolApiGenerated extends BaseAPI {
    /**
     * 
     * @summary Retreive Tip Pool Detailed Report
     * @param {TipPoolApiGetDetailedReportRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TipPoolApiGenerated
     */
    public getDetailedReport(requestParameters: TipPoolApiGetDetailedReportRequest, options?: AxiosRequestConfig) {
        return TipPoolApiFp(this.configuration).getDetailedReport(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Grabs manual entry tips for a tip pool
     * @param {TipPoolApiGetManualEntryTipsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TipPoolApiGenerated
     */
    public getManualEntryTips(requestParameters: TipPoolApiGetManualEntryTipsRequest, options?: AxiosRequestConfig) {
        return TipPoolApiFp(this.configuration).getManualEntryTips(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Gets tip pool settings for a company
     * @param {TipPoolApiGetSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TipPoolApiGenerated
     */
    public getSettings(requestParameters: TipPoolApiGetSettingsRequest, options?: AxiosRequestConfig) {
        return TipPoolApiFp(this.configuration).getSettings(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retreive Tip Pool Summary Report
     * @param {TipPoolApiGetSummaryReportRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TipPoolApiGenerated
     */
    public getSummaryReport(requestParameters: TipPoolApiGetSummaryReportRequest, options?: AxiosRequestConfig) {
        return TipPoolApiFp(this.configuration).getSummaryReport(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Saves manual entries for a tip pool
     * @param {TipPoolApiSaveManualEntryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TipPoolApiGenerated
     */
    public saveManualEntry(requestParameters: TipPoolApiSaveManualEntryRequest, options?: AxiosRequestConfig) {
        return TipPoolApiFp(this.configuration).saveManualEntry(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
