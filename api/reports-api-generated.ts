/* tslint:disable */
/* eslint-disable */
/*
7shifts API

7shifts is a team management software designed for restaurants. We help managers and operators spend less time and effort scheduling their staff, reduce their monthly labor costs and improve team communication. The result is simplified team management, one shift at a time.

7shifts also offers free mobile apps (iOS and Android) allowing managers and employees to have everything at their fingertips.

Start your free trial or request a demo at www.7shifts.com.

The version of the OpenAPI document: 2023-05-01
Contact: api-support@7shifts.com

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ReportsGetDailySalesAndLabor500Response } from '../models';
// @ts-ignore
import { ReportsGetDailySalesAndLaborResponse } from '../models';
// @ts-ignore
import { ReportsGetDailyStats400Response } from '../models';
// @ts-ignore
import { ReportsGetDailyStats401Response } from '../models';
// @ts-ignore
import { ReportsGetDailyStats403Response } from '../models';
// @ts-ignore
import { ReportsGetDailyStats404Response } from '../models';
// @ts-ignore
import { ReportsGetDailyStats500Response } from '../models';
// @ts-ignore
import { ReportsGetDailyStatsResponse } from '../models';
// @ts-ignore
import { ReportsGetWorkedHoursWages400Response } from '../models';
// @ts-ignore
import { ReportsGetWorkedHoursWages401Response } from '../models';
// @ts-ignore
import { ReportsGetWorkedHoursWages403Response } from '../models';
// @ts-ignore
import { ReportsGetWorkedHoursWages500Response } from '../models';
// @ts-ignore
import { ReportsGetWorkedHoursWagesResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * ReportsApi - axios parameter creator
 * @export
 */
export const ReportsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Retrieve Daily Sales & Labor
         * @param {string} startDate Starting date for which you want the daily sales and labor data for.
         * @param {string} endDate Ending date for which you want the daily sales and labor data for.
         * @param {number} locationId Location ID
         * @param {string} [xApiVersion] 7shifts API version
         * @param {string} [xCompanyGuid] Company GUID
         * @param {number} [departmentId] Department ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDailySalesAndLabor: async (startDate: string, endDate: string, locationId: number, xApiVersion?: string, xCompanyGuid?: string, departmentId?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'startDate' is not null or undefined
            assertParamExists('getDailySalesAndLabor', 'startDate', startDate)
            // verify required parameter 'endDate' is not null or undefined
            assertParamExists('getDailySalesAndLabor', 'endDate', endDate)
            // verify required parameter 'locationId' is not null or undefined
            assertParamExists('getDailySalesAndLabor', 'locationId', locationId)
            const localVarPath = `/v2/reports/daily_sales_and_labor`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication cookieAuth required
            await setApiKeyToObject({object: localVarHeaderParameter, type: "Cookie", key: "Cookie", keyParamName: "7session", configuration})
            if (startDate !== undefined) {
                localVarQueryParameter['start_date'] = startDate;
            }

            if (endDate !== undefined) {
                localVarQueryParameter['end_date'] = endDate;
            }

            if (locationId !== undefined) {
                localVarQueryParameter['location_id'] = locationId;
            }

            if (departmentId !== undefined) {
                localVarQueryParameter['department_id'] = departmentId;
            }

            if (xApiVersion != null) {
                localVarHeaderParameter['x-api-version'] = String(xApiVersion);
            }

            if (xCompanyGuid != null) {
                localVarHeaderParameter['x-company-guid'] = String(xCompanyGuid);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/reports/daily_sales_and_labor',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve Daily Stats
         * @param {number} companyId Company ID
         * @param {number} locationId Location ID
         * @param {string | Date} date Date
         * @param {string} [xApiVersion] 7shifts API version
         * @param {string} [xCompanyGuid] Company GUID
         * @param {number} [departmentId] Department ID
         * @param {boolean} [includeFuture] include future
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDailyStats: async (companyId: number, locationId: number, date: string | Date, xApiVersion?: string, xCompanyGuid?: string, departmentId?: number, includeFuture?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('getDailyStats', 'companyId', companyId)
            // verify required parameter 'locationId' is not null or undefined
            assertParamExists('getDailyStats', 'locationId', locationId)
            // verify required parameter 'date' is not null or undefined
            assertParamExists('getDailyStats', 'date', date)
            const localVarPath = `/api/v2/company/{company_id}/location/{location_id}/daily_stats`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId !== undefined ? companyId : `-company_id-`)))
                .replace(`{${"location_id"}}`, encodeURIComponent(String(locationId !== undefined ? locationId : `-location_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication cookieAuth required
            await setApiKeyToObject({object: localVarHeaderParameter, type: "Cookie", key: "Cookie", keyParamName: "7session", configuration})
            if (departmentId !== undefined) {
                localVarQueryParameter['department_id'] = departmentId;
            }

            if (date !== undefined) {
                localVarQueryParameter['date'] = (date as any instanceof Date) ?
                    (date as any).toISOString().substr(0,10) :
                    date;
            }

            if (includeFuture !== undefined) {
                localVarQueryParameter['include_future'] = includeFuture;
            }

            if (xApiVersion != null) {
                localVarHeaderParameter['x-api-version'] = String(xApiVersion);
            }

            if (xCompanyGuid != null) {
                localVarHeaderParameter['x-company-guid'] = String(xCompanyGuid);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/v2/company/{company_id}/location/{location_id}/daily_stats',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve Worked Hours & Wages
         * @param {boolean} punches Whether or not to use the punch labour source
         * @param {number} companyId The company id to pull the report for.
         * @param {string} from Starting date for which you want the report to start.
         * @param {string} to Ending date for which you want the report to end.
         * @param {string} [xApiVersion] 7shifts API version
         * @param {string} [xCompanyGuid] Company GUID
         * @param {number} [locationId] The location id for which you want the report for.
         * @param {number} [departmentId] The department id for the report.
         * @param {number} [roleId] The role id for the report
         * @param {number} [userId] The user id the report should be fetched for - internal use only
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWorkedHoursWages: async (punches: boolean, companyId: number, from: string, to: string, xApiVersion?: string, xCompanyGuid?: string, locationId?: number, departmentId?: number, roleId?: number, userId?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'punches' is not null or undefined
            assertParamExists('getWorkedHoursWages', 'punches', punches)
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('getWorkedHoursWages', 'companyId', companyId)
            // verify required parameter 'from' is not null or undefined
            assertParamExists('getWorkedHoursWages', 'from', from)
            // verify required parameter 'to' is not null or undefined
            assertParamExists('getWorkedHoursWages', 'to', to)
            const localVarPath = `/v2/reports/hours_and_wages`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication cookieAuth required
            await setApiKeyToObject({object: localVarHeaderParameter, type: "Cookie", key: "Cookie", keyParamName: "7session", configuration})
            if (punches !== undefined) {
                localVarQueryParameter['punches'] = punches;
            }

            if (companyId !== undefined) {
                localVarQueryParameter['company_id'] = companyId;
            }

            if (from !== undefined) {
                localVarQueryParameter['from'] = from;
            }

            if (to !== undefined) {
                localVarQueryParameter['to'] = to;
            }

            if (locationId !== undefined) {
                localVarQueryParameter['location_id'] = locationId;
            }

            if (departmentId !== undefined) {
                localVarQueryParameter['department_id'] = departmentId;
            }

            if (roleId !== undefined) {
                localVarQueryParameter['role_id'] = roleId;
            }

            if (userId !== undefined) {
                localVarQueryParameter['user_id'] = userId;
            }

            if (xApiVersion != null) {
                localVarHeaderParameter['x-api-version'] = String(xApiVersion);
            }

            if (xCompanyGuid != null) {
                localVarHeaderParameter['x-company-guid'] = String(xCompanyGuid);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/reports/hours_and_wages',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ReportsApi - functional programming interface
 * @export
 */
export const ReportsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ReportsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Retrieve Daily Sales & Labor
         * @param {ReportsApiGetDailySalesAndLaborRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDailySalesAndLabor(requestParameters: ReportsApiGetDailySalesAndLaborRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReportsGetDailySalesAndLaborResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDailySalesAndLabor(requestParameters.startDate, requestParameters.endDate, requestParameters.locationId, requestParameters.xApiVersion, requestParameters.xCompanyGuid, requestParameters.departmentId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Retrieve Daily Stats
         * @param {ReportsApiGetDailyStatsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDailyStats(requestParameters: ReportsApiGetDailyStatsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReportsGetDailyStatsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDailyStats(requestParameters.companyId, requestParameters.locationId, requestParameters.date, requestParameters.xApiVersion, requestParameters.xCompanyGuid, requestParameters.departmentId, requestParameters.includeFuture, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Retrieve Worked Hours & Wages
         * @param {ReportsApiGetWorkedHoursWagesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getWorkedHoursWages(requestParameters: ReportsApiGetWorkedHoursWagesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReportsGetWorkedHoursWagesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getWorkedHoursWages(requestParameters.punches, requestParameters.companyId, requestParameters.from, requestParameters.to, requestParameters.xApiVersion, requestParameters.xCompanyGuid, requestParameters.locationId, requestParameters.departmentId, requestParameters.roleId, requestParameters.userId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ReportsApi - factory interface
 * @export
 */
export const ReportsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ReportsApiFp(configuration)
    return {
        /**
         * 
         * @summary Retrieve Daily Sales & Labor
         * @param {ReportsApiGetDailySalesAndLaborRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDailySalesAndLabor(requestParameters: ReportsApiGetDailySalesAndLaborRequest, options?: AxiosRequestConfig): AxiosPromise<ReportsGetDailySalesAndLaborResponse> {
            return localVarFp.getDailySalesAndLabor(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve Daily Stats
         * @param {ReportsApiGetDailyStatsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDailyStats(requestParameters: ReportsApiGetDailyStatsRequest, options?: AxiosRequestConfig): AxiosPromise<ReportsGetDailyStatsResponse> {
            return localVarFp.getDailyStats(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve Worked Hours & Wages
         * @param {ReportsApiGetWorkedHoursWagesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWorkedHoursWages(requestParameters: ReportsApiGetWorkedHoursWagesRequest, options?: AxiosRequestConfig): AxiosPromise<ReportsGetWorkedHoursWagesResponse> {
            return localVarFp.getWorkedHoursWages(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getDailySalesAndLabor operation in ReportsApi.
 * @export
 * @interface ReportsApiGetDailySalesAndLaborRequest
 */
export type ReportsApiGetDailySalesAndLaborRequest = {
    
    /**
    * Starting date for which you want the daily sales and labor data for.
    * @type {string}
    * @memberof ReportsApiGetDailySalesAndLabor
    */
    readonly startDate: string
    
    /**
    * Ending date for which you want the daily sales and labor data for.
    * @type {string}
    * @memberof ReportsApiGetDailySalesAndLabor
    */
    readonly endDate: string
    
    /**
    * Location ID
    * @type {number}
    * @memberof ReportsApiGetDailySalesAndLabor
    */
    readonly locationId: number
    
    /**
    * 7shifts API version
    * @type {string}
    * @memberof ReportsApiGetDailySalesAndLabor
    */
    readonly xApiVersion?: string
    
    /**
    * Company GUID
    * @type {string}
    * @memberof ReportsApiGetDailySalesAndLabor
    */
    readonly xCompanyGuid?: string
    
    /**
    * Department ID
    * @type {number}
    * @memberof ReportsApiGetDailySalesAndLabor
    */
    readonly departmentId?: number
    
}

/**
 * Request parameters for getDailyStats operation in ReportsApi.
 * @export
 * @interface ReportsApiGetDailyStatsRequest
 */
export type ReportsApiGetDailyStatsRequest = {
    
    /**
    * Company ID
    * @type {number}
    * @memberof ReportsApiGetDailyStats
    */
    readonly companyId: number
    
    /**
    * Location ID
    * @type {number}
    * @memberof ReportsApiGetDailyStats
    */
    readonly locationId: number
    
    /**
    * Date
    * @type {string | Date}
    * @memberof ReportsApiGetDailyStats
    */
    readonly date: string | Date
    
    /**
    * 7shifts API version
    * @type {string}
    * @memberof ReportsApiGetDailyStats
    */
    readonly xApiVersion?: string
    
    /**
    * Company GUID
    * @type {string}
    * @memberof ReportsApiGetDailyStats
    */
    readonly xCompanyGuid?: string
    
    /**
    * Department ID
    * @type {number}
    * @memberof ReportsApiGetDailyStats
    */
    readonly departmentId?: number
    
    /**
    * include future
    * @type {boolean}
    * @memberof ReportsApiGetDailyStats
    */
    readonly includeFuture?: boolean
    
}

/**
 * Request parameters for getWorkedHoursWages operation in ReportsApi.
 * @export
 * @interface ReportsApiGetWorkedHoursWagesRequest
 */
export type ReportsApiGetWorkedHoursWagesRequest = {
    
    /**
    * Whether or not to use the punch labour source
    * @type {boolean}
    * @memberof ReportsApiGetWorkedHoursWages
    */
    readonly punches: boolean
    
    /**
    * The company id to pull the report for.
    * @type {number}
    * @memberof ReportsApiGetWorkedHoursWages
    */
    readonly companyId: number
    
    /**
    * Starting date for which you want the report to start.
    * @type {string}
    * @memberof ReportsApiGetWorkedHoursWages
    */
    readonly from: string
    
    /**
    * Ending date for which you want the report to end.
    * @type {string}
    * @memberof ReportsApiGetWorkedHoursWages
    */
    readonly to: string
    
    /**
    * 7shifts API version
    * @type {string}
    * @memberof ReportsApiGetWorkedHoursWages
    */
    readonly xApiVersion?: string
    
    /**
    * Company GUID
    * @type {string}
    * @memberof ReportsApiGetWorkedHoursWages
    */
    readonly xCompanyGuid?: string
    
    /**
    * The location id for which you want the report for.
    * @type {number}
    * @memberof ReportsApiGetWorkedHoursWages
    */
    readonly locationId?: number
    
    /**
    * The department id for the report.
    * @type {number}
    * @memberof ReportsApiGetWorkedHoursWages
    */
    readonly departmentId?: number
    
    /**
    * The role id for the report
    * @type {number}
    * @memberof ReportsApiGetWorkedHoursWages
    */
    readonly roleId?: number
    
    /**
    * The user id the report should be fetched for - internal use only
    * @type {number}
    * @memberof ReportsApiGetWorkedHoursWages
    */
    readonly userId?: number
    
}

/**
 * ReportsApiGenerated - object-oriented interface
 * @export
 * @class ReportsApiGenerated
 * @extends {BaseAPI}
 */
export class ReportsApiGenerated extends BaseAPI {
    /**
     * 
     * @summary Retrieve Daily Sales & Labor
     * @param {ReportsApiGetDailySalesAndLaborRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportsApiGenerated
     */
    public getDailySalesAndLabor(requestParameters: ReportsApiGetDailySalesAndLaborRequest, options?: AxiosRequestConfig) {
        return ReportsApiFp(this.configuration).getDailySalesAndLabor(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve Daily Stats
     * @param {ReportsApiGetDailyStatsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportsApiGenerated
     */
    public getDailyStats(requestParameters: ReportsApiGetDailyStatsRequest, options?: AxiosRequestConfig) {
        return ReportsApiFp(this.configuration).getDailyStats(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve Worked Hours & Wages
     * @param {ReportsApiGetWorkedHoursWagesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportsApiGenerated
     */
    public getWorkedHoursWages(requestParameters: ReportsApiGetWorkedHoursWagesRequest, options?: AxiosRequestConfig) {
        return ReportsApiFp(this.configuration).getWorkedHoursWages(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
