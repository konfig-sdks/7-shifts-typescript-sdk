/* tslint:disable */
/* eslint-disable */
/*
7shifts API

7shifts is a team management software designed for restaurants. We help managers and operators spend less time and effort scheduling their staff, reduce their monthly labor costs and improve team communication. The result is simplified team management, one shift at a time.

7shifts also offers free mobile apps (iOS and Android) allowing managers and employees to have everything at their fingertips.

Start your free trial or request a demo at www.7shifts.com.

The version of the OpenAPI document: 2023-05-01
Contact: api-support@7shifts.com

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { WebhooksCreate400Response } from '../models';
// @ts-ignore
import { WebhooksCreate401Response } from '../models';
// @ts-ignore
import { WebhooksCreate403Response } from '../models';
// @ts-ignore
import { WebhooksCreate409Response } from '../models';
// @ts-ignore
import { WebhooksCreate422Response } from '../models';
// @ts-ignore
import { WebhooksCreate500Response } from '../models';
// @ts-ignore
import { WebhooksCreateRequest } from '../models';
// @ts-ignore
import { WebhooksCreateResponse } from '../models';
// @ts-ignore
import { WebhooksDeleteWebhookById403Response } from '../models';
// @ts-ignore
import { WebhooksDeleteWebhookById404Response } from '../models';
// @ts-ignore
import { WebhooksDeleteWebhookById500Response } from '../models';
// @ts-ignore
import { WebhooksDeleteWebhookByIdResponse } from '../models';
// @ts-ignore
import { WebhooksGetWebhook401Response } from '../models';
// @ts-ignore
import { WebhooksGetWebhook403Response } from '../models';
// @ts-ignore
import { WebhooksGetWebhook404Response } from '../models';
// @ts-ignore
import { WebhooksGetWebhook500Response } from '../models';
// @ts-ignore
import { WebhooksList400Response } from '../models';
// @ts-ignore
import { WebhooksList401Response } from '../models';
// @ts-ignore
import { WebhooksList403Response } from '../models';
// @ts-ignore
import { WebhooksList500Response } from '../models';
// @ts-ignore
import { WebhooksListResponse } from '../models';
// @ts-ignore
import { WebhooksUpdate400Response } from '../models';
// @ts-ignore
import { WebhooksUpdate401Response } from '../models';
// @ts-ignore
import { WebhooksUpdate403Response } from '../models';
// @ts-ignore
import { WebhooksUpdate404Response } from '../models';
// @ts-ignore
import { WebhooksUpdate409Response } from '../models';
// @ts-ignore
import { WebhooksUpdate500Response } from '../models';
// @ts-ignore
import { WebhooksUpdateRequest } from '../models';
// @ts-ignore
import { WebhooksUpdateResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * WebhooksApi - axios parameter creator
 * @export
 */
export const WebhooksApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create Webhook
         * @param {number} companyId Company ID
         * @param {WebhooksCreateRequest} webhooksCreateRequest 
         * @param {string} [xApiVersion] 7shifts API version
         * @param {string} [xCompanyGuid] Company GUID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create: async (companyId: number, webhooksCreateRequest: WebhooksCreateRequest, xApiVersion?: string, xCompanyGuid?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('create', 'companyId', companyId)
            // verify required parameter 'webhooksCreateRequest' is not null or undefined
            assertParamExists('create', 'webhooksCreateRequest', webhooksCreateRequest)
            const localVarPath = `/v2/company/{company_id}/webhooks`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId !== undefined ? companyId : `-company_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication cookieAuth required
            await setApiKeyToObject({object: localVarHeaderParameter, type: "Cookie", key: "Cookie", keyParamName: "7session", configuration})
            if (xApiVersion != null) {
                localVarHeaderParameter['x-api-version'] = String(xApiVersion);
            }

            if (xCompanyGuid != null) {
                localVarHeaderParameter['x-company-guid'] = String(xCompanyGuid);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: webhooksCreateRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/company/{company_id}/webhooks',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(webhooksCreateRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete Webhook
         * @param {number} companyId Company ID
         * @param {number} webhookId Webhook ID
         * @param {string} [xApiVersion] 7shifts API version
         * @param {string} [xCompanyGuid] Company GUID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteWebhookById: async (companyId: number, webhookId: number, xApiVersion?: string, xCompanyGuid?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('deleteWebhookById', 'companyId', companyId)
            // verify required parameter 'webhookId' is not null or undefined
            assertParamExists('deleteWebhookById', 'webhookId', webhookId)
            const localVarPath = `/v2/company/{company_id}/webhooks/{webhook_id}`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId !== undefined ? companyId : `-company_id-`)))
                .replace(`{${"webhook_id"}}`, encodeURIComponent(String(webhookId !== undefined ? webhookId : `-webhook_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication cookieAuth required
            await setApiKeyToObject({object: localVarHeaderParameter, type: "Cookie", key: "Cookie", keyParamName: "7session", configuration})
            if (xApiVersion != null) {
                localVarHeaderParameter['x-api-version'] = String(xApiVersion);
            }

            if (xCompanyGuid != null) {
                localVarHeaderParameter['x-company-guid'] = String(xCompanyGuid);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/company/{company_id}/webhooks/{webhook_id}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Test Webhook
         * @param {number} companyId Company ID
         * @param {string} topic topic for the sample payload
         * @param {string} [xApiVersion] 7shifts API version
         * @param {string} [xCompanyGuid] Company GUID
         * @param {number} [webhookId] Webhook ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWebhook: async (companyId: number, topic: string, xApiVersion?: string, xCompanyGuid?: string, webhookId?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('getWebhook', 'companyId', companyId)
            // verify required parameter 'topic' is not null or undefined
            assertParamExists('getWebhook', 'topic', topic)
            const localVarPath = `/v2/company/{company_id}/test_webhook`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId !== undefined ? companyId : `-company_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication cookieAuth required
            await setApiKeyToObject({object: localVarHeaderParameter, type: "Cookie", key: "Cookie", keyParamName: "7session", configuration})
            if (topic !== undefined) {
                localVarQueryParameter['topic'] = topic;
            }

            if (webhookId !== undefined) {
                localVarQueryParameter['webhook_id'] = webhookId;
            }

            if (xApiVersion != null) {
                localVarHeaderParameter['x-api-version'] = String(xApiVersion);
            }

            if (xCompanyGuid != null) {
                localVarHeaderParameter['x-company-guid'] = String(xCompanyGuid);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/company/{company_id}/test_webhook',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List Webhooks
         * @param {number} companyId Company ID
         * @param {string} [xApiVersion] 7shifts API version
         * @param {string} [xCompanyGuid] Company GUID
         * @param {string} [modifiedSince] Return webhooks that have been modified since the specified date. Format YYYY-MM-DD
         * @param {string} [cursor] Cursor for the next or previous page of results.
         * @param {number} [limit] The number of results desired per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list: async (companyId: number, xApiVersion?: string, xCompanyGuid?: string, modifiedSince?: string, cursor?: string, limit?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('list', 'companyId', companyId)
            const localVarPath = `/v2/company/{company_id}/webhooks`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId !== undefined ? companyId : `-company_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication cookieAuth required
            await setApiKeyToObject({object: localVarHeaderParameter, type: "Cookie", key: "Cookie", keyParamName: "7session", configuration})
            if (modifiedSince !== undefined) {
                localVarQueryParameter['modified_since'] = modifiedSince;
            }

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (xApiVersion != null) {
                localVarHeaderParameter['x-api-version'] = String(xApiVersion);
            }

            if (xCompanyGuid != null) {
                localVarHeaderParameter['x-company-guid'] = String(xCompanyGuid);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/company/{company_id}/webhooks',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update Webhook
         * @param {number} companyId Company ID
         * @param {number} webhookId Webhook ID
         * @param {WebhooksUpdateRequest} webhooksUpdateRequest 
         * @param {string} [xApiVersion] 7shifts API version
         * @param {string} [xCompanyGuid] Company GUID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update: async (companyId: number, webhookId: number, webhooksUpdateRequest: WebhooksUpdateRequest, xApiVersion?: string, xCompanyGuid?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('update', 'companyId', companyId)
            // verify required parameter 'webhookId' is not null or undefined
            assertParamExists('update', 'webhookId', webhookId)
            // verify required parameter 'webhooksUpdateRequest' is not null or undefined
            assertParamExists('update', 'webhooksUpdateRequest', webhooksUpdateRequest)
            const localVarPath = `/v2/company/{company_id}/webhooks/{webhook_id}`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId !== undefined ? companyId : `-company_id-`)))
                .replace(`{${"webhook_id"}}`, encodeURIComponent(String(webhookId !== undefined ? webhookId : `-webhook_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication cookieAuth required
            await setApiKeyToObject({object: localVarHeaderParameter, type: "Cookie", key: "Cookie", keyParamName: "7session", configuration})
            if (xApiVersion != null) {
                localVarHeaderParameter['x-api-version'] = String(xApiVersion);
            }

            if (xCompanyGuid != null) {
                localVarHeaderParameter['x-company-guid'] = String(xCompanyGuid);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: webhooksUpdateRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/company/{company_id}/webhooks/{webhook_id}',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(webhooksUpdateRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * WebhooksApi - functional programming interface
 * @export
 */
export const WebhooksApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = WebhooksApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create Webhook
         * @param {WebhooksApiCreateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async create(requestParameters: WebhooksApiCreateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WebhooksCreateResponse>> {
            const webhooksCreateRequest: WebhooksCreateRequest = {
                url: requestParameters.url,
                method: requestParameters.method,
                event: requestParameters.event
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.create(requestParameters.companyId, webhooksCreateRequest, requestParameters.xApiVersion, requestParameters.xCompanyGuid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete Webhook
         * @param {WebhooksApiDeleteWebhookByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteWebhookById(requestParameters: WebhooksApiDeleteWebhookByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteWebhookById(requestParameters.companyId, requestParameters.webhookId, requestParameters.xApiVersion, requestParameters.xCompanyGuid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Test Webhook
         * @param {WebhooksApiGetWebhookRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getWebhook(requestParameters: WebhooksApiGetWebhookRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getWebhook(requestParameters.companyId, requestParameters.topic, requestParameters.xApiVersion, requestParameters.xCompanyGuid, requestParameters.webhookId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary List Webhooks
         * @param {WebhooksApiListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async list(requestParameters: WebhooksApiListRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WebhooksListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.list(requestParameters.companyId, requestParameters.xApiVersion, requestParameters.xCompanyGuid, requestParameters.modifiedSince, requestParameters.cursor, requestParameters.limit, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update Webhook
         * @param {WebhooksApiUpdateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async update(requestParameters: WebhooksApiUpdateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WebhooksUpdateResponse>> {
            const webhooksUpdateRequest: WebhooksUpdateRequest = {
                url: requestParameters.url
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.update(requestParameters.companyId, requestParameters.webhookId, webhooksUpdateRequest, requestParameters.xApiVersion, requestParameters.xCompanyGuid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * WebhooksApi - factory interface
 * @export
 */
export const WebhooksApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = WebhooksApiFp(configuration)
    return {
        /**
         * 
         * @summary Create Webhook
         * @param {WebhooksApiCreateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create(requestParameters: WebhooksApiCreateRequest, options?: AxiosRequestConfig): AxiosPromise<WebhooksCreateResponse> {
            return localVarFp.create(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete Webhook
         * @param {WebhooksApiDeleteWebhookByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteWebhookById(requestParameters: WebhooksApiDeleteWebhookByIdRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteWebhookById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Test Webhook
         * @param {WebhooksApiGetWebhookRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWebhook(requestParameters: WebhooksApiGetWebhookRequest, options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.getWebhook(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List Webhooks
         * @param {WebhooksApiListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list(requestParameters: WebhooksApiListRequest, options?: AxiosRequestConfig): AxiosPromise<WebhooksListResponse> {
            return localVarFp.list(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update Webhook
         * @param {WebhooksApiUpdateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update(requestParameters: WebhooksApiUpdateRequest, options?: AxiosRequestConfig): AxiosPromise<WebhooksUpdateResponse> {
            return localVarFp.update(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for create operation in WebhooksApi.
 * @export
 * @interface WebhooksApiCreateRequest
 */
export type WebhooksApiCreateRequest = {
    
    /**
    * Company ID
    * @type {number}
    * @memberof WebhooksApiCreate
    */
    readonly companyId: number
    
    /**
    * 7shifts API version
    * @type {string}
    * @memberof WebhooksApiCreate
    */
    readonly xApiVersion?: string
    
    /**
    * Company GUID
    * @type {string}
    * @memberof WebhooksApiCreate
    */
    readonly xCompanyGuid?: string
    
} & WebhooksCreateRequest

/**
 * Request parameters for deleteWebhookById operation in WebhooksApi.
 * @export
 * @interface WebhooksApiDeleteWebhookByIdRequest
 */
export type WebhooksApiDeleteWebhookByIdRequest = {
    
    /**
    * Company ID
    * @type {number}
    * @memberof WebhooksApiDeleteWebhookById
    */
    readonly companyId: number
    
    /**
    * Webhook ID
    * @type {number}
    * @memberof WebhooksApiDeleteWebhookById
    */
    readonly webhookId: number
    
    /**
    * 7shifts API version
    * @type {string}
    * @memberof WebhooksApiDeleteWebhookById
    */
    readonly xApiVersion?: string
    
    /**
    * Company GUID
    * @type {string}
    * @memberof WebhooksApiDeleteWebhookById
    */
    readonly xCompanyGuid?: string
    
}

/**
 * Request parameters for getWebhook operation in WebhooksApi.
 * @export
 * @interface WebhooksApiGetWebhookRequest
 */
export type WebhooksApiGetWebhookRequest = {
    
    /**
    * Company ID
    * @type {number}
    * @memberof WebhooksApiGetWebhook
    */
    readonly companyId: number
    
    /**
    * topic for the sample payload
    * @type {string}
    * @memberof WebhooksApiGetWebhook
    */
    readonly topic: string
    
    /**
    * 7shifts API version
    * @type {string}
    * @memberof WebhooksApiGetWebhook
    */
    readonly xApiVersion?: string
    
    /**
    * Company GUID
    * @type {string}
    * @memberof WebhooksApiGetWebhook
    */
    readonly xCompanyGuid?: string
    
    /**
    * Webhook ID
    * @type {number}
    * @memberof WebhooksApiGetWebhook
    */
    readonly webhookId?: number
    
}

/**
 * Request parameters for list operation in WebhooksApi.
 * @export
 * @interface WebhooksApiListRequest
 */
export type WebhooksApiListRequest = {
    
    /**
    * Company ID
    * @type {number}
    * @memberof WebhooksApiList
    */
    readonly companyId: number
    
    /**
    * 7shifts API version
    * @type {string}
    * @memberof WebhooksApiList
    */
    readonly xApiVersion?: string
    
    /**
    * Company GUID
    * @type {string}
    * @memberof WebhooksApiList
    */
    readonly xCompanyGuid?: string
    
    /**
    * Return webhooks that have been modified since the specified date. Format YYYY-MM-DD
    * @type {string}
    * @memberof WebhooksApiList
    */
    readonly modifiedSince?: string
    
    /**
    * Cursor for the next or previous page of results.
    * @type {string}
    * @memberof WebhooksApiList
    */
    readonly cursor?: string
    
    /**
    * The number of results desired per page.
    * @type {number}
    * @memberof WebhooksApiList
    */
    readonly limit?: number
    
}

/**
 * Request parameters for update operation in WebhooksApi.
 * @export
 * @interface WebhooksApiUpdateRequest
 */
export type WebhooksApiUpdateRequest = {
    
    /**
    * Company ID
    * @type {number}
    * @memberof WebhooksApiUpdate
    */
    readonly companyId: number
    
    /**
    * Webhook ID
    * @type {number}
    * @memberof WebhooksApiUpdate
    */
    readonly webhookId: number
    
    /**
    * 7shifts API version
    * @type {string}
    * @memberof WebhooksApiUpdate
    */
    readonly xApiVersion?: string
    
    /**
    * Company GUID
    * @type {string}
    * @memberof WebhooksApiUpdate
    */
    readonly xCompanyGuid?: string
    
} & WebhooksUpdateRequest

/**
 * WebhooksApiGenerated - object-oriented interface
 * @export
 * @class WebhooksApiGenerated
 * @extends {BaseAPI}
 */
export class WebhooksApiGenerated extends BaseAPI {
    /**
     * 
     * @summary Create Webhook
     * @param {WebhooksApiCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhooksApiGenerated
     */
    public create(requestParameters: WebhooksApiCreateRequest, options?: AxiosRequestConfig) {
        return WebhooksApiFp(this.configuration).create(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete Webhook
     * @param {WebhooksApiDeleteWebhookByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhooksApiGenerated
     */
    public deleteWebhookById(requestParameters: WebhooksApiDeleteWebhookByIdRequest, options?: AxiosRequestConfig) {
        return WebhooksApiFp(this.configuration).deleteWebhookById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Test Webhook
     * @param {WebhooksApiGetWebhookRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhooksApiGenerated
     */
    public getWebhook(requestParameters: WebhooksApiGetWebhookRequest, options?: AxiosRequestConfig) {
        return WebhooksApiFp(this.configuration).getWebhook(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List Webhooks
     * @param {WebhooksApiListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhooksApiGenerated
     */
    public list(requestParameters: WebhooksApiListRequest, options?: AxiosRequestConfig) {
        return WebhooksApiFp(this.configuration).list(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update Webhook
     * @param {WebhooksApiUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhooksApiGenerated
     */
    public update(requestParameters: WebhooksApiUpdateRequest, options?: AxiosRequestConfig) {
        return WebhooksApiFp(this.configuration).update(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
