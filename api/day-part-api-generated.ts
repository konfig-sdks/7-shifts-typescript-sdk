/* tslint:disable */
/* eslint-disable */
/*
7shifts API

7shifts is a team management software designed for restaurants. We help managers and operators spend less time and effort scheduling their staff, reduce their monthly labor costs and improve team communication. The result is simplified team management, one shift at a time.

7shifts also offers free mobile apps (iOS and Android) allowing managers and employees to have everything at their fingertips.

Start your free trial or request a demo at www.7shifts.com.

The version of the OpenAPI document: 2023-05-01
Contact: api-support@7shifts.com

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { DayPartGetSettings400Response } from '../models';
// @ts-ignore
import { DayPartGetSettings401Response } from '../models';
// @ts-ignore
import { DayPartGetSettings403Response } from '../models';
// @ts-ignore
import { DayPartGetSettings500Response } from '../models';
// @ts-ignore
import { DayPartGetSettingsResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * DayPartApi - axios parameter creator
 * @export
 */
export const DayPartApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Retrieve day part settings
         * @param {number} companyId Company ID
         * @param {string} [xApiVersion] 7shifts API version
         * @param {string} [xCompanyGuid] Company GUID
         * @param {number} [locationId] Location ID - null will fetch all day parts for company
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSettings: async (companyId: number, xApiVersion?: string, xCompanyGuid?: string, locationId?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('getSettings', 'companyId', companyId)
            const localVarPath = `/v2/company/{company_id}/day_part/settings`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId !== undefined ? companyId : `-company_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication cookieAuth required
            await setApiKeyToObject({object: localVarHeaderParameter, type: "Cookie", key: "Cookie", keyParamName: "7session", configuration})
            if (locationId !== undefined) {
                localVarQueryParameter['location_id'] = locationId;
            }

            if (xApiVersion != null) {
                localVarHeaderParameter['x-api-version'] = String(xApiVersion);
            }

            if (xCompanyGuid != null) {
                localVarHeaderParameter['x-company-guid'] = String(xCompanyGuid);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/company/{company_id}/day_part/settings',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DayPartApi - functional programming interface
 * @export
 */
export const DayPartApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DayPartApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Retrieve day part settings
         * @param {DayPartApiGetSettingsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSettings(requestParameters: DayPartApiGetSettingsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DayPartGetSettingsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSettings(requestParameters.companyId, requestParameters.xApiVersion, requestParameters.xCompanyGuid, requestParameters.locationId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DayPartApi - factory interface
 * @export
 */
export const DayPartApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DayPartApiFp(configuration)
    return {
        /**
         * 
         * @summary Retrieve day part settings
         * @param {DayPartApiGetSettingsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSettings(requestParameters: DayPartApiGetSettingsRequest, options?: AxiosRequestConfig): AxiosPromise<DayPartGetSettingsResponse> {
            return localVarFp.getSettings(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getSettings operation in DayPartApi.
 * @export
 * @interface DayPartApiGetSettingsRequest
 */
export type DayPartApiGetSettingsRequest = {
    
    /**
    * Company ID
    * @type {number}
    * @memberof DayPartApiGetSettings
    */
    readonly companyId: number
    
    /**
    * 7shifts API version
    * @type {string}
    * @memberof DayPartApiGetSettings
    */
    readonly xApiVersion?: string
    
    /**
    * Company GUID
    * @type {string}
    * @memberof DayPartApiGetSettings
    */
    readonly xCompanyGuid?: string
    
    /**
    * Location ID - null will fetch all day parts for company
    * @type {number}
    * @memberof DayPartApiGetSettings
    */
    readonly locationId?: number
    
}

/**
 * DayPartApiGenerated - object-oriented interface
 * @export
 * @class DayPartApiGenerated
 * @extends {BaseAPI}
 */
export class DayPartApiGenerated extends BaseAPI {
    /**
     * 
     * @summary Retrieve day part settings
     * @param {DayPartApiGetSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DayPartApiGenerated
     */
    public getSettings(requestParameters: DayPartApiGetSettingsRequest, options?: AxiosRequestConfig) {
        return DayPartApiFp(this.configuration).getSettings(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
