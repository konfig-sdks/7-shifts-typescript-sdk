/* tslint:disable */
/* eslint-disable */
/*
7shifts API

7shifts is a team management software designed for restaurants. We help managers and operators spend less time and effort scheduling their staff, reduce their monthly labor costs and improve team communication. The result is simplified team management, one shift at a time.

7shifts also offers free mobile apps (iOS and Android) allowing managers and employees to have everything at their fingertips.

Start your free trial or request a demo at www.7shifts.com.

The version of the OpenAPI document: 2023-05-01
Contact: api-support@7shifts.com

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { UserAssignmentsCreateDepartmentAssignment400Response } from '../models';
// @ts-ignore
import { UserAssignmentsCreateDepartmentAssignment401Response } from '../models';
// @ts-ignore
import { UserAssignmentsCreateDepartmentAssignment403Response } from '../models';
// @ts-ignore
import { UserAssignmentsCreateDepartmentAssignment404Response } from '../models';
// @ts-ignore
import { UserAssignmentsCreateDepartmentAssignment500Response } from '../models';
// @ts-ignore
import { UserAssignmentsCreateDepartmentAssignmentRequest } from '../models';
// @ts-ignore
import { UserAssignmentsCreateDepartmentAssignmentResponse } from '../models';
// @ts-ignore
import { UserAssignmentsCreateLocationAssignment400Response } from '../models';
// @ts-ignore
import { UserAssignmentsCreateLocationAssignment403Response } from '../models';
// @ts-ignore
import { UserAssignmentsCreateLocationAssignment404Response } from '../models';
// @ts-ignore
import { UserAssignmentsCreateLocationAssignment500Response } from '../models';
// @ts-ignore
import { UserAssignmentsCreateLocationAssignmentRequest } from '../models';
// @ts-ignore
import { UserAssignmentsCreateLocationAssignmentResponse } from '../models';
// @ts-ignore
import { UserAssignmentsCreateRoleAssignment400Response } from '../models';
// @ts-ignore
import { UserAssignmentsCreateRoleAssignment403Response } from '../models';
// @ts-ignore
import { UserAssignmentsCreateRoleAssignment404Response } from '../models';
// @ts-ignore
import { UserAssignmentsCreateRoleAssignment500Response } from '../models';
// @ts-ignore
import { UserAssignmentsCreateRoleAssignmentRequest } from '../models';
// @ts-ignore
import { UserAssignmentsCreateRoleAssignmentResponse } from '../models';
// @ts-ignore
import { UserAssignmentsDeleteRoleAssignment404Response } from '../models';
// @ts-ignore
import { UserAssignmentsDeleteRoleAssignment500Response } from '../models';
// @ts-ignore
import { UserAssignmentsDeleteRoleAssignmentResponse } from '../models';
// @ts-ignore
import { UserAssignmentsList400Response } from '../models';
// @ts-ignore
import { UserAssignmentsList401Response } from '../models';
// @ts-ignore
import { UserAssignmentsList403Response } from '../models';
// @ts-ignore
import { UserAssignmentsList404Response } from '../models';
// @ts-ignore
import { UserAssignmentsList500Response } from '../models';
// @ts-ignore
import { UserAssignmentsListDepartmentAssignments400Response } from '../models';
// @ts-ignore
import { UserAssignmentsListDepartmentAssignments401Response } from '../models';
// @ts-ignore
import { UserAssignmentsListDepartmentAssignments403Response } from '../models';
// @ts-ignore
import { UserAssignmentsListDepartmentAssignments404Response } from '../models';
// @ts-ignore
import { UserAssignmentsListDepartmentAssignments500Response } from '../models';
// @ts-ignore
import { UserAssignmentsListDepartmentAssignmentsResponse } from '../models';
// @ts-ignore
import { UserAssignmentsListLocationAssignments400Response } from '../models';
// @ts-ignore
import { UserAssignmentsListLocationAssignments403Response } from '../models';
// @ts-ignore
import { UserAssignmentsListLocationAssignments404Response } from '../models';
// @ts-ignore
import { UserAssignmentsListLocationAssignments500Response } from '../models';
// @ts-ignore
import { UserAssignmentsListLocationAssignmentsResponse } from '../models';
// @ts-ignore
import { UserAssignmentsListResponse } from '../models';
// @ts-ignore
import { UserAssignmentsListRoleAssignments403Response } from '../models';
// @ts-ignore
import { UserAssignmentsListRoleAssignments404Response } from '../models';
// @ts-ignore
import { UserAssignmentsListRoleAssignments500Response } from '../models';
// @ts-ignore
import { UserAssignmentsListRoleAssignmentsResponse } from '../models';
// @ts-ignore
import { UserAssignmentsRemoveDepartmentAssignment403Response } from '../models';
// @ts-ignore
import { UserAssignmentsRemoveDepartmentAssignment404Response } from '../models';
// @ts-ignore
import { UserAssignmentsRemoveDepartmentAssignment500Response } from '../models';
// @ts-ignore
import { UserAssignmentsRemoveDepartmentAssignmentResponse } from '../models';
// @ts-ignore
import { UserAssignmentsRemoveLocationAssignment403Response } from '../models';
// @ts-ignore
import { UserAssignmentsRemoveLocationAssignment404Response } from '../models';
// @ts-ignore
import { UserAssignmentsRemoveLocationAssignment500Response } from '../models';
// @ts-ignore
import { UserAssignmentsRemoveLocationAssignmentResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * UserAssignmentsApi - axios parameter creator
 * @export
 */
export const UserAssignmentsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create Department Assignment
         * @param {number} companyId Company ID
         * @param {number} userId User ID
         * @param {UserAssignmentsCreateDepartmentAssignmentRequest} userAssignmentsCreateDepartmentAssignmentRequest 
         * @param {string} [xApiVersion] 7shifts API version
         * @param {string} [xCompanyGuid] Company GUID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDepartmentAssignment: async (companyId: number, userId: number, userAssignmentsCreateDepartmentAssignmentRequest: UserAssignmentsCreateDepartmentAssignmentRequest, xApiVersion?: string, xCompanyGuid?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('createDepartmentAssignment', 'companyId', companyId)
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('createDepartmentAssignment', 'userId', userId)
            // verify required parameter 'userAssignmentsCreateDepartmentAssignmentRequest' is not null or undefined
            assertParamExists('createDepartmentAssignment', 'userAssignmentsCreateDepartmentAssignmentRequest', userAssignmentsCreateDepartmentAssignmentRequest)
            const localVarPath = `/v2/company/{company_id}/users/{user_id}/department_assignments`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId !== undefined ? companyId : `-company_id-`)))
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId !== undefined ? userId : `-user_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication cookieAuth required
            await setApiKeyToObject({object: localVarHeaderParameter, type: "Cookie", key: "Cookie", keyParamName: "7session", configuration})
            if (xApiVersion != null) {
                localVarHeaderParameter['x-api-version'] = String(xApiVersion);
            }

            if (xCompanyGuid != null) {
                localVarHeaderParameter['x-company-guid'] = String(xCompanyGuid);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: userAssignmentsCreateDepartmentAssignmentRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/company/{company_id}/users/{user_id}/department_assignments',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(userAssignmentsCreateDepartmentAssignmentRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create Location Assignments
         * @param {number} companyId Company ID
         * @param {number} userId User ID
         * @param {UserAssignmentsCreateLocationAssignmentRequest} userAssignmentsCreateLocationAssignmentRequest 
         * @param {string} [xApiVersion] 7shifts API version
         * @param {string} [xCompanyGuid] Company GUID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createLocationAssignment: async (companyId: number, userId: number, userAssignmentsCreateLocationAssignmentRequest: UserAssignmentsCreateLocationAssignmentRequest, xApiVersion?: string, xCompanyGuid?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('createLocationAssignment', 'companyId', companyId)
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('createLocationAssignment', 'userId', userId)
            // verify required parameter 'userAssignmentsCreateLocationAssignmentRequest' is not null or undefined
            assertParamExists('createLocationAssignment', 'userAssignmentsCreateLocationAssignmentRequest', userAssignmentsCreateLocationAssignmentRequest)
            const localVarPath = `/v2/company/{company_id}/users/{user_id}/location_assignments`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId !== undefined ? companyId : `-company_id-`)))
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId !== undefined ? userId : `-user_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication cookieAuth required
            await setApiKeyToObject({object: localVarHeaderParameter, type: "Cookie", key: "Cookie", keyParamName: "7session", configuration})
            if (xApiVersion != null) {
                localVarHeaderParameter['x-api-version'] = String(xApiVersion);
            }

            if (xCompanyGuid != null) {
                localVarHeaderParameter['x-company-guid'] = String(xCompanyGuid);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: userAssignmentsCreateLocationAssignmentRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/company/{company_id}/users/{user_id}/location_assignments',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(userAssignmentsCreateLocationAssignmentRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create Role Assignment
         * @param {number} companyId Company ID
         * @param {number} userId User ID
         * @param {UserAssignmentsCreateRoleAssignmentRequest} userAssignmentsCreateRoleAssignmentRequest 
         * @param {string} [xApiVersion] 7shifts API version
         * @param {string} [xCompanyGuid] Company GUID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRoleAssignment: async (companyId: number, userId: number, userAssignmentsCreateRoleAssignmentRequest: UserAssignmentsCreateRoleAssignmentRequest, xApiVersion?: string, xCompanyGuid?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('createRoleAssignment', 'companyId', companyId)
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('createRoleAssignment', 'userId', userId)
            // verify required parameter 'userAssignmentsCreateRoleAssignmentRequest' is not null or undefined
            assertParamExists('createRoleAssignment', 'userAssignmentsCreateRoleAssignmentRequest', userAssignmentsCreateRoleAssignmentRequest)
            const localVarPath = `/v2/company/{company_id}/users/{user_id}/role_assignments`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId !== undefined ? companyId : `-company_id-`)))
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId !== undefined ? userId : `-user_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication cookieAuth required
            await setApiKeyToObject({object: localVarHeaderParameter, type: "Cookie", key: "Cookie", keyParamName: "7session", configuration})
            if (xApiVersion != null) {
                localVarHeaderParameter['x-api-version'] = String(xApiVersion);
            }

            if (xCompanyGuid != null) {
                localVarHeaderParameter['x-company-guid'] = String(xCompanyGuid);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: userAssignmentsCreateRoleAssignmentRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/company/{company_id}/users/{user_id}/role_assignments',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(userAssignmentsCreateRoleAssignmentRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete Role Assignment
         * @param {number} companyId Company ID
         * @param {number} userId User ID
         * @param {number} roleId Role ID
         * @param {string} [xApiVersion] 7shifts API version
         * @param {string} [xCompanyGuid] Company GUID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRoleAssignment: async (companyId: number, userId: number, roleId: number, xApiVersion?: string, xCompanyGuid?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('deleteRoleAssignment', 'companyId', companyId)
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('deleteRoleAssignment', 'userId', userId)
            // verify required parameter 'roleId' is not null or undefined
            assertParamExists('deleteRoleAssignment', 'roleId', roleId)
            const localVarPath = `/v2/company/{company_id}/users/{user_id}/role_assignments/{role_id}`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId !== undefined ? companyId : `-company_id-`)))
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId !== undefined ? userId : `-user_id-`)))
                .replace(`{${"role_id"}}`, encodeURIComponent(String(roleId !== undefined ? roleId : `-role_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication cookieAuth required
            await setApiKeyToObject({object: localVarHeaderParameter, type: "Cookie", key: "Cookie", keyParamName: "7session", configuration})
            if (xApiVersion != null) {
                localVarHeaderParameter['x-api-version'] = String(xApiVersion);
            }

            if (xCompanyGuid != null) {
                localVarHeaderParameter['x-company-guid'] = String(xCompanyGuid);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/company/{company_id}/users/{user_id}/role_assignments/{role_id}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List Assignments
         * @param {number} companyId Company ID
         * @param {number} userId User ID
         * @param {string} [xApiVersion] 7shifts API version
         * @param {string} [xCompanyGuid] Company GUID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list: async (companyId: number, userId: number, xApiVersion?: string, xCompanyGuid?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('list', 'companyId', companyId)
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('list', 'userId', userId)
            const localVarPath = `/v2/company/{company_id}/users/{user_id}/assignments`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId !== undefined ? companyId : `-company_id-`)))
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId !== undefined ? userId : `-user_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication cookieAuth required
            await setApiKeyToObject({object: localVarHeaderParameter, type: "Cookie", key: "Cookie", keyParamName: "7session", configuration})
            if (xApiVersion != null) {
                localVarHeaderParameter['x-api-version'] = String(xApiVersion);
            }

            if (xCompanyGuid != null) {
                localVarHeaderParameter['x-company-guid'] = String(xCompanyGuid);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/company/{company_id}/users/{user_id}/assignments',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List Department Assignments
         * @param {number} companyId Company ID
         * @param {number} userId User ID
         * @param {string} [xApiVersion] 7shifts API version
         * @param {string} [xCompanyGuid] Company GUID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDepartmentAssignments: async (companyId: number, userId: number, xApiVersion?: string, xCompanyGuid?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('listDepartmentAssignments', 'companyId', companyId)
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('listDepartmentAssignments', 'userId', userId)
            const localVarPath = `/v2/company/{company_id}/users/{user_id}/department_assignments`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId !== undefined ? companyId : `-company_id-`)))
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId !== undefined ? userId : `-user_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication cookieAuth required
            await setApiKeyToObject({object: localVarHeaderParameter, type: "Cookie", key: "Cookie", keyParamName: "7session", configuration})
            if (xApiVersion != null) {
                localVarHeaderParameter['x-api-version'] = String(xApiVersion);
            }

            if (xCompanyGuid != null) {
                localVarHeaderParameter['x-company-guid'] = String(xCompanyGuid);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/company/{company_id}/users/{user_id}/department_assignments',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List Location Assignments
         * @param {number} companyId Company ID
         * @param {number} userId User ID
         * @param {string} [xApiVersion] 7shifts API version
         * @param {string} [xCompanyGuid] Company GUID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listLocationAssignments: async (companyId: number, userId: number, xApiVersion?: string, xCompanyGuid?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('listLocationAssignments', 'companyId', companyId)
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('listLocationAssignments', 'userId', userId)
            const localVarPath = `/v2/company/{company_id}/users/{user_id}/location_assignments`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId !== undefined ? companyId : `-company_id-`)))
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId !== undefined ? userId : `-user_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication cookieAuth required
            await setApiKeyToObject({object: localVarHeaderParameter, type: "Cookie", key: "Cookie", keyParamName: "7session", configuration})
            if (xApiVersion != null) {
                localVarHeaderParameter['x-api-version'] = String(xApiVersion);
            }

            if (xCompanyGuid != null) {
                localVarHeaderParameter['x-company-guid'] = String(xCompanyGuid);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/company/{company_id}/users/{user_id}/location_assignments',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List Role Assignments
         * @param {number} companyId Company ID
         * @param {number} userId User ID
         * @param {string} [xApiVersion] 7shifts API version
         * @param {string} [xCompanyGuid] Company GUID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listRoleAssignments: async (companyId: number, userId: number, xApiVersion?: string, xCompanyGuid?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('listRoleAssignments', 'companyId', companyId)
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('listRoleAssignments', 'userId', userId)
            const localVarPath = `/v2/company/{company_id}/users/{user_id}/role_assignments`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId !== undefined ? companyId : `-company_id-`)))
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId !== undefined ? userId : `-user_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication cookieAuth required
            await setApiKeyToObject({object: localVarHeaderParameter, type: "Cookie", key: "Cookie", keyParamName: "7session", configuration})
            if (xApiVersion != null) {
                localVarHeaderParameter['x-api-version'] = String(xApiVersion);
            }

            if (xCompanyGuid != null) {
                localVarHeaderParameter['x-company-guid'] = String(xCompanyGuid);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/company/{company_id}/users/{user_id}/role_assignments',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete Department Assignment
         * @param {number} companyId Company ID
         * @param {number} userId User ID
         * @param {number} departmentId Department ID
         * @param {string} [xApiVersion] 7shifts API version
         * @param {string} [xCompanyGuid] Company GUID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeDepartmentAssignment: async (companyId: number, userId: number, departmentId: number, xApiVersion?: string, xCompanyGuid?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('removeDepartmentAssignment', 'companyId', companyId)
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('removeDepartmentAssignment', 'userId', userId)
            // verify required parameter 'departmentId' is not null or undefined
            assertParamExists('removeDepartmentAssignment', 'departmentId', departmentId)
            const localVarPath = `/v2/company/{company_id}/users/{user_id}/department_assignments/{department_id}`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId !== undefined ? companyId : `-company_id-`)))
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId !== undefined ? userId : `-user_id-`)))
                .replace(`{${"department_id"}}`, encodeURIComponent(String(departmentId !== undefined ? departmentId : `-department_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication cookieAuth required
            await setApiKeyToObject({object: localVarHeaderParameter, type: "Cookie", key: "Cookie", keyParamName: "7session", configuration})
            if (xApiVersion != null) {
                localVarHeaderParameter['x-api-version'] = String(xApiVersion);
            }

            if (xCompanyGuid != null) {
                localVarHeaderParameter['x-company-guid'] = String(xCompanyGuid);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/company/{company_id}/users/{user_id}/department_assignments/{department_id}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete Location Assignment
         * @param {number} companyId Company ID
         * @param {number} userId User ID
         * @param {number} locationId Location ID
         * @param {string} [xApiVersion] 7shifts API version
         * @param {string} [xCompanyGuid] Company GUID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeLocationAssignment: async (companyId: number, userId: number, locationId: number, xApiVersion?: string, xCompanyGuid?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('removeLocationAssignment', 'companyId', companyId)
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('removeLocationAssignment', 'userId', userId)
            // verify required parameter 'locationId' is not null or undefined
            assertParamExists('removeLocationAssignment', 'locationId', locationId)
            const localVarPath = `/v2/company/{company_id}/users/{user_id}/location_assignments/{location_id}`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId !== undefined ? companyId : `-company_id-`)))
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId !== undefined ? userId : `-user_id-`)))
                .replace(`{${"location_id"}}`, encodeURIComponent(String(locationId !== undefined ? locationId : `-location_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication cookieAuth required
            await setApiKeyToObject({object: localVarHeaderParameter, type: "Cookie", key: "Cookie", keyParamName: "7session", configuration})
            if (xApiVersion != null) {
                localVarHeaderParameter['x-api-version'] = String(xApiVersion);
            }

            if (xCompanyGuid != null) {
                localVarHeaderParameter['x-company-guid'] = String(xCompanyGuid);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/company/{company_id}/users/{user_id}/location_assignments/{location_id}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserAssignmentsApi - functional programming interface
 * @export
 */
export const UserAssignmentsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UserAssignmentsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create Department Assignment
         * @param {UserAssignmentsApiCreateDepartmentAssignmentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createDepartmentAssignment(requestParameters: UserAssignmentsApiCreateDepartmentAssignmentRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserAssignmentsCreateDepartmentAssignmentResponse>> {
            const userAssignmentsCreateDepartmentAssignmentRequest: UserAssignmentsCreateDepartmentAssignmentRequest = {
                department_id: requestParameters.department_id,
                appear_on_schedule: requestParameters.appear_on_schedule
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createDepartmentAssignment(requestParameters.companyId, requestParameters.userId, userAssignmentsCreateDepartmentAssignmentRequest, requestParameters.xApiVersion, requestParameters.xCompanyGuid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Create Location Assignments
         * @param {UserAssignmentsApiCreateLocationAssignmentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createLocationAssignment(requestParameters: UserAssignmentsApiCreateLocationAssignmentRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserAssignmentsCreateLocationAssignmentResponse>> {
            const userAssignmentsCreateLocationAssignmentRequest: UserAssignmentsCreateLocationAssignmentRequest = {
                location_id: requestParameters.location_id
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createLocationAssignment(requestParameters.companyId, requestParameters.userId, userAssignmentsCreateLocationAssignmentRequest, requestParameters.xApiVersion, requestParameters.xCompanyGuid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Create Role Assignment
         * @param {UserAssignmentsApiCreateRoleAssignmentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createRoleAssignment(requestParameters: UserAssignmentsApiCreateRoleAssignmentRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserAssignmentsCreateRoleAssignmentResponse>> {
            const userAssignmentsCreateRoleAssignmentRequest: UserAssignmentsCreateRoleAssignmentRequest = {
                role_id: requestParameters.role_id,
                primary: requestParameters.primary
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createRoleAssignment(requestParameters.companyId, requestParameters.userId, userAssignmentsCreateRoleAssignmentRequest, requestParameters.xApiVersion, requestParameters.xCompanyGuid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete Role Assignment
         * @param {UserAssignmentsApiDeleteRoleAssignmentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteRoleAssignment(requestParameters: UserAssignmentsApiDeleteRoleAssignmentRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteRoleAssignment(requestParameters.companyId, requestParameters.userId, requestParameters.roleId, requestParameters.xApiVersion, requestParameters.xCompanyGuid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary List Assignments
         * @param {UserAssignmentsApiListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async list(requestParameters: UserAssignmentsApiListRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserAssignmentsListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.list(requestParameters.companyId, requestParameters.userId, requestParameters.xApiVersion, requestParameters.xCompanyGuid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary List Department Assignments
         * @param {UserAssignmentsApiListDepartmentAssignmentsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listDepartmentAssignments(requestParameters: UserAssignmentsApiListDepartmentAssignmentsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserAssignmentsListDepartmentAssignmentsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listDepartmentAssignments(requestParameters.companyId, requestParameters.userId, requestParameters.xApiVersion, requestParameters.xCompanyGuid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary List Location Assignments
         * @param {UserAssignmentsApiListLocationAssignmentsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listLocationAssignments(requestParameters: UserAssignmentsApiListLocationAssignmentsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserAssignmentsListLocationAssignmentsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listLocationAssignments(requestParameters.companyId, requestParameters.userId, requestParameters.xApiVersion, requestParameters.xCompanyGuid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary List Role Assignments
         * @param {UserAssignmentsApiListRoleAssignmentsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listRoleAssignments(requestParameters: UserAssignmentsApiListRoleAssignmentsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserAssignmentsListRoleAssignmentsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listRoleAssignments(requestParameters.companyId, requestParameters.userId, requestParameters.xApiVersion, requestParameters.xCompanyGuid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete Department Assignment
         * @param {UserAssignmentsApiRemoveDepartmentAssignmentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeDepartmentAssignment(requestParameters: UserAssignmentsApiRemoveDepartmentAssignmentRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeDepartmentAssignment(requestParameters.companyId, requestParameters.userId, requestParameters.departmentId, requestParameters.xApiVersion, requestParameters.xCompanyGuid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete Location Assignment
         * @param {UserAssignmentsApiRemoveLocationAssignmentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeLocationAssignment(requestParameters: UserAssignmentsApiRemoveLocationAssignmentRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeLocationAssignment(requestParameters.companyId, requestParameters.userId, requestParameters.locationId, requestParameters.xApiVersion, requestParameters.xCompanyGuid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UserAssignmentsApi - factory interface
 * @export
 */
export const UserAssignmentsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UserAssignmentsApiFp(configuration)
    return {
        /**
         * 
         * @summary Create Department Assignment
         * @param {UserAssignmentsApiCreateDepartmentAssignmentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDepartmentAssignment(requestParameters: UserAssignmentsApiCreateDepartmentAssignmentRequest, options?: AxiosRequestConfig): AxiosPromise<UserAssignmentsCreateDepartmentAssignmentResponse> {
            return localVarFp.createDepartmentAssignment(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create Location Assignments
         * @param {UserAssignmentsApiCreateLocationAssignmentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createLocationAssignment(requestParameters: UserAssignmentsApiCreateLocationAssignmentRequest, options?: AxiosRequestConfig): AxiosPromise<UserAssignmentsCreateLocationAssignmentResponse> {
            return localVarFp.createLocationAssignment(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create Role Assignment
         * @param {UserAssignmentsApiCreateRoleAssignmentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRoleAssignment(requestParameters: UserAssignmentsApiCreateRoleAssignmentRequest, options?: AxiosRequestConfig): AxiosPromise<UserAssignmentsCreateRoleAssignmentResponse> {
            return localVarFp.createRoleAssignment(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete Role Assignment
         * @param {UserAssignmentsApiDeleteRoleAssignmentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRoleAssignment(requestParameters: UserAssignmentsApiDeleteRoleAssignmentRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteRoleAssignment(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List Assignments
         * @param {UserAssignmentsApiListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list(requestParameters: UserAssignmentsApiListRequest, options?: AxiosRequestConfig): AxiosPromise<UserAssignmentsListResponse> {
            return localVarFp.list(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List Department Assignments
         * @param {UserAssignmentsApiListDepartmentAssignmentsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDepartmentAssignments(requestParameters: UserAssignmentsApiListDepartmentAssignmentsRequest, options?: AxiosRequestConfig): AxiosPromise<UserAssignmentsListDepartmentAssignmentsResponse> {
            return localVarFp.listDepartmentAssignments(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List Location Assignments
         * @param {UserAssignmentsApiListLocationAssignmentsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listLocationAssignments(requestParameters: UserAssignmentsApiListLocationAssignmentsRequest, options?: AxiosRequestConfig): AxiosPromise<UserAssignmentsListLocationAssignmentsResponse> {
            return localVarFp.listLocationAssignments(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List Role Assignments
         * @param {UserAssignmentsApiListRoleAssignmentsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listRoleAssignments(requestParameters: UserAssignmentsApiListRoleAssignmentsRequest, options?: AxiosRequestConfig): AxiosPromise<UserAssignmentsListRoleAssignmentsResponse> {
            return localVarFp.listRoleAssignments(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete Department Assignment
         * @param {UserAssignmentsApiRemoveDepartmentAssignmentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeDepartmentAssignment(requestParameters: UserAssignmentsApiRemoveDepartmentAssignmentRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.removeDepartmentAssignment(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete Location Assignment
         * @param {UserAssignmentsApiRemoveLocationAssignmentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeLocationAssignment(requestParameters: UserAssignmentsApiRemoveLocationAssignmentRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.removeLocationAssignment(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createDepartmentAssignment operation in UserAssignmentsApi.
 * @export
 * @interface UserAssignmentsApiCreateDepartmentAssignmentRequest
 */
export type UserAssignmentsApiCreateDepartmentAssignmentRequest = {
    
    /**
    * Company ID
    * @type {number}
    * @memberof UserAssignmentsApiCreateDepartmentAssignment
    */
    readonly companyId: number
    
    /**
    * User ID
    * @type {number}
    * @memberof UserAssignmentsApiCreateDepartmentAssignment
    */
    readonly userId: number
    
    /**
    * 7shifts API version
    * @type {string}
    * @memberof UserAssignmentsApiCreateDepartmentAssignment
    */
    readonly xApiVersion?: string
    
    /**
    * Company GUID
    * @type {string}
    * @memberof UserAssignmentsApiCreateDepartmentAssignment
    */
    readonly xCompanyGuid?: string
    
} & UserAssignmentsCreateDepartmentAssignmentRequest

/**
 * Request parameters for createLocationAssignment operation in UserAssignmentsApi.
 * @export
 * @interface UserAssignmentsApiCreateLocationAssignmentRequest
 */
export type UserAssignmentsApiCreateLocationAssignmentRequest = {
    
    /**
    * Company ID
    * @type {number}
    * @memberof UserAssignmentsApiCreateLocationAssignment
    */
    readonly companyId: number
    
    /**
    * User ID
    * @type {number}
    * @memberof UserAssignmentsApiCreateLocationAssignment
    */
    readonly userId: number
    
    /**
    * 7shifts API version
    * @type {string}
    * @memberof UserAssignmentsApiCreateLocationAssignment
    */
    readonly xApiVersion?: string
    
    /**
    * Company GUID
    * @type {string}
    * @memberof UserAssignmentsApiCreateLocationAssignment
    */
    readonly xCompanyGuid?: string
    
} & UserAssignmentsCreateLocationAssignmentRequest

/**
 * Request parameters for createRoleAssignment operation in UserAssignmentsApi.
 * @export
 * @interface UserAssignmentsApiCreateRoleAssignmentRequest
 */
export type UserAssignmentsApiCreateRoleAssignmentRequest = {
    
    /**
    * Company ID
    * @type {number}
    * @memberof UserAssignmentsApiCreateRoleAssignment
    */
    readonly companyId: number
    
    /**
    * User ID
    * @type {number}
    * @memberof UserAssignmentsApiCreateRoleAssignment
    */
    readonly userId: number
    
    /**
    * 7shifts API version
    * @type {string}
    * @memberof UserAssignmentsApiCreateRoleAssignment
    */
    readonly xApiVersion?: string
    
    /**
    * Company GUID
    * @type {string}
    * @memberof UserAssignmentsApiCreateRoleAssignment
    */
    readonly xCompanyGuid?: string
    
} & UserAssignmentsCreateRoleAssignmentRequest

/**
 * Request parameters for deleteRoleAssignment operation in UserAssignmentsApi.
 * @export
 * @interface UserAssignmentsApiDeleteRoleAssignmentRequest
 */
export type UserAssignmentsApiDeleteRoleAssignmentRequest = {
    
    /**
    * Company ID
    * @type {number}
    * @memberof UserAssignmentsApiDeleteRoleAssignment
    */
    readonly companyId: number
    
    /**
    * User ID
    * @type {number}
    * @memberof UserAssignmentsApiDeleteRoleAssignment
    */
    readonly userId: number
    
    /**
    * Role ID
    * @type {number}
    * @memberof UserAssignmentsApiDeleteRoleAssignment
    */
    readonly roleId: number
    
    /**
    * 7shifts API version
    * @type {string}
    * @memberof UserAssignmentsApiDeleteRoleAssignment
    */
    readonly xApiVersion?: string
    
    /**
    * Company GUID
    * @type {string}
    * @memberof UserAssignmentsApiDeleteRoleAssignment
    */
    readonly xCompanyGuid?: string
    
}

/**
 * Request parameters for list operation in UserAssignmentsApi.
 * @export
 * @interface UserAssignmentsApiListRequest
 */
export type UserAssignmentsApiListRequest = {
    
    /**
    * Company ID
    * @type {number}
    * @memberof UserAssignmentsApiList
    */
    readonly companyId: number
    
    /**
    * User ID
    * @type {number}
    * @memberof UserAssignmentsApiList
    */
    readonly userId: number
    
    /**
    * 7shifts API version
    * @type {string}
    * @memberof UserAssignmentsApiList
    */
    readonly xApiVersion?: string
    
    /**
    * Company GUID
    * @type {string}
    * @memberof UserAssignmentsApiList
    */
    readonly xCompanyGuid?: string
    
}

/**
 * Request parameters for listDepartmentAssignments operation in UserAssignmentsApi.
 * @export
 * @interface UserAssignmentsApiListDepartmentAssignmentsRequest
 */
export type UserAssignmentsApiListDepartmentAssignmentsRequest = {
    
    /**
    * Company ID
    * @type {number}
    * @memberof UserAssignmentsApiListDepartmentAssignments
    */
    readonly companyId: number
    
    /**
    * User ID
    * @type {number}
    * @memberof UserAssignmentsApiListDepartmentAssignments
    */
    readonly userId: number
    
    /**
    * 7shifts API version
    * @type {string}
    * @memberof UserAssignmentsApiListDepartmentAssignments
    */
    readonly xApiVersion?: string
    
    /**
    * Company GUID
    * @type {string}
    * @memberof UserAssignmentsApiListDepartmentAssignments
    */
    readonly xCompanyGuid?: string
    
}

/**
 * Request parameters for listLocationAssignments operation in UserAssignmentsApi.
 * @export
 * @interface UserAssignmentsApiListLocationAssignmentsRequest
 */
export type UserAssignmentsApiListLocationAssignmentsRequest = {
    
    /**
    * Company ID
    * @type {number}
    * @memberof UserAssignmentsApiListLocationAssignments
    */
    readonly companyId: number
    
    /**
    * User ID
    * @type {number}
    * @memberof UserAssignmentsApiListLocationAssignments
    */
    readonly userId: number
    
    /**
    * 7shifts API version
    * @type {string}
    * @memberof UserAssignmentsApiListLocationAssignments
    */
    readonly xApiVersion?: string
    
    /**
    * Company GUID
    * @type {string}
    * @memberof UserAssignmentsApiListLocationAssignments
    */
    readonly xCompanyGuid?: string
    
}

/**
 * Request parameters for listRoleAssignments operation in UserAssignmentsApi.
 * @export
 * @interface UserAssignmentsApiListRoleAssignmentsRequest
 */
export type UserAssignmentsApiListRoleAssignmentsRequest = {
    
    /**
    * Company ID
    * @type {number}
    * @memberof UserAssignmentsApiListRoleAssignments
    */
    readonly companyId: number
    
    /**
    * User ID
    * @type {number}
    * @memberof UserAssignmentsApiListRoleAssignments
    */
    readonly userId: number
    
    /**
    * 7shifts API version
    * @type {string}
    * @memberof UserAssignmentsApiListRoleAssignments
    */
    readonly xApiVersion?: string
    
    /**
    * Company GUID
    * @type {string}
    * @memberof UserAssignmentsApiListRoleAssignments
    */
    readonly xCompanyGuid?: string
    
}

/**
 * Request parameters for removeDepartmentAssignment operation in UserAssignmentsApi.
 * @export
 * @interface UserAssignmentsApiRemoveDepartmentAssignmentRequest
 */
export type UserAssignmentsApiRemoveDepartmentAssignmentRequest = {
    
    /**
    * Company ID
    * @type {number}
    * @memberof UserAssignmentsApiRemoveDepartmentAssignment
    */
    readonly companyId: number
    
    /**
    * User ID
    * @type {number}
    * @memberof UserAssignmentsApiRemoveDepartmentAssignment
    */
    readonly userId: number
    
    /**
    * Department ID
    * @type {number}
    * @memberof UserAssignmentsApiRemoveDepartmentAssignment
    */
    readonly departmentId: number
    
    /**
    * 7shifts API version
    * @type {string}
    * @memberof UserAssignmentsApiRemoveDepartmentAssignment
    */
    readonly xApiVersion?: string
    
    /**
    * Company GUID
    * @type {string}
    * @memberof UserAssignmentsApiRemoveDepartmentAssignment
    */
    readonly xCompanyGuid?: string
    
}

/**
 * Request parameters for removeLocationAssignment operation in UserAssignmentsApi.
 * @export
 * @interface UserAssignmentsApiRemoveLocationAssignmentRequest
 */
export type UserAssignmentsApiRemoveLocationAssignmentRequest = {
    
    /**
    * Company ID
    * @type {number}
    * @memberof UserAssignmentsApiRemoveLocationAssignment
    */
    readonly companyId: number
    
    /**
    * User ID
    * @type {number}
    * @memberof UserAssignmentsApiRemoveLocationAssignment
    */
    readonly userId: number
    
    /**
    * Location ID
    * @type {number}
    * @memberof UserAssignmentsApiRemoveLocationAssignment
    */
    readonly locationId: number
    
    /**
    * 7shifts API version
    * @type {string}
    * @memberof UserAssignmentsApiRemoveLocationAssignment
    */
    readonly xApiVersion?: string
    
    /**
    * Company GUID
    * @type {string}
    * @memberof UserAssignmentsApiRemoveLocationAssignment
    */
    readonly xCompanyGuid?: string
    
}

/**
 * UserAssignmentsApiGenerated - object-oriented interface
 * @export
 * @class UserAssignmentsApiGenerated
 * @extends {BaseAPI}
 */
export class UserAssignmentsApiGenerated extends BaseAPI {
    /**
     * 
     * @summary Create Department Assignment
     * @param {UserAssignmentsApiCreateDepartmentAssignmentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserAssignmentsApiGenerated
     */
    public createDepartmentAssignment(requestParameters: UserAssignmentsApiCreateDepartmentAssignmentRequest, options?: AxiosRequestConfig) {
        return UserAssignmentsApiFp(this.configuration).createDepartmentAssignment(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create Location Assignments
     * @param {UserAssignmentsApiCreateLocationAssignmentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserAssignmentsApiGenerated
     */
    public createLocationAssignment(requestParameters: UserAssignmentsApiCreateLocationAssignmentRequest, options?: AxiosRequestConfig) {
        return UserAssignmentsApiFp(this.configuration).createLocationAssignment(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create Role Assignment
     * @param {UserAssignmentsApiCreateRoleAssignmentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserAssignmentsApiGenerated
     */
    public createRoleAssignment(requestParameters: UserAssignmentsApiCreateRoleAssignmentRequest, options?: AxiosRequestConfig) {
        return UserAssignmentsApiFp(this.configuration).createRoleAssignment(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete Role Assignment
     * @param {UserAssignmentsApiDeleteRoleAssignmentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserAssignmentsApiGenerated
     */
    public deleteRoleAssignment(requestParameters: UserAssignmentsApiDeleteRoleAssignmentRequest, options?: AxiosRequestConfig) {
        return UserAssignmentsApiFp(this.configuration).deleteRoleAssignment(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List Assignments
     * @param {UserAssignmentsApiListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserAssignmentsApiGenerated
     */
    public list(requestParameters: UserAssignmentsApiListRequest, options?: AxiosRequestConfig) {
        return UserAssignmentsApiFp(this.configuration).list(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List Department Assignments
     * @param {UserAssignmentsApiListDepartmentAssignmentsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserAssignmentsApiGenerated
     */
    public listDepartmentAssignments(requestParameters: UserAssignmentsApiListDepartmentAssignmentsRequest, options?: AxiosRequestConfig) {
        return UserAssignmentsApiFp(this.configuration).listDepartmentAssignments(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List Location Assignments
     * @param {UserAssignmentsApiListLocationAssignmentsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserAssignmentsApiGenerated
     */
    public listLocationAssignments(requestParameters: UserAssignmentsApiListLocationAssignmentsRequest, options?: AxiosRequestConfig) {
        return UserAssignmentsApiFp(this.configuration).listLocationAssignments(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List Role Assignments
     * @param {UserAssignmentsApiListRoleAssignmentsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserAssignmentsApiGenerated
     */
    public listRoleAssignments(requestParameters: UserAssignmentsApiListRoleAssignmentsRequest, options?: AxiosRequestConfig) {
        return UserAssignmentsApiFp(this.configuration).listRoleAssignments(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete Department Assignment
     * @param {UserAssignmentsApiRemoveDepartmentAssignmentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserAssignmentsApiGenerated
     */
    public removeDepartmentAssignment(requestParameters: UserAssignmentsApiRemoveDepartmentAssignmentRequest, options?: AxiosRequestConfig) {
        return UserAssignmentsApiFp(this.configuration).removeDepartmentAssignment(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete Location Assignment
     * @param {UserAssignmentsApiRemoveLocationAssignmentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserAssignmentsApiGenerated
     */
    public removeLocationAssignment(requestParameters: UserAssignmentsApiRemoveLocationAssignmentRequest, options?: AxiosRequestConfig) {
        return UserAssignmentsApiFp(this.configuration).removeLocationAssignment(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
