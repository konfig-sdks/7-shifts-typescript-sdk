/* tslint:disable */
/* eslint-disable */
/*
7shifts API

7shifts is a team management software designed for restaurants. We help managers and operators spend less time and effort scheduling their staff, reduce their monthly labor costs and improve team communication. The result is simplified team management, one shift at a time.

7shifts also offers free mobile apps (iOS and Android) allowing managers and employees to have everything at their fingertips.

Start your free trial or request a demo at www.7shifts.com.

The version of the OpenAPI document: 2023-05-01
Contact: api-support@7shifts.com

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ForecastOverridesBulkCreateProjectedForecastOverride400Response } from '../models';
// @ts-ignore
import { ForecastOverridesBulkCreateProjectedForecastOverride401Response } from '../models';
// @ts-ignore
import { ForecastOverridesBulkCreateProjectedForecastOverride403Response } from '../models';
// @ts-ignore
import { ForecastOverridesBulkCreateProjectedForecastOverride422Response } from '../models';
// @ts-ignore
import { ForecastOverridesBulkCreateProjectedForecastOverride500Response } from '../models';
// @ts-ignore
import { ForecastOverridesBulkCreateProjectedForecastOverrideRequest } from '../models';
// @ts-ignore
import { ForecastOverridesBulkCreateProjectedForecastOverrideRequestDataInner } from '../models';
// @ts-ignore
import { ForecastOverridesBulkCreateProjectedForecastOverrideResponse } from '../models';
// @ts-ignore
import { ForecastOverridesBulkCreateProjectedSalesIntervalOverride401Response } from '../models';
// @ts-ignore
import { ForecastOverridesBulkCreateProjectedSalesIntervalOverride403Response } from '../models';
// @ts-ignore
import { ForecastOverridesBulkCreateProjectedSalesIntervalOverride422Response } from '../models';
// @ts-ignore
import { ForecastOverridesBulkCreateProjectedSalesIntervalOverride500Response } from '../models';
// @ts-ignore
import { ForecastOverridesBulkCreateProjectedSalesIntervalOverrideRequestInner } from '../models';
// @ts-ignore
import { ForecastOverridesBulkCreateProjectedSalesIntervalOverrideResponse } from '../models';
// @ts-ignore
import { ForecastOverridesCreateDailyProjectedForecastOverride400Response } from '../models';
// @ts-ignore
import { ForecastOverridesCreateDailyProjectedForecastOverride401Response } from '../models';
// @ts-ignore
import { ForecastOverridesCreateDailyProjectedForecastOverride403Response } from '../models';
// @ts-ignore
import { ForecastOverridesCreateDailyProjectedForecastOverride422Response } from '../models';
// @ts-ignore
import { ForecastOverridesCreateDailyProjectedForecastOverride500Response } from '../models';
// @ts-ignore
import { ForecastOverridesCreateDailyProjectedForecastOverrideRequest } from '../models';
// @ts-ignore
import { ForecastOverridesCreateDailyProjectedForecastOverrideResponse } from '../models';
// @ts-ignore
import { ForecastOverridesOverrideInterval401Response } from '../models';
// @ts-ignore
import { ForecastOverridesOverrideInterval403Response } from '../models';
// @ts-ignore
import { ForecastOverridesOverrideInterval422Response } from '../models';
// @ts-ignore
import { ForecastOverridesOverrideInterval500Response } from '../models';
// @ts-ignore
import { ForecastOverridesOverrideIntervalRequest } from '../models';
// @ts-ignore
import { ForecastOverridesOverrideIntervalResponse } from '../models';
// @ts-ignore
import { ForecastOverridesSyncProjectedForecastOverride401Response } from '../models';
// @ts-ignore
import { ForecastOverridesSyncProjectedForecastOverride403Response } from '../models';
// @ts-ignore
import { ForecastOverridesSyncProjectedForecastOverride422Response } from '../models';
// @ts-ignore
import { ForecastOverridesSyncProjectedForecastOverride500Response } from '../models';
// @ts-ignore
import { ForecastOverridesSyncProjectedForecastOverrideRequest } from '../models';
// @ts-ignore
import { ForecastOverridesSyncProjectedForecastOverrideResponse } from '../models';
// @ts-ignore
import { ForecastOverridesSyncProjectedSalesInterval401Response } from '../models';
// @ts-ignore
import { ForecastOverridesSyncProjectedSalesInterval403Response } from '../models';
// @ts-ignore
import { ForecastOverridesSyncProjectedSalesInterval422Response } from '../models';
// @ts-ignore
import { ForecastOverridesSyncProjectedSalesInterval500Response } from '../models';
// @ts-ignore
import { ForecastOverridesSyncProjectedSalesIntervalRequest } from '../models';
// @ts-ignore
import { ForecastOverridesSyncProjectedSalesIntervalResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * ForecastOverridesApi - axios parameter creator
 * @export
 */
export const ForecastOverridesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create Bulk Daily Projected Forecast Overrides
         * @param {number} companyId Company ID
         * @param {number} locationId Location ID
         * @param {ForecastOverridesBulkCreateProjectedForecastOverrideRequest} forecastOverridesBulkCreateProjectedForecastOverrideRequest 
         * @param {string} [xApiVersion] 7shifts API version
         * @param {string} [xCompanyGuid] Company GUID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bulkCreateProjectedForecastOverride: async (companyId: number, locationId: number, forecastOverridesBulkCreateProjectedForecastOverrideRequest: ForecastOverridesBulkCreateProjectedForecastOverrideRequest, xApiVersion?: string, xCompanyGuid?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('bulkCreateProjectedForecastOverride', 'companyId', companyId)
            // verify required parameter 'locationId' is not null or undefined
            assertParamExists('bulkCreateProjectedForecastOverride', 'locationId', locationId)
            // verify required parameter 'forecastOverridesBulkCreateProjectedForecastOverrideRequest' is not null or undefined
            assertParamExists('bulkCreateProjectedForecastOverride', 'forecastOverridesBulkCreateProjectedForecastOverrideRequest', forecastOverridesBulkCreateProjectedForecastOverrideRequest)
            const localVarPath = `/v2/company/{company_id}/location/{location_id}/forecast_overrides`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId !== undefined ? companyId : `-company_id-`)))
                .replace(`{${"location_id"}}`, encodeURIComponent(String(locationId !== undefined ? locationId : `-location_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication cookieAuth required
            await setApiKeyToObject({object: localVarHeaderParameter, type: "Cookie", key: "Cookie", keyParamName: "7session", configuration})
            if (xApiVersion != null) {
                localVarHeaderParameter['x-api-version'] = String(xApiVersion);
            }

            if (xCompanyGuid != null) {
                localVarHeaderParameter['x-company-guid'] = String(xCompanyGuid);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: forecastOverridesBulkCreateProjectedForecastOverrideRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/company/{company_id}/location/{location_id}/forecast_overrides',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(forecastOverridesBulkCreateProjectedForecastOverrideRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Overrides many project sales intervals of 15 minutes or 1 hour. (In Development)
         * @summary Create Bulk Daily Projected Forecast Overrides
         * @param {number} companyId Company ID
         * @param {number} locationId Location ID
         * @param {string} [xApiVersion] 7shifts API version
         * @param {string} [xCompanyGuid] Company GUID
         * @param {Array<ForecastOverridesBulkCreateProjectedSalesIntervalOverrideRequestInner>} [forecastOverridesBulkCreateProjectedSalesIntervalOverrideRequestInner] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bulkCreateProjectedSalesIntervalOverride: async (companyId: number, locationId: number, xApiVersion?: string, xCompanyGuid?: string, forecastOverridesBulkCreateProjectedSalesIntervalOverrideRequestInner?: Array<ForecastOverridesBulkCreateProjectedSalesIntervalOverrideRequestInner>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('bulkCreateProjectedSalesIntervalOverride', 'companyId', companyId)
            // verify required parameter 'locationId' is not null or undefined
            assertParamExists('bulkCreateProjectedSalesIntervalOverride', 'locationId', locationId)
            const localVarPath = `/v2/company/{company_id}/locations/{location_id}/forecast_overrides_intervals`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId !== undefined ? companyId : `-company_id-`)))
                .replace(`{${"location_id"}}`, encodeURIComponent(String(locationId !== undefined ? locationId : `-location_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication cookieAuth required
            await setApiKeyToObject({object: localVarHeaderParameter, type: "Cookie", key: "Cookie", keyParamName: "7session", configuration})
            if (xApiVersion != null) {
                localVarHeaderParameter['x-api-version'] = String(xApiVersion);
            }

            if (xCompanyGuid != null) {
                localVarHeaderParameter['x-company-guid'] = String(xCompanyGuid);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: forecastOverridesBulkCreateProjectedSalesIntervalOverrideRequestInner,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/company/{company_id}/locations/{location_id}/forecast_overrides_intervals',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(forecastOverridesBulkCreateProjectedSalesIntervalOverrideRequestInner, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create Daily Projected Forecast Override
         * @param {number} companyId Company ID
         * @param {number} locationId Location ID
         * @param {string} [xApiVersion] 7shifts API version
         * @param {string} [xCompanyGuid] Company GUID
         * @param {ForecastOverridesCreateDailyProjectedForecastOverrideRequest} [forecastOverridesCreateDailyProjectedForecastOverrideRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDailyProjectedForecastOverride: async (companyId: number, locationId: number, xApiVersion?: string, xCompanyGuid?: string, forecastOverridesCreateDailyProjectedForecastOverrideRequest?: ForecastOverridesCreateDailyProjectedForecastOverrideRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('createDailyProjectedForecastOverride', 'companyId', companyId)
            // verify required parameter 'locationId' is not null or undefined
            assertParamExists('createDailyProjectedForecastOverride', 'locationId', locationId)
            const localVarPath = `/v2/company/{company_id}/location/{location_id}/forecast_override`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId !== undefined ? companyId : `-company_id-`)))
                .replace(`{${"location_id"}}`, encodeURIComponent(String(locationId !== undefined ? locationId : `-location_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication cookieAuth required
            await setApiKeyToObject({object: localVarHeaderParameter, type: "Cookie", key: "Cookie", keyParamName: "7session", configuration})
            if (xApiVersion != null) {
                localVarHeaderParameter['x-api-version'] = String(xApiVersion);
            }

            if (xCompanyGuid != null) {
                localVarHeaderParameter['x-company-guid'] = String(xCompanyGuid);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: forecastOverridesCreateDailyProjectedForecastOverrideRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/company/{company_id}/location/{location_id}/forecast_override',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(forecastOverridesCreateDailyProjectedForecastOverrideRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Overrides the project sales interval of 15 minutes or 1 hour.
         * @summary Create Interval Projected Forecast Override
         * @param {number} companyId Company ID
         * @param {number} locationId Location ID
         * @param {string} [xApiVersion] 7shifts API version
         * @param {string} [xCompanyGuid] Company GUID
         * @param {ForecastOverridesOverrideIntervalRequest} [forecastOverridesOverrideIntervalRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        overrideInterval: async (companyId: number, locationId: number, xApiVersion?: string, xCompanyGuid?: string, forecastOverridesOverrideIntervalRequest?: ForecastOverridesOverrideIntervalRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('overrideInterval', 'companyId', companyId)
            // verify required parameter 'locationId' is not null or undefined
            assertParamExists('overrideInterval', 'locationId', locationId)
            const localVarPath = `/v2/company/{company_id}/locations/{location_id}/forecast_override_interval`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId !== undefined ? companyId : `-company_id-`)))
                .replace(`{${"location_id"}}`, encodeURIComponent(String(locationId !== undefined ? locationId : `-location_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication cookieAuth required
            await setApiKeyToObject({object: localVarHeaderParameter, type: "Cookie", key: "Cookie", keyParamName: "7session", configuration})
            if (xApiVersion != null) {
                localVarHeaderParameter['x-api-version'] = String(xApiVersion);
            }

            if (xCompanyGuid != null) {
                localVarHeaderParameter['x-company-guid'] = String(xCompanyGuid);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: forecastOverridesOverrideIntervalRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/company/{company_id}/locations/{location_id}/forecast_override_interval',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(forecastOverridesOverrideIntervalRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Sync Daily Projected Forecast Override
         * @param {number} companyId Company ID
         * @param {number} locationId Location ID
         * @param {string} [xApiVersion] 7shifts API version
         * @param {string} [xCompanyGuid] Company GUID
         * @param {ForecastOverridesSyncProjectedForecastOverrideRequest} [forecastOverridesSyncProjectedForecastOverrideRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        syncProjectedForecastOverride: async (companyId: number, locationId: number, xApiVersion?: string, xCompanyGuid?: string, forecastOverridesSyncProjectedForecastOverrideRequest?: ForecastOverridesSyncProjectedForecastOverrideRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('syncProjectedForecastOverride', 'companyId', companyId)
            // verify required parameter 'locationId' is not null or undefined
            assertParamExists('syncProjectedForecastOverride', 'locationId', locationId)
            const localVarPath = `/v2/company/{company_id}/location/{location_id}/forecast_override`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId !== undefined ? companyId : `-company_id-`)))
                .replace(`{${"location_id"}}`, encodeURIComponent(String(locationId !== undefined ? locationId : `-location_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication cookieAuth required
            await setApiKeyToObject({object: localVarHeaderParameter, type: "Cookie", key: "Cookie", keyParamName: "7session", configuration})
            if (xApiVersion != null) {
                localVarHeaderParameter['x-api-version'] = String(xApiVersion);
            }

            if (xCompanyGuid != null) {
                localVarHeaderParameter['x-company-guid'] = String(xCompanyGuid);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: forecastOverridesSyncProjectedForecastOverrideRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/company/{company_id}/location/{location_id}/forecast_override',
                httpMethod: 'DELETE'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(forecastOverridesSyncProjectedForecastOverrideRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Syncs the overridden project sales interval of 15 minutes or 1 hour.
         * @summary Sync Interval Projected Forecast Override
         * @param {number} companyId Company ID
         * @param {number} locationId Location ID
         * @param {string} [xApiVersion] 7shifts API version
         * @param {string} [xCompanyGuid] Company GUID
         * @param {ForecastOverridesSyncProjectedSalesIntervalRequest} [forecastOverridesSyncProjectedSalesIntervalRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        syncProjectedSalesInterval: async (companyId: number, locationId: number, xApiVersion?: string, xCompanyGuid?: string, forecastOverridesSyncProjectedSalesIntervalRequest?: ForecastOverridesSyncProjectedSalesIntervalRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('syncProjectedSalesInterval', 'companyId', companyId)
            // verify required parameter 'locationId' is not null or undefined
            assertParamExists('syncProjectedSalesInterval', 'locationId', locationId)
            const localVarPath = `/v2/company/{company_id}/locations/{location_id}/forecast_override_interval`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId !== undefined ? companyId : `-company_id-`)))
                .replace(`{${"location_id"}}`, encodeURIComponent(String(locationId !== undefined ? locationId : `-location_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication cookieAuth required
            await setApiKeyToObject({object: localVarHeaderParameter, type: "Cookie", key: "Cookie", keyParamName: "7session", configuration})
            if (xApiVersion != null) {
                localVarHeaderParameter['x-api-version'] = String(xApiVersion);
            }

            if (xCompanyGuid != null) {
                localVarHeaderParameter['x-company-guid'] = String(xCompanyGuid);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: forecastOverridesSyncProjectedSalesIntervalRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/company/{company_id}/locations/{location_id}/forecast_override_interval',
                httpMethod: 'DELETE'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(forecastOverridesSyncProjectedSalesIntervalRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ForecastOverridesApi - functional programming interface
 * @export
 */
export const ForecastOverridesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ForecastOverridesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create Bulk Daily Projected Forecast Overrides
         * @param {ForecastOverridesApiBulkCreateProjectedForecastOverrideRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async bulkCreateProjectedForecastOverride(requestParameters: ForecastOverridesApiBulkCreateProjectedForecastOverrideRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ForecastOverridesBulkCreateProjectedForecastOverrideResponse>> {
            const forecastOverridesBulkCreateProjectedForecastOverrideRequest: ForecastOverridesBulkCreateProjectedForecastOverrideRequest = {
                data: requestParameters.data
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.bulkCreateProjectedForecastOverride(requestParameters.companyId, requestParameters.locationId, forecastOverridesBulkCreateProjectedForecastOverrideRequest, requestParameters.xApiVersion, requestParameters.xCompanyGuid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Overrides many project sales intervals of 15 minutes or 1 hour. (In Development)
         * @summary Create Bulk Daily Projected Forecast Overrides
         * @param {ForecastOverridesApiBulkCreateProjectedSalesIntervalOverrideRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async bulkCreateProjectedSalesIntervalOverride(requestParameters: ForecastOverridesApiBulkCreateProjectedSalesIntervalOverrideRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const forecastOverridesBulkCreateProjectedSalesIntervalOverrideRequestInner: Array<ForecastOverridesBulkCreateProjectedSalesIntervalOverrideRequestInner> = requestParameters.requestBody;
            const localVarAxiosArgs = await localVarAxiosParamCreator.bulkCreateProjectedSalesIntervalOverride(requestParameters.companyId, requestParameters.locationId, requestParameters.xApiVersion, requestParameters.xCompanyGuid, forecastOverridesBulkCreateProjectedSalesIntervalOverrideRequestInner, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Create Daily Projected Forecast Override
         * @param {ForecastOverridesApiCreateDailyProjectedForecastOverrideRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createDailyProjectedForecastOverride(requestParameters: ForecastOverridesApiCreateDailyProjectedForecastOverrideRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ForecastOverridesCreateDailyProjectedForecastOverrideResponse>> {
            const forecastOverridesCreateDailyProjectedForecastOverrideRequest: ForecastOverridesCreateDailyProjectedForecastOverrideRequest = {
                department_id: requestParameters.department_id,
                date: requestParameters.date,
                value: requestParameters.value,
                report_type: requestParameters.report_type
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createDailyProjectedForecastOverride(requestParameters.companyId, requestParameters.locationId, requestParameters.xApiVersion, requestParameters.xCompanyGuid, forecastOverridesCreateDailyProjectedForecastOverrideRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Overrides the project sales interval of 15 minutes or 1 hour.
         * @summary Create Interval Projected Forecast Override
         * @param {ForecastOverridesApiOverrideIntervalRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async overrideInterval(requestParameters: ForecastOverridesApiOverrideIntervalRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const forecastOverridesOverrideIntervalRequest: ForecastOverridesOverrideIntervalRequest = {
                department_id: requestParameters.department_id,
                start: requestParameters.start,
                end: requestParameters.end,
                value: requestParameters.value,
                report_type: requestParameters.report_type
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.overrideInterval(requestParameters.companyId, requestParameters.locationId, requestParameters.xApiVersion, requestParameters.xCompanyGuid, forecastOverridesOverrideIntervalRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Sync Daily Projected Forecast Override
         * @param {ForecastOverridesApiSyncProjectedForecastOverrideRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async syncProjectedForecastOverride(requestParameters: ForecastOverridesApiSyncProjectedForecastOverrideRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const forecastOverridesSyncProjectedForecastOverrideRequest: ForecastOverridesSyncProjectedForecastOverrideRequest = {
                start_date: requestParameters.start_date,
                end_date: requestParameters.end_date,
                report_type: requestParameters.report_type
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.syncProjectedForecastOverride(requestParameters.companyId, requestParameters.locationId, requestParameters.xApiVersion, requestParameters.xCompanyGuid, forecastOverridesSyncProjectedForecastOverrideRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Syncs the overridden project sales interval of 15 minutes or 1 hour.
         * @summary Sync Interval Projected Forecast Override
         * @param {ForecastOverridesApiSyncProjectedSalesIntervalRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async syncProjectedSalesInterval(requestParameters: ForecastOverridesApiSyncProjectedSalesIntervalRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const forecastOverridesSyncProjectedSalesIntervalRequest: ForecastOverridesSyncProjectedSalesIntervalRequest = {
                start: requestParameters.start,
                end: requestParameters.end,
                report_type: requestParameters.report_type
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.syncProjectedSalesInterval(requestParameters.companyId, requestParameters.locationId, requestParameters.xApiVersion, requestParameters.xCompanyGuid, forecastOverridesSyncProjectedSalesIntervalRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ForecastOverridesApi - factory interface
 * @export
 */
export const ForecastOverridesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ForecastOverridesApiFp(configuration)
    return {
        /**
         * 
         * @summary Create Bulk Daily Projected Forecast Overrides
         * @param {ForecastOverridesApiBulkCreateProjectedForecastOverrideRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bulkCreateProjectedForecastOverride(requestParameters: ForecastOverridesApiBulkCreateProjectedForecastOverrideRequest, options?: AxiosRequestConfig): AxiosPromise<ForecastOverridesBulkCreateProjectedForecastOverrideResponse> {
            return localVarFp.bulkCreateProjectedForecastOverride(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Overrides many project sales intervals of 15 minutes or 1 hour. (In Development)
         * @summary Create Bulk Daily Projected Forecast Overrides
         * @param {ForecastOverridesApiBulkCreateProjectedSalesIntervalOverrideRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bulkCreateProjectedSalesIntervalOverride(requestParameters: ForecastOverridesApiBulkCreateProjectedSalesIntervalOverrideRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.bulkCreateProjectedSalesIntervalOverride(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create Daily Projected Forecast Override
         * @param {ForecastOverridesApiCreateDailyProjectedForecastOverrideRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDailyProjectedForecastOverride(requestParameters: ForecastOverridesApiCreateDailyProjectedForecastOverrideRequest, options?: AxiosRequestConfig): AxiosPromise<ForecastOverridesCreateDailyProjectedForecastOverrideResponse> {
            return localVarFp.createDailyProjectedForecastOverride(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Overrides the project sales interval of 15 minutes or 1 hour.
         * @summary Create Interval Projected Forecast Override
         * @param {ForecastOverridesApiOverrideIntervalRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        overrideInterval(requestParameters: ForecastOverridesApiOverrideIntervalRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.overrideInterval(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Sync Daily Projected Forecast Override
         * @param {ForecastOverridesApiSyncProjectedForecastOverrideRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        syncProjectedForecastOverride(requestParameters: ForecastOverridesApiSyncProjectedForecastOverrideRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.syncProjectedForecastOverride(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Syncs the overridden project sales interval of 15 minutes or 1 hour.
         * @summary Sync Interval Projected Forecast Override
         * @param {ForecastOverridesApiSyncProjectedSalesIntervalRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        syncProjectedSalesInterval(requestParameters: ForecastOverridesApiSyncProjectedSalesIntervalRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.syncProjectedSalesInterval(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for bulkCreateProjectedForecastOverride operation in ForecastOverridesApi.
 * @export
 * @interface ForecastOverridesApiBulkCreateProjectedForecastOverrideRequest
 */
export type ForecastOverridesApiBulkCreateProjectedForecastOverrideRequest = {
    
    /**
    * Company ID
    * @type {number}
    * @memberof ForecastOverridesApiBulkCreateProjectedForecastOverride
    */
    readonly companyId: number
    
    /**
    * Location ID
    * @type {number}
    * @memberof ForecastOverridesApiBulkCreateProjectedForecastOverride
    */
    readonly locationId: number
    
    /**
    * 7shifts API version
    * @type {string}
    * @memberof ForecastOverridesApiBulkCreateProjectedForecastOverride
    */
    readonly xApiVersion?: string
    
    /**
    * Company GUID
    * @type {string}
    * @memberof ForecastOverridesApiBulkCreateProjectedForecastOverride
    */
    readonly xCompanyGuid?: string
    
} & ForecastOverridesBulkCreateProjectedForecastOverrideRequest

/**
 * Request parameters for bulkCreateProjectedSalesIntervalOverride operation in ForecastOverridesApi.
 * @export
 * @interface ForecastOverridesApiBulkCreateProjectedSalesIntervalOverrideRequest
 */
export type ForecastOverridesApiBulkCreateProjectedSalesIntervalOverrideRequest = {
    /**
    * Company ID
    * @type {number}
    * @memberof ForecastOverridesApiBulkCreateProjectedSalesIntervalOverride
    */
    readonly companyId: number
    /**
    * Location ID
    * @type {number}
    * @memberof ForecastOverridesApiBulkCreateProjectedSalesIntervalOverride
    */
    readonly locationId: number
    /**
    * 7shifts API version
    * @type {string}
    * @memberof ForecastOverridesApiBulkCreateProjectedSalesIntervalOverride
    */
    readonly xApiVersion?: string
    /**
    * Company GUID
    * @type {string}
    * @memberof ForecastOverridesApiBulkCreateProjectedSalesIntervalOverride
    */
    readonly xCompanyGuid?: string
    /**
    * 
    * @type {Array<ForecastOverridesBulkCreateProjectedSalesIntervalOverrideRequestInner>}
    * @memberof ForecastOverridesApiBulkCreateProjectedSalesIntervalOverride
    */
    readonly requestBody?: Array<ForecastOverridesBulkCreateProjectedSalesIntervalOverrideRequestInner>
}

/**
 * Request parameters for createDailyProjectedForecastOverride operation in ForecastOverridesApi.
 * @export
 * @interface ForecastOverridesApiCreateDailyProjectedForecastOverrideRequest
 */
export type ForecastOverridesApiCreateDailyProjectedForecastOverrideRequest = {
    
    /**
    * Company ID
    * @type {number}
    * @memberof ForecastOverridesApiCreateDailyProjectedForecastOverride
    */
    readonly companyId: number
    
    /**
    * Location ID
    * @type {number}
    * @memberof ForecastOverridesApiCreateDailyProjectedForecastOverride
    */
    readonly locationId: number
    
    /**
    * 7shifts API version
    * @type {string}
    * @memberof ForecastOverridesApiCreateDailyProjectedForecastOverride
    */
    readonly xApiVersion?: string
    
    /**
    * Company GUID
    * @type {string}
    * @memberof ForecastOverridesApiCreateDailyProjectedForecastOverride
    */
    readonly xCompanyGuid?: string
    
} & ForecastOverridesCreateDailyProjectedForecastOverrideRequest

/**
 * Request parameters for overrideInterval operation in ForecastOverridesApi.
 * @export
 * @interface ForecastOverridesApiOverrideIntervalRequest
 */
export type ForecastOverridesApiOverrideIntervalRequest = {
    
    /**
    * Company ID
    * @type {number}
    * @memberof ForecastOverridesApiOverrideInterval
    */
    readonly companyId: number
    
    /**
    * Location ID
    * @type {number}
    * @memberof ForecastOverridesApiOverrideInterval
    */
    readonly locationId: number
    
    /**
    * 7shifts API version
    * @type {string}
    * @memberof ForecastOverridesApiOverrideInterval
    */
    readonly xApiVersion?: string
    
    /**
    * Company GUID
    * @type {string}
    * @memberof ForecastOverridesApiOverrideInterval
    */
    readonly xCompanyGuid?: string
    
} & ForecastOverridesOverrideIntervalRequest

/**
 * Request parameters for syncProjectedForecastOverride operation in ForecastOverridesApi.
 * @export
 * @interface ForecastOverridesApiSyncProjectedForecastOverrideRequest
 */
export type ForecastOverridesApiSyncProjectedForecastOverrideRequest = {
    
    /**
    * Company ID
    * @type {number}
    * @memberof ForecastOverridesApiSyncProjectedForecastOverride
    */
    readonly companyId: number
    
    /**
    * Location ID
    * @type {number}
    * @memberof ForecastOverridesApiSyncProjectedForecastOverride
    */
    readonly locationId: number
    
    /**
    * 7shifts API version
    * @type {string}
    * @memberof ForecastOverridesApiSyncProjectedForecastOverride
    */
    readonly xApiVersion?: string
    
    /**
    * Company GUID
    * @type {string}
    * @memberof ForecastOverridesApiSyncProjectedForecastOverride
    */
    readonly xCompanyGuid?: string
    
} & ForecastOverridesSyncProjectedForecastOverrideRequest

/**
 * Request parameters for syncProjectedSalesInterval operation in ForecastOverridesApi.
 * @export
 * @interface ForecastOverridesApiSyncProjectedSalesIntervalRequest
 */
export type ForecastOverridesApiSyncProjectedSalesIntervalRequest = {
    
    /**
    * Company ID
    * @type {number}
    * @memberof ForecastOverridesApiSyncProjectedSalesInterval
    */
    readonly companyId: number
    
    /**
    * Location ID
    * @type {number}
    * @memberof ForecastOverridesApiSyncProjectedSalesInterval
    */
    readonly locationId: number
    
    /**
    * 7shifts API version
    * @type {string}
    * @memberof ForecastOverridesApiSyncProjectedSalesInterval
    */
    readonly xApiVersion?: string
    
    /**
    * Company GUID
    * @type {string}
    * @memberof ForecastOverridesApiSyncProjectedSalesInterval
    */
    readonly xCompanyGuid?: string
    
} & ForecastOverridesSyncProjectedSalesIntervalRequest

/**
 * ForecastOverridesApiGenerated - object-oriented interface
 * @export
 * @class ForecastOverridesApiGenerated
 * @extends {BaseAPI}
 */
export class ForecastOverridesApiGenerated extends BaseAPI {
    /**
     * 
     * @summary Create Bulk Daily Projected Forecast Overrides
     * @param {ForecastOverridesApiBulkCreateProjectedForecastOverrideRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ForecastOverridesApiGenerated
     */
    public bulkCreateProjectedForecastOverride(requestParameters: ForecastOverridesApiBulkCreateProjectedForecastOverrideRequest, options?: AxiosRequestConfig) {
        return ForecastOverridesApiFp(this.configuration).bulkCreateProjectedForecastOverride(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Overrides many project sales intervals of 15 minutes or 1 hour. (In Development)
     * @summary Create Bulk Daily Projected Forecast Overrides
     * @param {ForecastOverridesApiBulkCreateProjectedSalesIntervalOverrideRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ForecastOverridesApiGenerated
     */
    public bulkCreateProjectedSalesIntervalOverride(requestParameters: ForecastOverridesApiBulkCreateProjectedSalesIntervalOverrideRequest, options?: AxiosRequestConfig) {
        return ForecastOverridesApiFp(this.configuration).bulkCreateProjectedSalesIntervalOverride(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create Daily Projected Forecast Override
     * @param {ForecastOverridesApiCreateDailyProjectedForecastOverrideRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ForecastOverridesApiGenerated
     */
    public createDailyProjectedForecastOverride(requestParameters: ForecastOverridesApiCreateDailyProjectedForecastOverrideRequest, options?: AxiosRequestConfig) {
        return ForecastOverridesApiFp(this.configuration).createDailyProjectedForecastOverride(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Overrides the project sales interval of 15 minutes or 1 hour.
     * @summary Create Interval Projected Forecast Override
     * @param {ForecastOverridesApiOverrideIntervalRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ForecastOverridesApiGenerated
     */
    public overrideInterval(requestParameters: ForecastOverridesApiOverrideIntervalRequest, options?: AxiosRequestConfig) {
        return ForecastOverridesApiFp(this.configuration).overrideInterval(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Sync Daily Projected Forecast Override
     * @param {ForecastOverridesApiSyncProjectedForecastOverrideRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ForecastOverridesApiGenerated
     */
    public syncProjectedForecastOverride(requestParameters: ForecastOverridesApiSyncProjectedForecastOverrideRequest, options?: AxiosRequestConfig) {
        return ForecastOverridesApiFp(this.configuration).syncProjectedForecastOverride(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Syncs the overridden project sales interval of 15 minutes or 1 hour.
     * @summary Sync Interval Projected Forecast Override
     * @param {ForecastOverridesApiSyncProjectedSalesIntervalRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ForecastOverridesApiGenerated
     */
    public syncProjectedSalesInterval(requestParameters: ForecastOverridesApiSyncProjectedSalesIntervalRequest, options?: AxiosRequestConfig) {
        return ForecastOverridesApiFp(this.configuration).syncProjectedSalesInterval(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
