/* tslint:disable */
/* eslint-disable */
/*
7shifts API

7shifts is a team management software designed for restaurants. We help managers and operators spend less time and effort scheduling their staff, reduce their monthly labor costs and improve team communication. The result is simplified team management, one shift at a time.

7shifts also offers free mobile apps (iOS and Android) allowing managers and employees to have everything at their fingertips.

Start your free trial or request a demo at www.7shifts.com.

The version of the OpenAPI document: 2023-05-01
Contact: api-support@7shifts.com

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { LogBookCreateCategory400Response } from '../models';
// @ts-ignore
import { LogBookCreateCategory401Response } from '../models';
// @ts-ignore
import { LogBookCreateCategory403Response } from '../models';
// @ts-ignore
import { LogBookCreateCategory500Response } from '../models';
// @ts-ignore
import { LogBookCreateCategoryRequest } from '../models';
// @ts-ignore
import { LogBookCreateCategoryResponse } from '../models';
// @ts-ignore
import { LogBookCreateComment401Response } from '../models';
// @ts-ignore
import { LogBookCreateComment403Response } from '../models';
// @ts-ignore
import { LogBookCreateComment422Response } from '../models';
// @ts-ignore
import { LogBookCreateComment500Response } from '../models';
// @ts-ignore
import { LogBookCreateCommentRequest } from '../models';
// @ts-ignore
import { LogBookCreateCommentResponse } from '../models';
// @ts-ignore
import { LogBookCreatePost401Response } from '../models';
// @ts-ignore
import { LogBookCreatePost403Response } from '../models';
// @ts-ignore
import { LogBookCreatePost422Response } from '../models';
// @ts-ignore
import { LogBookCreatePost500Response } from '../models';
// @ts-ignore
import { LogBookCreatePostRequest } from '../models';
// @ts-ignore
import { LogBookCreatePostRequestAttachmentsInner } from '../models';
// @ts-ignore
import { LogBookCreatePostResponse } from '../models';
// @ts-ignore
import { LogBookDeleteCategoryById403Response } from '../models';
// @ts-ignore
import { LogBookDeleteCategoryById404Response } from '../models';
// @ts-ignore
import { LogBookDeleteCategoryById500Response } from '../models';
// @ts-ignore
import { LogBookDeleteCategoryByIdResponse } from '../models';
// @ts-ignore
import { LogBookDeleteComment403Response } from '../models';
// @ts-ignore
import { LogBookDeleteComment404Response } from '../models';
// @ts-ignore
import { LogBookDeleteComment500Response } from '../models';
// @ts-ignore
import { LogBookDeleteCommentResponse } from '../models';
// @ts-ignore
import { LogBookDeletePost403Response } from '../models';
// @ts-ignore
import { LogBookDeletePost404Response } from '../models';
// @ts-ignore
import { LogBookDeletePost500Response } from '../models';
// @ts-ignore
import { LogBookDeletePostResponse } from '../models';
// @ts-ignore
import { LogBookGetComment401Response } from '../models';
// @ts-ignore
import { LogBookGetComment403Response } from '../models';
// @ts-ignore
import { LogBookGetComment404Response } from '../models';
// @ts-ignore
import { LogBookGetComment500Response } from '../models';
// @ts-ignore
import { LogBookGetCommentResponse } from '../models';
// @ts-ignore
import { LogBookGetPost401Response } from '../models';
// @ts-ignore
import { LogBookGetPost403Response } from '../models';
// @ts-ignore
import { LogBookGetPost404Response } from '../models';
// @ts-ignore
import { LogBookGetPost500Response } from '../models';
// @ts-ignore
import { LogBookGetPostResponse } from '../models';
// @ts-ignore
import { LogBookListCategories401Response } from '../models';
// @ts-ignore
import { LogBookListCategories403Response } from '../models';
// @ts-ignore
import { LogBookListCategories500Response } from '../models';
// @ts-ignore
import { LogBookListCategoriesResponse } from '../models';
// @ts-ignore
import { LogBookListComments400Response } from '../models';
// @ts-ignore
import { LogBookListComments401Response } from '../models';
// @ts-ignore
import { LogBookListComments403Response } from '../models';
// @ts-ignore
import { LogBookListComments500Response } from '../models';
// @ts-ignore
import { LogBookListCommentsResponse } from '../models';
// @ts-ignore
import { LogBookListPosts401Response } from '../models';
// @ts-ignore
import { LogBookListPosts403Response } from '../models';
// @ts-ignore
import { LogBookListPosts500Response } from '../models';
// @ts-ignore
import { LogBookListPostsResponse } from '../models';
// @ts-ignore
import { LogBookUpdateCategoryById400Response } from '../models';
// @ts-ignore
import { LogBookUpdateCategoryById401Response } from '../models';
// @ts-ignore
import { LogBookUpdateCategoryById403Response } from '../models';
// @ts-ignore
import { LogBookUpdateCategoryById500Response } from '../models';
// @ts-ignore
import { LogBookUpdateCategoryByIdRequest } from '../models';
// @ts-ignore
import { LogBookUpdateCategoryByIdResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * LogBookApi - axios parameter creator
 * @export
 */
export const LogBookApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Beta
         * @summary Create Log Book Category
         * @param {number} companyId Company ID
         * @param {LogBookCreateCategoryRequest} logBookCreateCategoryRequest 
         * @param {string} [xApiVersion] 7shifts API version
         * @param {string} [xCompanyGuid] Company GUID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCategory: async (companyId: number, logBookCreateCategoryRequest: LogBookCreateCategoryRequest, xApiVersion?: string, xCompanyGuid?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('createCategory', 'companyId', companyId)
            // verify required parameter 'logBookCreateCategoryRequest' is not null or undefined
            assertParamExists('createCategory', 'logBookCreateCategoryRequest', logBookCreateCategoryRequest)
            const localVarPath = `/v2/company/{company_id}/log_book_categories`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId !== undefined ? companyId : `-company_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication cookieAuth required
            await setApiKeyToObject({object: localVarHeaderParameter, type: "Cookie", key: "Cookie", keyParamName: "7session", configuration})
            if (xApiVersion != null) {
                localVarHeaderParameter['x-api-version'] = String(xApiVersion);
            }

            if (xCompanyGuid != null) {
                localVarHeaderParameter['x-company-guid'] = String(xCompanyGuid);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: logBookCreateCategoryRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/company/{company_id}/log_book_categories',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(logBookCreateCategoryRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Beta
         * @summary Create Log Book Comment
         * @param {number} companyId Company ID
         * @param {LogBookCreateCommentRequest} logBookCreateCommentRequest 
         * @param {string} [xApiVersion] 7shifts API version
         * @param {string} [xCompanyGuid] Company GUID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createComment: async (companyId: number, logBookCreateCommentRequest: LogBookCreateCommentRequest, xApiVersion?: string, xCompanyGuid?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('createComment', 'companyId', companyId)
            // verify required parameter 'logBookCreateCommentRequest' is not null or undefined
            assertParamExists('createComment', 'logBookCreateCommentRequest', logBookCreateCommentRequest)
            const localVarPath = `/v2/company/{company_id}/log_book_comments`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId !== undefined ? companyId : `-company_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication cookieAuth required
            await setApiKeyToObject({object: localVarHeaderParameter, type: "Cookie", key: "Cookie", keyParamName: "7session", configuration})
            if (xApiVersion != null) {
                localVarHeaderParameter['x-api-version'] = String(xApiVersion);
            }

            if (xCompanyGuid != null) {
                localVarHeaderParameter['x-company-guid'] = String(xCompanyGuid);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: logBookCreateCommentRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/company/{company_id}/log_book_comments',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(logBookCreateCommentRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Beta
         * @summary Create Log Book Post
         * @param {number} companyId Company ID
         * @param {LogBookCreatePostRequest} logBookCreatePostRequest 
         * @param {string} [xApiVersion] 7shifts API version
         * @param {string} [xCompanyGuid] Company GUID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPost: async (companyId: number, logBookCreatePostRequest: LogBookCreatePostRequest, xApiVersion?: string, xCompanyGuid?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('createPost', 'companyId', companyId)
            // verify required parameter 'logBookCreatePostRequest' is not null or undefined
            assertParamExists('createPost', 'logBookCreatePostRequest', logBookCreatePostRequest)
            const localVarPath = `/v2/company/{company_id}/log_book_posts`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId !== undefined ? companyId : `-company_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication cookieAuth required
            await setApiKeyToObject({object: localVarHeaderParameter, type: "Cookie", key: "Cookie", keyParamName: "7session", configuration})
            if (xApiVersion != null) {
                localVarHeaderParameter['x-api-version'] = String(xApiVersion);
            }

            if (xCompanyGuid != null) {
                localVarHeaderParameter['x-company-guid'] = String(xCompanyGuid);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: logBookCreatePostRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/company/{company_id}/log_book_posts',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(logBookCreatePostRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Beta
         * @summary Delete Log Book Category
         * @param {number} companyId Company ID
         * @param {number} id Category ID
         * @param {string} [xApiVersion] 7shifts API version
         * @param {string} [xCompanyGuid] Company GUID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCategoryById: async (companyId: number, id: number, xApiVersion?: string, xCompanyGuid?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('deleteCategoryById', 'companyId', companyId)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteCategoryById', 'id', id)
            const localVarPath = `/v2/company/{company_id}/log_book_categories/{id}`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId !== undefined ? companyId : `-company_id-`)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication cookieAuth required
            await setApiKeyToObject({object: localVarHeaderParameter, type: "Cookie", key: "Cookie", keyParamName: "7session", configuration})
            if (xApiVersion != null) {
                localVarHeaderParameter['x-api-version'] = String(xApiVersion);
            }

            if (xCompanyGuid != null) {
                localVarHeaderParameter['x-company-guid'] = String(xCompanyGuid);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/company/{company_id}/log_book_categories/{id}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Beta
         * @summary Delete Log Book Comment
         * @param {number} companyId Company ID
         * @param {number} id Log Book Comment ID
         * @param {string} [xApiVersion] 7shifts API version
         * @param {string} [xCompanyGuid] Company GUID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteComment: async (companyId: number, id: number, xApiVersion?: string, xCompanyGuid?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('deleteComment', 'companyId', companyId)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteComment', 'id', id)
            const localVarPath = `/v2/company/{company_id}/log_book_comments/{id}`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId !== undefined ? companyId : `-company_id-`)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication cookieAuth required
            await setApiKeyToObject({object: localVarHeaderParameter, type: "Cookie", key: "Cookie", keyParamName: "7session", configuration})
            if (xApiVersion != null) {
                localVarHeaderParameter['x-api-version'] = String(xApiVersion);
            }

            if (xCompanyGuid != null) {
                localVarHeaderParameter['x-company-guid'] = String(xCompanyGuid);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/company/{company_id}/log_book_comments/{id}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Beta
         * @summary Delete Log Book Post
         * @param {number} companyId Company ID
         * @param {number} id Log Book Post ID
         * @param {string} [xApiVersion] 7shifts API version
         * @param {string} [xCompanyGuid] Company GUID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePost: async (companyId: number, id: number, xApiVersion?: string, xCompanyGuid?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('deletePost', 'companyId', companyId)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deletePost', 'id', id)
            const localVarPath = `/v2/company/{company_id}/log_book_posts/{id}`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId !== undefined ? companyId : `-company_id-`)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication cookieAuth required
            await setApiKeyToObject({object: localVarHeaderParameter, type: "Cookie", key: "Cookie", keyParamName: "7session", configuration})
            if (xApiVersion != null) {
                localVarHeaderParameter['x-api-version'] = String(xApiVersion);
            }

            if (xCompanyGuid != null) {
                localVarHeaderParameter['x-company-guid'] = String(xCompanyGuid);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/company/{company_id}/log_book_posts/{id}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Beta
         * @summary Retrieve Log Book Comment
         * @param {number} companyId Company ID
         * @param {number} id Log Book Comment ID
         * @param {string} [xApiVersion] 7shifts API version
         * @param {string} [xCompanyGuid] Company GUID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getComment: async (companyId: number, id: number, xApiVersion?: string, xCompanyGuid?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('getComment', 'companyId', companyId)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getComment', 'id', id)
            const localVarPath = `/v2/company/{company_id}/log_book_comments/{id}`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId !== undefined ? companyId : `-company_id-`)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication cookieAuth required
            await setApiKeyToObject({object: localVarHeaderParameter, type: "Cookie", key: "Cookie", keyParamName: "7session", configuration})
            if (xApiVersion != null) {
                localVarHeaderParameter['x-api-version'] = String(xApiVersion);
            }

            if (xCompanyGuid != null) {
                localVarHeaderParameter['x-company-guid'] = String(xCompanyGuid);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/company/{company_id}/log_book_comments/{id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Beta
         * @summary Retrieve Log Book Post
         * @param {number} companyId Company ID
         * @param {number} id Log Book Post ID
         * @param {string} [xApiVersion] 7shifts API version
         * @param {string} [xCompanyGuid] Company GUID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPost: async (companyId: number, id: number, xApiVersion?: string, xCompanyGuid?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('getPost', 'companyId', companyId)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getPost', 'id', id)
            const localVarPath = `/v2/company/{company_id}/log_book_posts/{id}`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId !== undefined ? companyId : `-company_id-`)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication cookieAuth required
            await setApiKeyToObject({object: localVarHeaderParameter, type: "Cookie", key: "Cookie", keyParamName: "7session", configuration})
            if (xApiVersion != null) {
                localVarHeaderParameter['x-api-version'] = String(xApiVersion);
            }

            if (xCompanyGuid != null) {
                localVarHeaderParameter['x-company-guid'] = String(xCompanyGuid);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/company/{company_id}/log_book_posts/{id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Beta
         * @summary List Log Book Categories
         * @param {number} companyId Company ID
         * @param {string} [xApiVersion] 7shifts API version
         * @param {string} [xCompanyGuid] Company GUID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCategories: async (companyId: number, xApiVersion?: string, xCompanyGuid?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('listCategories', 'companyId', companyId)
            const localVarPath = `/v2/company/{company_id}/log_book_categories`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId !== undefined ? companyId : `-company_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication cookieAuth required
            await setApiKeyToObject({object: localVarHeaderParameter, type: "Cookie", key: "Cookie", keyParamName: "7session", configuration})
            if (xApiVersion != null) {
                localVarHeaderParameter['x-api-version'] = String(xApiVersion);
            }

            if (xCompanyGuid != null) {
                localVarHeaderParameter['x-company-guid'] = String(xCompanyGuid);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/company/{company_id}/log_book_categories',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Beta
         * @summary List Log Book Comments
         * @param {number} companyId Company ID
         * @param {Array<number>} logBookIds Log book post id associated with log book comments
         * @param {string} [xApiVersion] 7shifts API version
         * @param {string} [xCompanyGuid] Company GUID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listComments: async (companyId: number, logBookIds: Array<number>, xApiVersion?: string, xCompanyGuid?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('listComments', 'companyId', companyId)
            // verify required parameter 'logBookIds' is not null or undefined
            assertParamExists('listComments', 'logBookIds', logBookIds)
            const localVarPath = `/v2/company/{company_id}/log_book_comments`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId !== undefined ? companyId : `-company_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication cookieAuth required
            await setApiKeyToObject({object: localVarHeaderParameter, type: "Cookie", key: "Cookie", keyParamName: "7session", configuration})
            if (logBookIds) {
                localVarQueryParameter['log_book_ids'] = logBookIds.join(COLLECTION_FORMATS.csv);
            }

            if (xApiVersion != null) {
                localVarHeaderParameter['x-api-version'] = String(xApiVersion);
            }

            if (xCompanyGuid != null) {
                localVarHeaderParameter['x-company-guid'] = String(xCompanyGuid);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/company/{company_id}/log_book_comments',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Beta
         * @summary List Log Book Posts
         * @param {number} companyId Company ID
         * @param {string} [xApiVersion] 7shifts API version
         * @param {string} [xCompanyGuid] Company GUID
         * @param {number} [locationId] Location ID
         * @param {number} [logBookCategoryId] Log Book Category ID
         * @param {number} [userId] Post Author User ID
         * @param {string} [date] Date of log book creation, format YYYY-MM-DD
         * @param {string} [postedDateGte] List only log book posts from dates inclusive after, format YYYY-MM-DD
         * @param {string} [postedDateLte] List only log book posts from dates inclusive before, format YYYY-MM-DD
         * @param {string} [message] List only posts containing the message
         * @param {'date' | 'id'} [orderField] Order listed log book posts by a field
         * @param {'asc' | 'desc'} [orderDir] Specified direction to order listed log book posts
         * @param {string} [cursor] Cursor for the next or previous page of results.
         * @param {number} [limit] The number of results desired per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPosts: async (companyId: number, xApiVersion?: string, xCompanyGuid?: string, locationId?: number, logBookCategoryId?: number, userId?: number, date?: string, postedDateGte?: string, postedDateLte?: string, message?: string, orderField?: 'date' | 'id', orderDir?: 'asc' | 'desc', cursor?: string, limit?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('listPosts', 'companyId', companyId)
            const localVarPath = `/v2/company/{company_id}/log_book_posts`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId !== undefined ? companyId : `-company_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication cookieAuth required
            await setApiKeyToObject({object: localVarHeaderParameter, type: "Cookie", key: "Cookie", keyParamName: "7session", configuration})
            if (locationId !== undefined) {
                localVarQueryParameter['location_id'] = locationId;
            }

            if (logBookCategoryId !== undefined) {
                localVarQueryParameter['log_book_category_id'] = logBookCategoryId;
            }

            if (userId !== undefined) {
                localVarQueryParameter['user_id'] = userId;
            }

            if (date !== undefined) {
                localVarQueryParameter['date'] = date;
            }

            if (postedDateGte !== undefined) {
                localVarQueryParameter['posted_date_gte'] = postedDateGte;
            }

            if (postedDateLte !== undefined) {
                localVarQueryParameter['posted_date_lte'] = postedDateLte;
            }

            if (message !== undefined) {
                localVarQueryParameter['message'] = message;
            }

            if (orderField !== undefined) {
                localVarQueryParameter['order_field'] = orderField;
            }

            if (orderDir !== undefined) {
                localVarQueryParameter['order_dir'] = orderDir;
            }

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (xApiVersion != null) {
                localVarHeaderParameter['x-api-version'] = String(xApiVersion);
            }

            if (xCompanyGuid != null) {
                localVarHeaderParameter['x-company-guid'] = String(xCompanyGuid);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/company/{company_id}/log_book_posts',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Beta
         * @summary Update Log Book Category
         * @param {number} companyId Company ID
         * @param {number} id Category ID
         * @param {LogBookUpdateCategoryByIdRequest} logBookUpdateCategoryByIdRequest 
         * @param {string} [xApiVersion] 7shifts API version
         * @param {string} [xCompanyGuid] Company GUID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCategoryById: async (companyId: number, id: number, logBookUpdateCategoryByIdRequest: LogBookUpdateCategoryByIdRequest, xApiVersion?: string, xCompanyGuid?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('updateCategoryById', 'companyId', companyId)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateCategoryById', 'id', id)
            // verify required parameter 'logBookUpdateCategoryByIdRequest' is not null or undefined
            assertParamExists('updateCategoryById', 'logBookUpdateCategoryByIdRequest', logBookUpdateCategoryByIdRequest)
            const localVarPath = `/v2/company/{company_id}/log_book_categories/{id}`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId !== undefined ? companyId : `-company_id-`)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication cookieAuth required
            await setApiKeyToObject({object: localVarHeaderParameter, type: "Cookie", key: "Cookie", keyParamName: "7session", configuration})
            if (xApiVersion != null) {
                localVarHeaderParameter['x-api-version'] = String(xApiVersion);
            }

            if (xCompanyGuid != null) {
                localVarHeaderParameter['x-company-guid'] = String(xCompanyGuid);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: logBookUpdateCategoryByIdRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/company/{company_id}/log_book_categories/{id}',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(logBookUpdateCategoryByIdRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LogBookApi - functional programming interface
 * @export
 */
export const LogBookApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = LogBookApiAxiosParamCreator(configuration)
    return {
        /**
         * Beta
         * @summary Create Log Book Category
         * @param {LogBookApiCreateCategoryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createCategory(requestParameters: LogBookApiCreateCategoryRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LogBookCreateCategoryResponse>> {
            const logBookCreateCategoryRequest: LogBookCreateCategoryRequest = {
                name: requestParameters.name,
                col: requestParameters.col,
                sort: requestParameters.sort,
                field_type: requestParameters.field_type,
                notify: requestParameters.notify,
                required: requestParameters.required
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createCategory(requestParameters.companyId, logBookCreateCategoryRequest, requestParameters.xApiVersion, requestParameters.xCompanyGuid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Beta
         * @summary Create Log Book Comment
         * @param {LogBookApiCreateCommentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createComment(requestParameters: LogBookApiCreateCommentRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LogBookCreateCommentResponse>> {
            const logBookCreateCommentRequest: LogBookCreateCommentRequest = {
                log_book_id: requestParameters.log_book_id,
                message: requestParameters.message
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createComment(requestParameters.companyId, logBookCreateCommentRequest, requestParameters.xApiVersion, requestParameters.xCompanyGuid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Beta
         * @summary Create Log Book Post
         * @param {LogBookApiCreatePostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createPost(requestParameters: LogBookApiCreatePostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LogBookCreatePostResponse>> {
            const logBookCreatePostRequest: LogBookCreatePostRequest = {
                location_id: requestParameters.location_id,
                log_book_category_id: requestParameters.log_book_category_id,
                date: requestParameters.date,
                message: requestParameters.message,
                attachments: requestParameters.attachments
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createPost(requestParameters.companyId, logBookCreatePostRequest, requestParameters.xApiVersion, requestParameters.xCompanyGuid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Beta
         * @summary Delete Log Book Category
         * @param {LogBookApiDeleteCategoryByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteCategoryById(requestParameters: LogBookApiDeleteCategoryByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteCategoryById(requestParameters.companyId, requestParameters.id, requestParameters.xApiVersion, requestParameters.xCompanyGuid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Beta
         * @summary Delete Log Book Comment
         * @param {LogBookApiDeleteCommentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteComment(requestParameters: LogBookApiDeleteCommentRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteComment(requestParameters.companyId, requestParameters.id, requestParameters.xApiVersion, requestParameters.xCompanyGuid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Beta
         * @summary Delete Log Book Post
         * @param {LogBookApiDeletePostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deletePost(requestParameters: LogBookApiDeletePostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deletePost(requestParameters.companyId, requestParameters.id, requestParameters.xApiVersion, requestParameters.xCompanyGuid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Beta
         * @summary Retrieve Log Book Comment
         * @param {LogBookApiGetCommentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getComment(requestParameters: LogBookApiGetCommentRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LogBookGetCommentResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getComment(requestParameters.companyId, requestParameters.id, requestParameters.xApiVersion, requestParameters.xCompanyGuid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Beta
         * @summary Retrieve Log Book Post
         * @param {LogBookApiGetPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPost(requestParameters: LogBookApiGetPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LogBookGetPostResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPost(requestParameters.companyId, requestParameters.id, requestParameters.xApiVersion, requestParameters.xCompanyGuid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Beta
         * @summary List Log Book Categories
         * @param {LogBookApiListCategoriesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listCategories(requestParameters: LogBookApiListCategoriesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LogBookListCategoriesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listCategories(requestParameters.companyId, requestParameters.xApiVersion, requestParameters.xCompanyGuid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Beta
         * @summary List Log Book Comments
         * @param {LogBookApiListCommentsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listComments(requestParameters: LogBookApiListCommentsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LogBookListCommentsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listComments(requestParameters.companyId, requestParameters.logBookIds, requestParameters.xApiVersion, requestParameters.xCompanyGuid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Beta
         * @summary List Log Book Posts
         * @param {LogBookApiListPostsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listPosts(requestParameters: LogBookApiListPostsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LogBookListPostsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listPosts(requestParameters.companyId, requestParameters.xApiVersion, requestParameters.xCompanyGuid, requestParameters.locationId, requestParameters.logBookCategoryId, requestParameters.userId, requestParameters.date, requestParameters.postedDateGte, requestParameters.postedDateLte, requestParameters.message, requestParameters.orderField, requestParameters.orderDir, requestParameters.cursor, requestParameters.limit, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Beta
         * @summary Update Log Book Category
         * @param {LogBookApiUpdateCategoryByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateCategoryById(requestParameters: LogBookApiUpdateCategoryByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LogBookUpdateCategoryByIdResponse>> {
            const logBookUpdateCategoryByIdRequest: LogBookUpdateCategoryByIdRequest = {
                name: requestParameters.name,
                col: requestParameters.col,
                sort: requestParameters.sort,
                field_type: requestParameters.field_type,
                notify: requestParameters.notify,
                required: requestParameters.required
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateCategoryById(requestParameters.companyId, requestParameters.id, logBookUpdateCategoryByIdRequest, requestParameters.xApiVersion, requestParameters.xCompanyGuid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * LogBookApi - factory interface
 * @export
 */
export const LogBookApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = LogBookApiFp(configuration)
    return {
        /**
         * Beta
         * @summary Create Log Book Category
         * @param {LogBookApiCreateCategoryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCategory(requestParameters: LogBookApiCreateCategoryRequest, options?: AxiosRequestConfig): AxiosPromise<LogBookCreateCategoryResponse> {
            return localVarFp.createCategory(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Beta
         * @summary Create Log Book Comment
         * @param {LogBookApiCreateCommentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createComment(requestParameters: LogBookApiCreateCommentRequest, options?: AxiosRequestConfig): AxiosPromise<LogBookCreateCommentResponse> {
            return localVarFp.createComment(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Beta
         * @summary Create Log Book Post
         * @param {LogBookApiCreatePostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPost(requestParameters: LogBookApiCreatePostRequest, options?: AxiosRequestConfig): AxiosPromise<LogBookCreatePostResponse> {
            return localVarFp.createPost(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Beta
         * @summary Delete Log Book Category
         * @param {LogBookApiDeleteCategoryByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCategoryById(requestParameters: LogBookApiDeleteCategoryByIdRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteCategoryById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Beta
         * @summary Delete Log Book Comment
         * @param {LogBookApiDeleteCommentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteComment(requestParameters: LogBookApiDeleteCommentRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteComment(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Beta
         * @summary Delete Log Book Post
         * @param {LogBookApiDeletePostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePost(requestParameters: LogBookApiDeletePostRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deletePost(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Beta
         * @summary Retrieve Log Book Comment
         * @param {LogBookApiGetCommentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getComment(requestParameters: LogBookApiGetCommentRequest, options?: AxiosRequestConfig): AxiosPromise<LogBookGetCommentResponse> {
            return localVarFp.getComment(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Beta
         * @summary Retrieve Log Book Post
         * @param {LogBookApiGetPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPost(requestParameters: LogBookApiGetPostRequest, options?: AxiosRequestConfig): AxiosPromise<LogBookGetPostResponse> {
            return localVarFp.getPost(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Beta
         * @summary List Log Book Categories
         * @param {LogBookApiListCategoriesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCategories(requestParameters: LogBookApiListCategoriesRequest, options?: AxiosRequestConfig): AxiosPromise<LogBookListCategoriesResponse> {
            return localVarFp.listCategories(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Beta
         * @summary List Log Book Comments
         * @param {LogBookApiListCommentsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listComments(requestParameters: LogBookApiListCommentsRequest, options?: AxiosRequestConfig): AxiosPromise<LogBookListCommentsResponse> {
            return localVarFp.listComments(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Beta
         * @summary List Log Book Posts
         * @param {LogBookApiListPostsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPosts(requestParameters: LogBookApiListPostsRequest, options?: AxiosRequestConfig): AxiosPromise<LogBookListPostsResponse> {
            return localVarFp.listPosts(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Beta
         * @summary Update Log Book Category
         * @param {LogBookApiUpdateCategoryByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCategoryById(requestParameters: LogBookApiUpdateCategoryByIdRequest, options?: AxiosRequestConfig): AxiosPromise<LogBookUpdateCategoryByIdResponse> {
            return localVarFp.updateCategoryById(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createCategory operation in LogBookApi.
 * @export
 * @interface LogBookApiCreateCategoryRequest
 */
export type LogBookApiCreateCategoryRequest = {
    
    /**
    * Company ID
    * @type {number}
    * @memberof LogBookApiCreateCategory
    */
    readonly companyId: number
    
    /**
    * 7shifts API version
    * @type {string}
    * @memberof LogBookApiCreateCategory
    */
    readonly xApiVersion?: string
    
    /**
    * Company GUID
    * @type {string}
    * @memberof LogBookApiCreateCategory
    */
    readonly xCompanyGuid?: string
    
} & LogBookCreateCategoryRequest

/**
 * Request parameters for createComment operation in LogBookApi.
 * @export
 * @interface LogBookApiCreateCommentRequest
 */
export type LogBookApiCreateCommentRequest = {
    
    /**
    * Company ID
    * @type {number}
    * @memberof LogBookApiCreateComment
    */
    readonly companyId: number
    
    /**
    * 7shifts API version
    * @type {string}
    * @memberof LogBookApiCreateComment
    */
    readonly xApiVersion?: string
    
    /**
    * Company GUID
    * @type {string}
    * @memberof LogBookApiCreateComment
    */
    readonly xCompanyGuid?: string
    
} & LogBookCreateCommentRequest

/**
 * Request parameters for createPost operation in LogBookApi.
 * @export
 * @interface LogBookApiCreatePostRequest
 */
export type LogBookApiCreatePostRequest = {
    
    /**
    * Company ID
    * @type {number}
    * @memberof LogBookApiCreatePost
    */
    readonly companyId: number
    
    /**
    * 7shifts API version
    * @type {string}
    * @memberof LogBookApiCreatePost
    */
    readonly xApiVersion?: string
    
    /**
    * Company GUID
    * @type {string}
    * @memberof LogBookApiCreatePost
    */
    readonly xCompanyGuid?: string
    
} & LogBookCreatePostRequest

/**
 * Request parameters for deleteCategoryById operation in LogBookApi.
 * @export
 * @interface LogBookApiDeleteCategoryByIdRequest
 */
export type LogBookApiDeleteCategoryByIdRequest = {
    
    /**
    * Company ID
    * @type {number}
    * @memberof LogBookApiDeleteCategoryById
    */
    readonly companyId: number
    
    /**
    * Category ID
    * @type {number}
    * @memberof LogBookApiDeleteCategoryById
    */
    readonly id: number
    
    /**
    * 7shifts API version
    * @type {string}
    * @memberof LogBookApiDeleteCategoryById
    */
    readonly xApiVersion?: string
    
    /**
    * Company GUID
    * @type {string}
    * @memberof LogBookApiDeleteCategoryById
    */
    readonly xCompanyGuid?: string
    
}

/**
 * Request parameters for deleteComment operation in LogBookApi.
 * @export
 * @interface LogBookApiDeleteCommentRequest
 */
export type LogBookApiDeleteCommentRequest = {
    
    /**
    * Company ID
    * @type {number}
    * @memberof LogBookApiDeleteComment
    */
    readonly companyId: number
    
    /**
    * Log Book Comment ID
    * @type {number}
    * @memberof LogBookApiDeleteComment
    */
    readonly id: number
    
    /**
    * 7shifts API version
    * @type {string}
    * @memberof LogBookApiDeleteComment
    */
    readonly xApiVersion?: string
    
    /**
    * Company GUID
    * @type {string}
    * @memberof LogBookApiDeleteComment
    */
    readonly xCompanyGuid?: string
    
}

/**
 * Request parameters for deletePost operation in LogBookApi.
 * @export
 * @interface LogBookApiDeletePostRequest
 */
export type LogBookApiDeletePostRequest = {
    
    /**
    * Company ID
    * @type {number}
    * @memberof LogBookApiDeletePost
    */
    readonly companyId: number
    
    /**
    * Log Book Post ID
    * @type {number}
    * @memberof LogBookApiDeletePost
    */
    readonly id: number
    
    /**
    * 7shifts API version
    * @type {string}
    * @memberof LogBookApiDeletePost
    */
    readonly xApiVersion?: string
    
    /**
    * Company GUID
    * @type {string}
    * @memberof LogBookApiDeletePost
    */
    readonly xCompanyGuid?: string
    
}

/**
 * Request parameters for getComment operation in LogBookApi.
 * @export
 * @interface LogBookApiGetCommentRequest
 */
export type LogBookApiGetCommentRequest = {
    
    /**
    * Company ID
    * @type {number}
    * @memberof LogBookApiGetComment
    */
    readonly companyId: number
    
    /**
    * Log Book Comment ID
    * @type {number}
    * @memberof LogBookApiGetComment
    */
    readonly id: number
    
    /**
    * 7shifts API version
    * @type {string}
    * @memberof LogBookApiGetComment
    */
    readonly xApiVersion?: string
    
    /**
    * Company GUID
    * @type {string}
    * @memberof LogBookApiGetComment
    */
    readonly xCompanyGuid?: string
    
}

/**
 * Request parameters for getPost operation in LogBookApi.
 * @export
 * @interface LogBookApiGetPostRequest
 */
export type LogBookApiGetPostRequest = {
    
    /**
    * Company ID
    * @type {number}
    * @memberof LogBookApiGetPost
    */
    readonly companyId: number
    
    /**
    * Log Book Post ID
    * @type {number}
    * @memberof LogBookApiGetPost
    */
    readonly id: number
    
    /**
    * 7shifts API version
    * @type {string}
    * @memberof LogBookApiGetPost
    */
    readonly xApiVersion?: string
    
    /**
    * Company GUID
    * @type {string}
    * @memberof LogBookApiGetPost
    */
    readonly xCompanyGuid?: string
    
}

/**
 * Request parameters for listCategories operation in LogBookApi.
 * @export
 * @interface LogBookApiListCategoriesRequest
 */
export type LogBookApiListCategoriesRequest = {
    
    /**
    * Company ID
    * @type {number}
    * @memberof LogBookApiListCategories
    */
    readonly companyId: number
    
    /**
    * 7shifts API version
    * @type {string}
    * @memberof LogBookApiListCategories
    */
    readonly xApiVersion?: string
    
    /**
    * Company GUID
    * @type {string}
    * @memberof LogBookApiListCategories
    */
    readonly xCompanyGuid?: string
    
}

/**
 * Request parameters for listComments operation in LogBookApi.
 * @export
 * @interface LogBookApiListCommentsRequest
 */
export type LogBookApiListCommentsRequest = {
    
    /**
    * Company ID
    * @type {number}
    * @memberof LogBookApiListComments
    */
    readonly companyId: number
    
    /**
    * Log book post id associated with log book comments
    * @type {Array<number>}
    * @memberof LogBookApiListComments
    */
    readonly logBookIds: Array<number>
    
    /**
    * 7shifts API version
    * @type {string}
    * @memberof LogBookApiListComments
    */
    readonly xApiVersion?: string
    
    /**
    * Company GUID
    * @type {string}
    * @memberof LogBookApiListComments
    */
    readonly xCompanyGuid?: string
    
}

/**
 * Request parameters for listPosts operation in LogBookApi.
 * @export
 * @interface LogBookApiListPostsRequest
 */
export type LogBookApiListPostsRequest = {
    
    /**
    * Company ID
    * @type {number}
    * @memberof LogBookApiListPosts
    */
    readonly companyId: number
    
    /**
    * 7shifts API version
    * @type {string}
    * @memberof LogBookApiListPosts
    */
    readonly xApiVersion?: string
    
    /**
    * Company GUID
    * @type {string}
    * @memberof LogBookApiListPosts
    */
    readonly xCompanyGuid?: string
    
    /**
    * Location ID
    * @type {number}
    * @memberof LogBookApiListPosts
    */
    readonly locationId?: number
    
    /**
    * Log Book Category ID
    * @type {number}
    * @memberof LogBookApiListPosts
    */
    readonly logBookCategoryId?: number
    
    /**
    * Post Author User ID
    * @type {number}
    * @memberof LogBookApiListPosts
    */
    readonly userId?: number
    
    /**
    * Date of log book creation, format YYYY-MM-DD
    * @type {string}
    * @memberof LogBookApiListPosts
    */
    readonly date?: string
    
    /**
    * List only log book posts from dates inclusive after, format YYYY-MM-DD
    * @type {string}
    * @memberof LogBookApiListPosts
    */
    readonly postedDateGte?: string
    
    /**
    * List only log book posts from dates inclusive before, format YYYY-MM-DD
    * @type {string}
    * @memberof LogBookApiListPosts
    */
    readonly postedDateLte?: string
    
    /**
    * List only posts containing the message
    * @type {string}
    * @memberof LogBookApiListPosts
    */
    readonly message?: string
    
    /**
    * Order listed log book posts by a field
    * @type {'date' | 'id'}
    * @memberof LogBookApiListPosts
    */
    readonly orderField?: 'date' | 'id'
    
    /**
    * Specified direction to order listed log book posts
    * @type {'asc' | 'desc'}
    * @memberof LogBookApiListPosts
    */
    readonly orderDir?: 'asc' | 'desc'
    
    /**
    * Cursor for the next or previous page of results.
    * @type {string}
    * @memberof LogBookApiListPosts
    */
    readonly cursor?: string
    
    /**
    * The number of results desired per page.
    * @type {number}
    * @memberof LogBookApiListPosts
    */
    readonly limit?: number
    
}

/**
 * Request parameters for updateCategoryById operation in LogBookApi.
 * @export
 * @interface LogBookApiUpdateCategoryByIdRequest
 */
export type LogBookApiUpdateCategoryByIdRequest = {
    
    /**
    * Company ID
    * @type {number}
    * @memberof LogBookApiUpdateCategoryById
    */
    readonly companyId: number
    
    /**
    * Category ID
    * @type {number}
    * @memberof LogBookApiUpdateCategoryById
    */
    readonly id: number
    
    /**
    * 7shifts API version
    * @type {string}
    * @memberof LogBookApiUpdateCategoryById
    */
    readonly xApiVersion?: string
    
    /**
    * Company GUID
    * @type {string}
    * @memberof LogBookApiUpdateCategoryById
    */
    readonly xCompanyGuid?: string
    
} & LogBookUpdateCategoryByIdRequest

/**
 * LogBookApiGenerated - object-oriented interface
 * @export
 * @class LogBookApiGenerated
 * @extends {BaseAPI}
 */
export class LogBookApiGenerated extends BaseAPI {
    /**
     * Beta
     * @summary Create Log Book Category
     * @param {LogBookApiCreateCategoryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LogBookApiGenerated
     */
    public createCategory(requestParameters: LogBookApiCreateCategoryRequest, options?: AxiosRequestConfig) {
        return LogBookApiFp(this.configuration).createCategory(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Beta
     * @summary Create Log Book Comment
     * @param {LogBookApiCreateCommentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LogBookApiGenerated
     */
    public createComment(requestParameters: LogBookApiCreateCommentRequest, options?: AxiosRequestConfig) {
        return LogBookApiFp(this.configuration).createComment(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Beta
     * @summary Create Log Book Post
     * @param {LogBookApiCreatePostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LogBookApiGenerated
     */
    public createPost(requestParameters: LogBookApiCreatePostRequest, options?: AxiosRequestConfig) {
        return LogBookApiFp(this.configuration).createPost(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Beta
     * @summary Delete Log Book Category
     * @param {LogBookApiDeleteCategoryByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LogBookApiGenerated
     */
    public deleteCategoryById(requestParameters: LogBookApiDeleteCategoryByIdRequest, options?: AxiosRequestConfig) {
        return LogBookApiFp(this.configuration).deleteCategoryById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Beta
     * @summary Delete Log Book Comment
     * @param {LogBookApiDeleteCommentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LogBookApiGenerated
     */
    public deleteComment(requestParameters: LogBookApiDeleteCommentRequest, options?: AxiosRequestConfig) {
        return LogBookApiFp(this.configuration).deleteComment(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Beta
     * @summary Delete Log Book Post
     * @param {LogBookApiDeletePostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LogBookApiGenerated
     */
    public deletePost(requestParameters: LogBookApiDeletePostRequest, options?: AxiosRequestConfig) {
        return LogBookApiFp(this.configuration).deletePost(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Beta
     * @summary Retrieve Log Book Comment
     * @param {LogBookApiGetCommentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LogBookApiGenerated
     */
    public getComment(requestParameters: LogBookApiGetCommentRequest, options?: AxiosRequestConfig) {
        return LogBookApiFp(this.configuration).getComment(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Beta
     * @summary Retrieve Log Book Post
     * @param {LogBookApiGetPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LogBookApiGenerated
     */
    public getPost(requestParameters: LogBookApiGetPostRequest, options?: AxiosRequestConfig) {
        return LogBookApiFp(this.configuration).getPost(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Beta
     * @summary List Log Book Categories
     * @param {LogBookApiListCategoriesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LogBookApiGenerated
     */
    public listCategories(requestParameters: LogBookApiListCategoriesRequest, options?: AxiosRequestConfig) {
        return LogBookApiFp(this.configuration).listCategories(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Beta
     * @summary List Log Book Comments
     * @param {LogBookApiListCommentsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LogBookApiGenerated
     */
    public listComments(requestParameters: LogBookApiListCommentsRequest, options?: AxiosRequestConfig) {
        return LogBookApiFp(this.configuration).listComments(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Beta
     * @summary List Log Book Posts
     * @param {LogBookApiListPostsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LogBookApiGenerated
     */
    public listPosts(requestParameters: LogBookApiListPostsRequest, options?: AxiosRequestConfig) {
        return LogBookApiFp(this.configuration).listPosts(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Beta
     * @summary Update Log Book Category
     * @param {LogBookApiUpdateCategoryByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LogBookApiGenerated
     */
    public updateCategoryById(requestParameters: LogBookApiUpdateCategoryByIdRequest, options?: AxiosRequestConfig) {
        return LogBookApiFp(this.configuration).updateCategoryById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
