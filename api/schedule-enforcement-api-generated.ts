/* tslint:disable */
/* eslint-disable */
/*
7shifts API

7shifts is a team management software designed for restaurants. We help managers and operators spend less time and effort scheduling their staff, reduce their monthly labor costs and improve team communication. The result is simplified team management, one shift at a time.

7shifts also offers free mobile apps (iOS and Android) allowing managers and employees to have everything at their fingertips.

Start your free trial or request a demo at www.7shifts.com.

The version of the OpenAPI document: 2023-05-01
Contact: api-support@7shifts.com

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ScheduleEnforcementListScheduledShifts400Response } from '../models';
// @ts-ignore
import { ScheduleEnforcementListScheduledShifts401Response } from '../models';
// @ts-ignore
import { ScheduleEnforcementListScheduledShifts403Response } from '../models';
// @ts-ignore
import { ScheduleEnforcementListScheduledShifts404Response } from '../models';
// @ts-ignore
import { ScheduleEnforcementListScheduledShifts500Response } from '../models';
// @ts-ignore
import { ScheduleEnforcementListScheduledShiftsResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * ScheduleEnforcementApi - axios parameter creator
 * @export
 */
export const ScheduleEnforcementApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary List Scheduled Shifts
         * @param {number} companyId Company ID
         * @param {string} id Specified user_id of the user to check if scheduled. If the value begins with punch_id: then this specifies a user punch_id.
         * @param {number} locationId Location ID.
         * @param {string} [xApiVersion] 7shifts API version
         * @param {string} [xCompanyGuid] Company GUID
         * @param {number} [gracePeriod] Grace period in minutes.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listScheduledShifts: async (companyId: number, id: string, locationId: number, xApiVersion?: string, xCompanyGuid?: string, gracePeriod?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('listScheduledShifts', 'companyId', companyId)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('listScheduledShifts', 'id', id)
            // verify required parameter 'locationId' is not null or undefined
            assertParamExists('listScheduledShifts', 'locationId', locationId)
            const localVarPath = `/v2/company/{company_id}/shifts_scheduled/{id}`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId !== undefined ? companyId : `-company_id-`)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication cookieAuth required
            await setApiKeyToObject({object: localVarHeaderParameter, type: "Cookie", key: "Cookie", keyParamName: "7session", configuration})
            if (locationId !== undefined) {
                localVarQueryParameter['location_id'] = locationId;
            }

            if (gracePeriod !== undefined) {
                localVarQueryParameter['grace_period'] = gracePeriod;
            }

            if (xApiVersion != null) {
                localVarHeaderParameter['x-api-version'] = String(xApiVersion);
            }

            if (xCompanyGuid != null) {
                localVarHeaderParameter['x-company-guid'] = String(xCompanyGuid);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/company/{company_id}/shifts_scheduled/{id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ScheduleEnforcementApi - functional programming interface
 * @export
 */
export const ScheduleEnforcementApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ScheduleEnforcementApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary List Scheduled Shifts
         * @param {ScheduleEnforcementApiListScheduledShiftsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listScheduledShifts(requestParameters: ScheduleEnforcementApiListScheduledShiftsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ScheduleEnforcementListScheduledShiftsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listScheduledShifts(requestParameters.companyId, requestParameters.id, requestParameters.locationId, requestParameters.xApiVersion, requestParameters.xCompanyGuid, requestParameters.gracePeriod, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ScheduleEnforcementApi - factory interface
 * @export
 */
export const ScheduleEnforcementApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ScheduleEnforcementApiFp(configuration)
    return {
        /**
         * 
         * @summary List Scheduled Shifts
         * @param {ScheduleEnforcementApiListScheduledShiftsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listScheduledShifts(requestParameters: ScheduleEnforcementApiListScheduledShiftsRequest, options?: AxiosRequestConfig): AxiosPromise<ScheduleEnforcementListScheduledShiftsResponse> {
            return localVarFp.listScheduledShifts(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for listScheduledShifts operation in ScheduleEnforcementApi.
 * @export
 * @interface ScheduleEnforcementApiListScheduledShiftsRequest
 */
export type ScheduleEnforcementApiListScheduledShiftsRequest = {
    
    /**
    * Company ID
    * @type {number}
    * @memberof ScheduleEnforcementApiListScheduledShifts
    */
    readonly companyId: number
    
    /**
    * Specified user_id of the user to check if scheduled. If the value begins with punch_id: then this specifies a user punch_id.
    * @type {string}
    * @memberof ScheduleEnforcementApiListScheduledShifts
    */
    readonly id: string
    
    /**
    * Location ID.
    * @type {number}
    * @memberof ScheduleEnforcementApiListScheduledShifts
    */
    readonly locationId: number
    
    /**
    * 7shifts API version
    * @type {string}
    * @memberof ScheduleEnforcementApiListScheduledShifts
    */
    readonly xApiVersion?: string
    
    /**
    * Company GUID
    * @type {string}
    * @memberof ScheduleEnforcementApiListScheduledShifts
    */
    readonly xCompanyGuid?: string
    
    /**
    * Grace period in minutes.
    * @type {number}
    * @memberof ScheduleEnforcementApiListScheduledShifts
    */
    readonly gracePeriod?: number
    
}

/**
 * ScheduleEnforcementApiGenerated - object-oriented interface
 * @export
 * @class ScheduleEnforcementApiGenerated
 * @extends {BaseAPI}
 */
export class ScheduleEnforcementApiGenerated extends BaseAPI {
    /**
     * 
     * @summary List Scheduled Shifts
     * @param {ScheduleEnforcementApiListScheduledShiftsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScheduleEnforcementApiGenerated
     */
    public listScheduledShifts(requestParameters: ScheduleEnforcementApiListScheduledShiftsRequest, options?: AxiosRequestConfig) {
        return ScheduleEnforcementApiFp(this.configuration).listScheduledShifts(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
