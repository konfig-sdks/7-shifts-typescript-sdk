/* tslint:disable */
/* eslint-disable */
/*
7shifts API

7shifts is a team management software designed for restaurants. We help managers and operators spend less time and effort scheduling their staff, reduce their monthly labor costs and improve team communication. The result is simplified team management, one shift at a time.

7shifts also offers free mobile apps (iOS and Android) allowing managers and employees to have everything at their fingertips.

Start your free trial or request a demo at www.7shifts.com.

The version of the OpenAPI document: 2023-05-01
Contact: api-support@7shifts.com

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ExternalUserMappingsCreateBulkMappings400Response } from '../models';
// @ts-ignore
import { ExternalUserMappingsCreateBulkMappings401Response } from '../models';
// @ts-ignore
import { ExternalUserMappingsCreateBulkMappings403Response } from '../models';
// @ts-ignore
import { ExternalUserMappingsCreateBulkMappings404Response } from '../models';
// @ts-ignore
import { ExternalUserMappingsCreateBulkMappings422Response } from '../models';
// @ts-ignore
import { ExternalUserMappingsCreateBulkMappings500Response } from '../models';
// @ts-ignore
import { ExternalUserMappingsCreateBulkMappingsRequest } from '../models';
// @ts-ignore
import { ExternalUserMappingsCreateBulkMappingsRequestDataInner } from '../models';
// @ts-ignore
import { ExternalUserMappingsCreateBulkMappingsResponse } from '../models';
// @ts-ignore
import { ExternalUserMappingsCreateMapping401Response } from '../models';
// @ts-ignore
import { ExternalUserMappingsCreateMapping403Response } from '../models';
// @ts-ignore
import { ExternalUserMappingsCreateMapping409Response } from '../models';
// @ts-ignore
import { ExternalUserMappingsCreateMapping422Response } from '../models';
// @ts-ignore
import { ExternalUserMappingsCreateMapping500Response } from '../models';
// @ts-ignore
import { ExternalUserMappingsCreateMappingRequest } from '../models';
// @ts-ignore
import { ExternalUserMappingsCreateMappingResponse } from '../models';
// @ts-ignore
import { ExternalUserMappingsDeleteMapping401Response } from '../models';
// @ts-ignore
import { ExternalUserMappingsDeleteMapping403Response } from '../models';
// @ts-ignore
import { ExternalUserMappingsDeleteMapping404Response } from '../models';
// @ts-ignore
import { ExternalUserMappingsDeleteMapping422Response } from '../models';
// @ts-ignore
import { ExternalUserMappingsDeleteMapping500Response } from '../models';
// @ts-ignore
import { ExternalUserMappingsDeleteMappingResponse } from '../models';
// @ts-ignore
import { ExternalUserMappingsGetMappingById400Response } from '../models';
// @ts-ignore
import { ExternalUserMappingsGetMappingById401Response } from '../models';
// @ts-ignore
import { ExternalUserMappingsGetMappingById403Response } from '../models';
// @ts-ignore
import { ExternalUserMappingsGetMappingById404Response } from '../models';
// @ts-ignore
import { ExternalUserMappingsGetMappingById500Response } from '../models';
// @ts-ignore
import { ExternalUserMappingsGetMappingByIdResponse } from '../models';
// @ts-ignore
import { ExternalUserMappingsList400Response } from '../models';
// @ts-ignore
import { ExternalUserMappingsList401Response } from '../models';
// @ts-ignore
import { ExternalUserMappingsList403Response } from '../models';
// @ts-ignore
import { ExternalUserMappingsList404Response } from '../models';
// @ts-ignore
import { ExternalUserMappingsList500Response } from '../models';
// @ts-ignore
import { ExternalUserMappingsListResponse } from '../models';
// @ts-ignore
import { ExternalUserMappingsUpdateMappingByIdentifier400Response } from '../models';
// @ts-ignore
import { ExternalUserMappingsUpdateMappingByIdentifier401Response } from '../models';
// @ts-ignore
import { ExternalUserMappingsUpdateMappingByIdentifier403Response } from '../models';
// @ts-ignore
import { ExternalUserMappingsUpdateMappingByIdentifier404Response } from '../models';
// @ts-ignore
import { ExternalUserMappingsUpdateMappingByIdentifier422Response } from '../models';
// @ts-ignore
import { ExternalUserMappingsUpdateMappingByIdentifier500Response } from '../models';
// @ts-ignore
import { ExternalUserMappingsUpdateMappingByIdentifierRequest } from '../models';
// @ts-ignore
import { ExternalUserMappingsUpdateMappingByIdentifierResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * ExternalUserMappingsApi - axios parameter creator
 * @export
 */
export const ExternalUserMappingsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create User External Mappings
         * @param {number} companyId Company ID
         * @param {ExternalUserMappingsCreateBulkMappingsRequest} externalUserMappingsCreateBulkMappingsRequest 
         * @param {string} [xApiVersion] 7shifts API version
         * @param {string} [xCompanyGuid] Company GUID
         * @param {number} [locationId] Location ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBulkMappings: async (companyId: number, externalUserMappingsCreateBulkMappingsRequest: ExternalUserMappingsCreateBulkMappingsRequest, xApiVersion?: string, xCompanyGuid?: string, locationId?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('createBulkMappings', 'companyId', companyId)
            // verify required parameter 'externalUserMappingsCreateBulkMappingsRequest' is not null or undefined
            assertParamExists('createBulkMappings', 'externalUserMappingsCreateBulkMappingsRequest', externalUserMappingsCreateBulkMappingsRequest)
            const localVarPath = `/v2/company/{company_id}/external_user_mappings_bulk`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId !== undefined ? companyId : `-company_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication cookieAuth required
            await setApiKeyToObject({object: localVarHeaderParameter, type: "Cookie", key: "Cookie", keyParamName: "7session", configuration})
            if (locationId !== undefined) {
                localVarQueryParameter['location_id'] = locationId;
            }

            if (xApiVersion != null) {
                localVarHeaderParameter['x-api-version'] = String(xApiVersion);
            }

            if (xCompanyGuid != null) {
                localVarHeaderParameter['x-company-guid'] = String(xCompanyGuid);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: externalUserMappingsCreateBulkMappingsRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/company/{company_id}/external_user_mappings_bulk',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(externalUserMappingsCreateBulkMappingsRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create External User Mapping
         * @param {number} companyId Company ID
         * @param {string} [xApiVersion] 7shifts API version
         * @param {string} [xCompanyGuid] Company GUID
         * @param {number} [locationId] Location ID
         * @param {ExternalUserMappingsCreateMappingRequest} [externalUserMappingsCreateMappingRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMapping: async (companyId: number, xApiVersion?: string, xCompanyGuid?: string, locationId?: number, externalUserMappingsCreateMappingRequest?: ExternalUserMappingsCreateMappingRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('createMapping', 'companyId', companyId)
            const localVarPath = `/v2/company/{company_id}/external_user_mappings`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId !== undefined ? companyId : `-company_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication cookieAuth required
            await setApiKeyToObject({object: localVarHeaderParameter, type: "Cookie", key: "Cookie", keyParamName: "7session", configuration})
            if (locationId !== undefined) {
                localVarQueryParameter['location_id'] = locationId;
            }

            if (xApiVersion != null) {
                localVarHeaderParameter['x-api-version'] = String(xApiVersion);
            }

            if (xCompanyGuid != null) {
                localVarHeaderParameter['x-company-guid'] = String(xCompanyGuid);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: externalUserMappingsCreateMappingRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/company/{company_id}/external_user_mappings',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(externalUserMappingsCreateMappingRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete External User Mapping
         * @param {number} companyId Company ID
         * @param {string} identifier User ID. Accepted values are 7Shifts user id, external user id or user email address. Use prefix ext: for external id or email: for email address
         * @param {string} [xApiVersion] 7shifts API version
         * @param {string} [xCompanyGuid] Company GUID
         * @param {number} [locationId] Location ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMapping: async (companyId: number, identifier: string, xApiVersion?: string, xCompanyGuid?: string, locationId?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('deleteMapping', 'companyId', companyId)
            // verify required parameter 'identifier' is not null or undefined
            assertParamExists('deleteMapping', 'identifier', identifier)
            const localVarPath = `/v2/company/{company_id}/external_user_mappings/{identifier}`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId !== undefined ? companyId : `-company_id-`)))
                .replace(`{${"identifier"}}`, encodeURIComponent(String(identifier !== undefined ? identifier : `-identifier-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication cookieAuth required
            await setApiKeyToObject({object: localVarHeaderParameter, type: "Cookie", key: "Cookie", keyParamName: "7session", configuration})
            if (locationId !== undefined) {
                localVarQueryParameter['location_id'] = locationId;
            }

            if (xApiVersion != null) {
                localVarHeaderParameter['x-api-version'] = String(xApiVersion);
            }

            if (xCompanyGuid != null) {
                localVarHeaderParameter['x-company-guid'] = String(xCompanyGuid);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/company/{company_id}/external_user_mappings/{identifier}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve User External Mapping
         * @param {number} companyId Company ID
         * @param {string} identifier User ID. Accepted values are 7Shifts user id or external user id. Use prefix ext: for external id
         * @param {string} [xApiVersion] 7shifts API version
         * @param {string} [xCompanyGuid] Company GUID
         * @param {number} [locationId] Location ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMappingById: async (companyId: number, identifier: string, xApiVersion?: string, xCompanyGuid?: string, locationId?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('getMappingById', 'companyId', companyId)
            // verify required parameter 'identifier' is not null or undefined
            assertParamExists('getMappingById', 'identifier', identifier)
            const localVarPath = `/v2/company/{company_id}/external_user_mappings/{identifier}`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId !== undefined ? companyId : `-company_id-`)))
                .replace(`{${"identifier"}}`, encodeURIComponent(String(identifier !== undefined ? identifier : `-identifier-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication cookieAuth required
            await setApiKeyToObject({object: localVarHeaderParameter, type: "Cookie", key: "Cookie", keyParamName: "7session", configuration})
            if (locationId !== undefined) {
                localVarQueryParameter['location_id'] = locationId;
            }

            if (xApiVersion != null) {
                localVarHeaderParameter['x-api-version'] = String(xApiVersion);
            }

            if (xCompanyGuid != null) {
                localVarHeaderParameter['x-company-guid'] = String(xCompanyGuid);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/company/{company_id}/external_user_mappings/{identifier}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List External User Mapping
         * @param {number} companyId Company ID
         * @param {string} [xApiVersion] 7shifts API version
         * @param {string} [xCompanyGuid] Company GUID
         * @param {number} [locationId] Location ID
         * @param {number} [userId] The 7shifts user ID
         * @param {string} [externalUserId] The external user ID
         * @param {string} [modifiedSince] Return records that have been modified since the specified date. Format YYYY-MM-DD
         * @param {string} [cursor] Cursor for the next or previous page of results.
         * @param {number} [limit] The number of results desired per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list: async (companyId: number, xApiVersion?: string, xCompanyGuid?: string, locationId?: number, userId?: number, externalUserId?: string, modifiedSince?: string, cursor?: string, limit?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('list', 'companyId', companyId)
            const localVarPath = `/v2/company/{company_id}/external_user_mappings`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId !== undefined ? companyId : `-company_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication cookieAuth required
            await setApiKeyToObject({object: localVarHeaderParameter, type: "Cookie", key: "Cookie", keyParamName: "7session", configuration})
            if (locationId !== undefined) {
                localVarQueryParameter['location_id'] = locationId;
            }

            if (userId !== undefined) {
                localVarQueryParameter['user_id'] = userId;
            }

            if (externalUserId !== undefined) {
                localVarQueryParameter['external_user_id'] = externalUserId;
            }

            if (modifiedSince !== undefined) {
                localVarQueryParameter['modified_since'] = modifiedSince;
            }

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (xApiVersion != null) {
                localVarHeaderParameter['x-api-version'] = String(xApiVersion);
            }

            if (xCompanyGuid != null) {
                localVarHeaderParameter['x-company-guid'] = String(xCompanyGuid);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/company/{company_id}/external_user_mappings',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update External User Mappings
         * @param {number} companyId Company ID
         * @param {string} identifier User ID. Accepted values are 7Shifts user id or external user id. Use prefix ext: for external id
         * @param {string} [xApiVersion] 7shifts API version
         * @param {string} [xCompanyGuid] Company GUID
         * @param {number} [locationId] Location ID
         * @param {ExternalUserMappingsUpdateMappingByIdentifierRequest} [externalUserMappingsUpdateMappingByIdentifierRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMappingByIdentifier: async (companyId: number, identifier: string, xApiVersion?: string, xCompanyGuid?: string, locationId?: number, externalUserMappingsUpdateMappingByIdentifierRequest?: ExternalUserMappingsUpdateMappingByIdentifierRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('updateMappingByIdentifier', 'companyId', companyId)
            // verify required parameter 'identifier' is not null or undefined
            assertParamExists('updateMappingByIdentifier', 'identifier', identifier)
            const localVarPath = `/v2/company/{company_id}/external_user_mappings/{identifier}`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId !== undefined ? companyId : `-company_id-`)))
                .replace(`{${"identifier"}}`, encodeURIComponent(String(identifier !== undefined ? identifier : `-identifier-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication cookieAuth required
            await setApiKeyToObject({object: localVarHeaderParameter, type: "Cookie", key: "Cookie", keyParamName: "7session", configuration})
            if (locationId !== undefined) {
                localVarQueryParameter['location_id'] = locationId;
            }

            if (xApiVersion != null) {
                localVarHeaderParameter['x-api-version'] = String(xApiVersion);
            }

            if (xCompanyGuid != null) {
                localVarHeaderParameter['x-company-guid'] = String(xCompanyGuid);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: externalUserMappingsUpdateMappingByIdentifierRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/company/{company_id}/external_user_mappings/{identifier}',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(externalUserMappingsUpdateMappingByIdentifierRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ExternalUserMappingsApi - functional programming interface
 * @export
 */
export const ExternalUserMappingsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ExternalUserMappingsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create User External Mappings
         * @param {ExternalUserMappingsApiCreateBulkMappingsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createBulkMappings(requestParameters: ExternalUserMappingsApiCreateBulkMappingsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ExternalUserMappingsCreateBulkMappingsResponse>> {
            const externalUserMappingsCreateBulkMappingsRequest: ExternalUserMappingsCreateBulkMappingsRequest = {
                data: requestParameters.data
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createBulkMappings(requestParameters.companyId, externalUserMappingsCreateBulkMappingsRequest, requestParameters.xApiVersion, requestParameters.xCompanyGuid, requestParameters.locationId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Create External User Mapping
         * @param {ExternalUserMappingsApiCreateMappingRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createMapping(requestParameters: ExternalUserMappingsApiCreateMappingRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ExternalUserMappingsCreateMappingResponse>> {
            const externalUserMappingsCreateMappingRequest: ExternalUserMappingsCreateMappingRequest = {
                user_id: requestParameters.user_id,
                external_user_id: requestParameters.external_user_id
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createMapping(requestParameters.companyId, requestParameters.xApiVersion, requestParameters.xCompanyGuid, requestParameters.locationId, externalUserMappingsCreateMappingRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete External User Mapping
         * @param {ExternalUserMappingsApiDeleteMappingRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteMapping(requestParameters: ExternalUserMappingsApiDeleteMappingRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteMapping(requestParameters.companyId, requestParameters.identifier, requestParameters.xApiVersion, requestParameters.xCompanyGuid, requestParameters.locationId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Retrieve User External Mapping
         * @param {ExternalUserMappingsApiGetMappingByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMappingById(requestParameters: ExternalUserMappingsApiGetMappingByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ExternalUserMappingsGetMappingByIdResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMappingById(requestParameters.companyId, requestParameters.identifier, requestParameters.xApiVersion, requestParameters.xCompanyGuid, requestParameters.locationId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary List External User Mapping
         * @param {ExternalUserMappingsApiListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async list(requestParameters: ExternalUserMappingsApiListRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ExternalUserMappingsListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.list(requestParameters.companyId, requestParameters.xApiVersion, requestParameters.xCompanyGuid, requestParameters.locationId, requestParameters.userId, requestParameters.externalUserId, requestParameters.modifiedSince, requestParameters.cursor, requestParameters.limit, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update External User Mappings
         * @param {ExternalUserMappingsApiUpdateMappingByIdentifierRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateMappingByIdentifier(requestParameters: ExternalUserMappingsApiUpdateMappingByIdentifierRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ExternalUserMappingsUpdateMappingByIdentifierResponse>> {
            const externalUserMappingsUpdateMappingByIdentifierRequest: ExternalUserMappingsUpdateMappingByIdentifierRequest = {
                user_id: requestParameters.user_id,
                external_user_id: requestParameters.external_user_id
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateMappingByIdentifier(requestParameters.companyId, requestParameters.identifier, requestParameters.xApiVersion, requestParameters.xCompanyGuid, requestParameters.locationId, externalUserMappingsUpdateMappingByIdentifierRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ExternalUserMappingsApi - factory interface
 * @export
 */
export const ExternalUserMappingsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ExternalUserMappingsApiFp(configuration)
    return {
        /**
         * 
         * @summary Create User External Mappings
         * @param {ExternalUserMappingsApiCreateBulkMappingsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBulkMappings(requestParameters: ExternalUserMappingsApiCreateBulkMappingsRequest, options?: AxiosRequestConfig): AxiosPromise<ExternalUserMappingsCreateBulkMappingsResponse> {
            return localVarFp.createBulkMappings(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create External User Mapping
         * @param {ExternalUserMappingsApiCreateMappingRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMapping(requestParameters: ExternalUserMappingsApiCreateMappingRequest, options?: AxiosRequestConfig): AxiosPromise<ExternalUserMappingsCreateMappingResponse> {
            return localVarFp.createMapping(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete External User Mapping
         * @param {ExternalUserMappingsApiDeleteMappingRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMapping(requestParameters: ExternalUserMappingsApiDeleteMappingRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteMapping(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve User External Mapping
         * @param {ExternalUserMappingsApiGetMappingByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMappingById(requestParameters: ExternalUserMappingsApiGetMappingByIdRequest, options?: AxiosRequestConfig): AxiosPromise<ExternalUserMappingsGetMappingByIdResponse> {
            return localVarFp.getMappingById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List External User Mapping
         * @param {ExternalUserMappingsApiListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list(requestParameters: ExternalUserMappingsApiListRequest, options?: AxiosRequestConfig): AxiosPromise<ExternalUserMappingsListResponse> {
            return localVarFp.list(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update External User Mappings
         * @param {ExternalUserMappingsApiUpdateMappingByIdentifierRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMappingByIdentifier(requestParameters: ExternalUserMappingsApiUpdateMappingByIdentifierRequest, options?: AxiosRequestConfig): AxiosPromise<ExternalUserMappingsUpdateMappingByIdentifierResponse> {
            return localVarFp.updateMappingByIdentifier(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createBulkMappings operation in ExternalUserMappingsApi.
 * @export
 * @interface ExternalUserMappingsApiCreateBulkMappingsRequest
 */
export type ExternalUserMappingsApiCreateBulkMappingsRequest = {
    
    /**
    * Company ID
    * @type {number}
    * @memberof ExternalUserMappingsApiCreateBulkMappings
    */
    readonly companyId: number
    
    /**
    * 7shifts API version
    * @type {string}
    * @memberof ExternalUserMappingsApiCreateBulkMappings
    */
    readonly xApiVersion?: string
    
    /**
    * Company GUID
    * @type {string}
    * @memberof ExternalUserMappingsApiCreateBulkMappings
    */
    readonly xCompanyGuid?: string
    
    /**
    * Location ID
    * @type {number}
    * @memberof ExternalUserMappingsApiCreateBulkMappings
    */
    readonly locationId?: number
    
} & ExternalUserMappingsCreateBulkMappingsRequest

/**
 * Request parameters for createMapping operation in ExternalUserMappingsApi.
 * @export
 * @interface ExternalUserMappingsApiCreateMappingRequest
 */
export type ExternalUserMappingsApiCreateMappingRequest = {
    
    /**
    * Company ID
    * @type {number}
    * @memberof ExternalUserMappingsApiCreateMapping
    */
    readonly companyId: number
    
    /**
    * 7shifts API version
    * @type {string}
    * @memberof ExternalUserMappingsApiCreateMapping
    */
    readonly xApiVersion?: string
    
    /**
    * Company GUID
    * @type {string}
    * @memberof ExternalUserMappingsApiCreateMapping
    */
    readonly xCompanyGuid?: string
    
    /**
    * Location ID
    * @type {number}
    * @memberof ExternalUserMappingsApiCreateMapping
    */
    readonly locationId?: number
    
} & ExternalUserMappingsCreateMappingRequest

/**
 * Request parameters for deleteMapping operation in ExternalUserMappingsApi.
 * @export
 * @interface ExternalUserMappingsApiDeleteMappingRequest
 */
export type ExternalUserMappingsApiDeleteMappingRequest = {
    
    /**
    * Company ID
    * @type {number}
    * @memberof ExternalUserMappingsApiDeleteMapping
    */
    readonly companyId: number
    
    /**
    * User ID. Accepted values are 7Shifts user id, external user id or user email address. Use prefix ext: for external id or email: for email address
    * @type {string}
    * @memberof ExternalUserMappingsApiDeleteMapping
    */
    readonly identifier: string
    
    /**
    * 7shifts API version
    * @type {string}
    * @memberof ExternalUserMappingsApiDeleteMapping
    */
    readonly xApiVersion?: string
    
    /**
    * Company GUID
    * @type {string}
    * @memberof ExternalUserMappingsApiDeleteMapping
    */
    readonly xCompanyGuid?: string
    
    /**
    * Location ID
    * @type {number}
    * @memberof ExternalUserMappingsApiDeleteMapping
    */
    readonly locationId?: number
    
}

/**
 * Request parameters for getMappingById operation in ExternalUserMappingsApi.
 * @export
 * @interface ExternalUserMappingsApiGetMappingByIdRequest
 */
export type ExternalUserMappingsApiGetMappingByIdRequest = {
    
    /**
    * Company ID
    * @type {number}
    * @memberof ExternalUserMappingsApiGetMappingById
    */
    readonly companyId: number
    
    /**
    * User ID. Accepted values are 7Shifts user id or external user id. Use prefix ext: for external id
    * @type {string}
    * @memberof ExternalUserMappingsApiGetMappingById
    */
    readonly identifier: string
    
    /**
    * 7shifts API version
    * @type {string}
    * @memberof ExternalUserMappingsApiGetMappingById
    */
    readonly xApiVersion?: string
    
    /**
    * Company GUID
    * @type {string}
    * @memberof ExternalUserMappingsApiGetMappingById
    */
    readonly xCompanyGuid?: string
    
    /**
    * Location ID
    * @type {number}
    * @memberof ExternalUserMappingsApiGetMappingById
    */
    readonly locationId?: number
    
}

/**
 * Request parameters for list operation in ExternalUserMappingsApi.
 * @export
 * @interface ExternalUserMappingsApiListRequest
 */
export type ExternalUserMappingsApiListRequest = {
    
    /**
    * Company ID
    * @type {number}
    * @memberof ExternalUserMappingsApiList
    */
    readonly companyId: number
    
    /**
    * 7shifts API version
    * @type {string}
    * @memberof ExternalUserMappingsApiList
    */
    readonly xApiVersion?: string
    
    /**
    * Company GUID
    * @type {string}
    * @memberof ExternalUserMappingsApiList
    */
    readonly xCompanyGuid?: string
    
    /**
    * Location ID
    * @type {number}
    * @memberof ExternalUserMappingsApiList
    */
    readonly locationId?: number
    
    /**
    * The 7shifts user ID
    * @type {number}
    * @memberof ExternalUserMappingsApiList
    */
    readonly userId?: number
    
    /**
    * The external user ID
    * @type {string}
    * @memberof ExternalUserMappingsApiList
    */
    readonly externalUserId?: string
    
    /**
    * Return records that have been modified since the specified date. Format YYYY-MM-DD
    * @type {string}
    * @memberof ExternalUserMappingsApiList
    */
    readonly modifiedSince?: string
    
    /**
    * Cursor for the next or previous page of results.
    * @type {string}
    * @memberof ExternalUserMappingsApiList
    */
    readonly cursor?: string
    
    /**
    * The number of results desired per page.
    * @type {number}
    * @memberof ExternalUserMappingsApiList
    */
    readonly limit?: number
    
}

/**
 * Request parameters for updateMappingByIdentifier operation in ExternalUserMappingsApi.
 * @export
 * @interface ExternalUserMappingsApiUpdateMappingByIdentifierRequest
 */
export type ExternalUserMappingsApiUpdateMappingByIdentifierRequest = {
    
    /**
    * Company ID
    * @type {number}
    * @memberof ExternalUserMappingsApiUpdateMappingByIdentifier
    */
    readonly companyId: number
    
    /**
    * User ID. Accepted values are 7Shifts user id or external user id. Use prefix ext: for external id
    * @type {string}
    * @memberof ExternalUserMappingsApiUpdateMappingByIdentifier
    */
    readonly identifier: string
    
    /**
    * 7shifts API version
    * @type {string}
    * @memberof ExternalUserMappingsApiUpdateMappingByIdentifier
    */
    readonly xApiVersion?: string
    
    /**
    * Company GUID
    * @type {string}
    * @memberof ExternalUserMappingsApiUpdateMappingByIdentifier
    */
    readonly xCompanyGuid?: string
    
    /**
    * Location ID
    * @type {number}
    * @memberof ExternalUserMappingsApiUpdateMappingByIdentifier
    */
    readonly locationId?: number
    
} & ExternalUserMappingsUpdateMappingByIdentifierRequest

/**
 * ExternalUserMappingsApiGenerated - object-oriented interface
 * @export
 * @class ExternalUserMappingsApiGenerated
 * @extends {BaseAPI}
 */
export class ExternalUserMappingsApiGenerated extends BaseAPI {
    /**
     * 
     * @summary Create User External Mappings
     * @param {ExternalUserMappingsApiCreateBulkMappingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExternalUserMappingsApiGenerated
     */
    public createBulkMappings(requestParameters: ExternalUserMappingsApiCreateBulkMappingsRequest, options?: AxiosRequestConfig) {
        return ExternalUserMappingsApiFp(this.configuration).createBulkMappings(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create External User Mapping
     * @param {ExternalUserMappingsApiCreateMappingRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExternalUserMappingsApiGenerated
     */
    public createMapping(requestParameters: ExternalUserMappingsApiCreateMappingRequest, options?: AxiosRequestConfig) {
        return ExternalUserMappingsApiFp(this.configuration).createMapping(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete External User Mapping
     * @param {ExternalUserMappingsApiDeleteMappingRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExternalUserMappingsApiGenerated
     */
    public deleteMapping(requestParameters: ExternalUserMappingsApiDeleteMappingRequest, options?: AxiosRequestConfig) {
        return ExternalUserMappingsApiFp(this.configuration).deleteMapping(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve User External Mapping
     * @param {ExternalUserMappingsApiGetMappingByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExternalUserMappingsApiGenerated
     */
    public getMappingById(requestParameters: ExternalUserMappingsApiGetMappingByIdRequest, options?: AxiosRequestConfig) {
        return ExternalUserMappingsApiFp(this.configuration).getMappingById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List External User Mapping
     * @param {ExternalUserMappingsApiListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExternalUserMappingsApiGenerated
     */
    public list(requestParameters: ExternalUserMappingsApiListRequest, options?: AxiosRequestConfig) {
        return ExternalUserMappingsApiFp(this.configuration).list(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update External User Mappings
     * @param {ExternalUserMappingsApiUpdateMappingByIdentifierRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExternalUserMappingsApiGenerated
     */
    public updateMappingByIdentifier(requestParameters: ExternalUserMappingsApiUpdateMappingByIdentifierRequest, options?: AxiosRequestConfig) {
        return ExternalUserMappingsApiFp(this.configuration).updateMappingByIdentifier(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
