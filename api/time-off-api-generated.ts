/* tslint:disable */
/* eslint-disable */
/*
7shifts API

7shifts is a team management software designed for restaurants. We help managers and operators spend less time and effort scheduling their staff, reduce their monthly labor costs and improve team communication. The result is simplified team management, one shift at a time.

7shifts also offers free mobile apps (iOS and Android) allowing managers and employees to have everything at their fingertips.

Start your free trial or request a demo at www.7shifts.com.

The version of the OpenAPI document: 2023-05-01
Contact: api-support@7shifts.com

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { TimeOffApproveRequest200Response } from '../models';
// @ts-ignore
import { TimeOffApproveRequestRequest } from '../models';
// @ts-ignore
import { TimeOffApproveRequestResponse } from '../models';
// @ts-ignore
import { TimeOffCreateRequest200Response } from '../models';
// @ts-ignore
import { TimeOffCreateRequestRequest } from '../models';
// @ts-ignore
import { TimeOffCreateRequestRequestHoursInner } from '../models';
// @ts-ignore
import { TimeOffCreateRequestResponse } from '../models';
// @ts-ignore
import { TimeOffDeclineRequest200Response } from '../models';
// @ts-ignore
import { TimeOffDeclineRequestRequest } from '../models';
// @ts-ignore
import { TimeOffDeclineRequestResponse } from '../models';
// @ts-ignore
import { TimeOffGetSettings200Response } from '../models';
// @ts-ignore
import { TimeOffGetSettings403Response } from '../models';
// @ts-ignore
import { TimeOffGetSettingsResponse } from '../models';
// @ts-ignore
import { TimeOffGetTimeOffById200Response } from '../models';
// @ts-ignore
import { TimeOffGetTimeOffById403Response } from '../models';
// @ts-ignore
import { TimeOffGetTimeOffById404Response } from '../models';
// @ts-ignore
import { TimeOffGetTimeOffByIdResponse } from '../models';
// @ts-ignore
import { TimeOffGetTotalHours200Response } from '../models';
// @ts-ignore
import { TimeOffGetTotalHoursResponse } from '../models';
// @ts-ignore
import { TimeOffList200Response } from '../models';
// @ts-ignore
import { TimeOffListResponse } from '../models';
// @ts-ignore
import { TimeOffRemove400Response } from '../models';
// @ts-ignore
import { TimeOffRemove403Response } from '../models';
// @ts-ignore
import { TimeOffRemoveResponse } from '../models';
// @ts-ignore
import { TimeOffSetTimeOffSettings200Response } from '../models';
// @ts-ignore
import { TimeOffSetTimeOffSettings403Response } from '../models';
// @ts-ignore
import { TimeOffSetTimeOffSettingsRequest } from '../models';
// @ts-ignore
import { TimeOffSetTimeOffSettingsResponse } from '../models';
// @ts-ignore
import { TimeOffUpdateTimeOffById200Response } from '../models';
// @ts-ignore
import { TimeOffUpdateTimeOffByIdRequest } from '../models';
// @ts-ignore
import { TimeOffUpdateTimeOffByIdResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * TimeOffApi - axios parameter creator
 * @export
 */
export const TimeOffApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Approve Time Off Request
         * @param {number} timeOffId Time Off ID
         * @param {string} [xApiVersion] 7shifts API version
         * @param {string} [xCompanyGuid] Company GUID
         * @param {TimeOffApproveRequestRequest} [timeOffApproveRequestRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        approveRequest: async (timeOffId: number, xApiVersion?: string, xCompanyGuid?: string, timeOffApproveRequestRequest?: TimeOffApproveRequestRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timeOffId' is not null or undefined
            assertParamExists('approveRequest', 'timeOffId', timeOffId)
            const localVarPath = `/v2/time_off/{time_off_id}/approve`
                .replace(`{${"time_off_id"}}`, encodeURIComponent(String(timeOffId !== undefined ? timeOffId : `-time_off_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication cookieAuth required
            await setApiKeyToObject({object: localVarHeaderParameter, type: "Cookie", key: "Cookie", keyParamName: "7session", configuration})
            if (xApiVersion != null) {
                localVarHeaderParameter['x-api-version'] = String(xApiVersion);
            }

            if (xCompanyGuid != null) {
                localVarHeaderParameter['x-company-guid'] = String(xCompanyGuid);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: timeOffApproveRequestRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/time_off/{time_off_id}/approve',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(timeOffApproveRequestRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create time off
         * @param {TimeOffCreateRequestRequest} timeOffCreateRequestRequest 
         * @param {string} [xApiVersion] 7shifts API version
         * @param {string} [xCompanyGuid] Company GUID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRequest: async (timeOffCreateRequestRequest: TimeOffCreateRequestRequest, xApiVersion?: string, xCompanyGuid?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timeOffCreateRequestRequest' is not null or undefined
            assertParamExists('createRequest', 'timeOffCreateRequestRequest', timeOffCreateRequestRequest)
            const localVarPath = `/v2/time_off`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication cookieAuth required
            await setApiKeyToObject({object: localVarHeaderParameter, type: "Cookie", key: "Cookie", keyParamName: "7session", configuration})
            if (xApiVersion != null) {
                localVarHeaderParameter['x-api-version'] = String(xApiVersion);
            }

            if (xCompanyGuid != null) {
                localVarHeaderParameter['x-company-guid'] = String(xCompanyGuid);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: timeOffCreateRequestRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/time_off',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(timeOffCreateRequestRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Decline Time Off Request
         * @param {number} timeOffId Time Off ID
         * @param {string} [xApiVersion] 7shifts API version
         * @param {string} [xCompanyGuid] Company GUID
         * @param {TimeOffDeclineRequestRequest} [timeOffDeclineRequestRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        declineRequest: async (timeOffId: number, xApiVersion?: string, xCompanyGuid?: string, timeOffDeclineRequestRequest?: TimeOffDeclineRequestRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timeOffId' is not null or undefined
            assertParamExists('declineRequest', 'timeOffId', timeOffId)
            const localVarPath = `/v2/time_off/{time_off_id}/decline`
                .replace(`{${"time_off_id"}}`, encodeURIComponent(String(timeOffId !== undefined ? timeOffId : `-time_off_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication cookieAuth required
            await setApiKeyToObject({object: localVarHeaderParameter, type: "Cookie", key: "Cookie", keyParamName: "7session", configuration})
            if (xApiVersion != null) {
                localVarHeaderParameter['x-api-version'] = String(xApiVersion);
            }

            if (xCompanyGuid != null) {
                localVarHeaderParameter['x-company-guid'] = String(xCompanyGuid);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: timeOffDeclineRequestRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/time_off/{time_off_id}/decline',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(timeOffDeclineRequestRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve Time Off Settings
         * @param {number} companyId Company ID
         * @param {string} [xApiVersion] 7shifts API version
         * @param {string} [xCompanyGuid] Company GUID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSettings: async (companyId: number, xApiVersion?: string, xCompanyGuid?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('getSettings', 'companyId', companyId)
            const localVarPath = `/v2/time_off_settings/{company_id}`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId !== undefined ? companyId : `-company_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication cookieAuth required
            await setApiKeyToObject({object: localVarHeaderParameter, type: "Cookie", key: "Cookie", keyParamName: "7session", configuration})
            if (xApiVersion != null) {
                localVarHeaderParameter['x-api-version'] = String(xApiVersion);
            }

            if (xCompanyGuid != null) {
                localVarHeaderParameter['x-company-guid'] = String(xCompanyGuid);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/time_off_settings/{company_id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve Time Off
         * @param {number} timeOffId Time Off ID
         * @param {string} [xApiVersion] 7shifts API version
         * @param {string} [xCompanyGuid] Company GUID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTimeOffById: async (timeOffId: number, xApiVersion?: string, xCompanyGuid?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timeOffId' is not null or undefined
            assertParamExists('getTimeOffById', 'timeOffId', timeOffId)
            const localVarPath = `/v2/time_off/{time_off_id}`
                .replace(`{${"time_off_id"}}`, encodeURIComponent(String(timeOffId !== undefined ? timeOffId : `-time_off_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication cookieAuth required
            await setApiKeyToObject({object: localVarHeaderParameter, type: "Cookie", key: "Cookie", keyParamName: "7session", configuration})
            if (xApiVersion != null) {
                localVarHeaderParameter['x-api-version'] = String(xApiVersion);
            }

            if (xCompanyGuid != null) {
                localVarHeaderParameter['x-company-guid'] = String(xCompanyGuid);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/time_off/{time_off_id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve Time Off Hours
         * @param {number} companyId Company ID
         * @param {Array<number>} employeeId Employee IDs
         * @param {string} dateStart An ISO 8601 date string
         * @param {string} dateEnd An ISO 8601 date string
         * @param {string} [xApiVersion] 7shifts API version
         * @param {string} [xCompanyGuid] Company GUID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTotalHours: async (companyId: number, employeeId: Array<number>, dateStart: string, dateEnd: string, xApiVersion?: string, xCompanyGuid?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('getTotalHours', 'companyId', companyId)
            // verify required parameter 'employeeId' is not null or undefined
            assertParamExists('getTotalHours', 'employeeId', employeeId)
            // verify required parameter 'dateStart' is not null or undefined
            assertParamExists('getTotalHours', 'dateStart', dateStart)
            // verify required parameter 'dateEnd' is not null or undefined
            assertParamExists('getTotalHours', 'dateEnd', dateEnd)
            const localVarPath = `/v2/time_off/total_hours`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication cookieAuth required
            await setApiKeyToObject({object: localVarHeaderParameter, type: "Cookie", key: "Cookie", keyParamName: "7session", configuration})
            if (companyId !== undefined) {
                localVarQueryParameter['company_id'] = companyId;
            }

            if (employeeId) {
                localVarQueryParameter['employee_id'] = employeeId;
            }

            if (dateStart !== undefined) {
                localVarQueryParameter['date_start'] = dateStart;
            }

            if (dateEnd !== undefined) {
                localVarQueryParameter['date_end'] = dateEnd;
            }

            if (xApiVersion != null) {
                localVarHeaderParameter['x-api-version'] = String(xApiVersion);
            }

            if (xCompanyGuid != null) {
                localVarHeaderParameter['x-company-guid'] = String(xCompanyGuid);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/time_off/total_hours',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List Time Off
         * @param {number} companyId Company ID
         * @param {string} [xApiVersion] 7shifts API version
         * @param {string} [xCompanyGuid] Company GUID
         * @param {number} [locationId] Location ID
         * @param {number} [userId] User ID
         * @param {number} [status] Status
         * @param {'paid' | 'unpaid' | 'paid_sick'} [category] Category
         * @param {string} [toDateGte] Return time offs that end after a specified date.
         * @param {'created' | 'from_date'} [sortBy] Sort by column
         * @param {'asc' | 'desc'} [sortDir] Sort by direction (asc, desc)
         * @param {string} [cursor] Cursor for the next or previous page of results.
         * @param {number} [limit] The number of results desired per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list: async (companyId: number, xApiVersion?: string, xCompanyGuid?: string, locationId?: number, userId?: number, status?: number, category?: 'paid' | 'unpaid' | 'paid_sick', toDateGte?: string, sortBy?: 'created' | 'from_date', sortDir?: 'asc' | 'desc', cursor?: string, limit?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('list', 'companyId', companyId)
            const localVarPath = `/v2/time_off`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication cookieAuth required
            await setApiKeyToObject({object: localVarHeaderParameter, type: "Cookie", key: "Cookie", keyParamName: "7session", configuration})
            if (companyId !== undefined) {
                localVarQueryParameter['company_id'] = companyId;
            }

            if (locationId !== undefined) {
                localVarQueryParameter['location_id'] = locationId;
            }

            if (userId !== undefined) {
                localVarQueryParameter['user_id'] = userId;
            }

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }

            if (category !== undefined) {
                localVarQueryParameter['category'] = category;
            }

            if (toDateGte !== undefined) {
                localVarQueryParameter['to_date_gte'] = toDateGte;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (sortDir !== undefined) {
                localVarQueryParameter['sort_dir'] = sortDir;
            }

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (xApiVersion != null) {
                localVarHeaderParameter['x-api-version'] = String(xApiVersion);
            }

            if (xCompanyGuid != null) {
                localVarHeaderParameter['x-company-guid'] = String(xCompanyGuid);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/time_off',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete Time Off
         * @param {number} timeOffId Time Off ID
         * @param {string} [xApiVersion] 7shifts API version
         * @param {string} [xCompanyGuid] Company GUID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        remove: async (timeOffId: number, xApiVersion?: string, xCompanyGuid?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timeOffId' is not null or undefined
            assertParamExists('remove', 'timeOffId', timeOffId)
            const localVarPath = `/v2/time_off/{time_off_id}`
                .replace(`{${"time_off_id"}}`, encodeURIComponent(String(timeOffId !== undefined ? timeOffId : `-time_off_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication cookieAuth required
            await setApiKeyToObject({object: localVarHeaderParameter, type: "Cookie", key: "Cookie", keyParamName: "7session", configuration})
            if (xApiVersion != null) {
                localVarHeaderParameter['x-api-version'] = String(xApiVersion);
            }

            if (xCompanyGuid != null) {
                localVarHeaderParameter['x-company-guid'] = String(xCompanyGuid);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/time_off/{time_off_id}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create Time Off Settings
         * @param {number} companyId Company ID
         * @param {TimeOffSetTimeOffSettingsRequest} [timeOffSetTimeOffSettingsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setTimeOffSettings: async (companyId: number, timeOffSetTimeOffSettingsRequest?: TimeOffSetTimeOffSettingsRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('setTimeOffSettings', 'companyId', companyId)
            const localVarPath = `/v2/time_off_settings/{company_id}`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId !== undefined ? companyId : `-company_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication cookieAuth required
            await setApiKeyToObject({object: localVarHeaderParameter, type: "Cookie", key: "Cookie", keyParamName: "7session", configuration})

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: timeOffSetTimeOffSettingsRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/time_off_settings/{company_id}',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(timeOffSetTimeOffSettingsRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update Time Off
         * @param {number} timeOffId Time Off ID
         * @param {TimeOffUpdateTimeOffByIdRequest} timeOffUpdateTimeOffByIdRequest 
         * @param {string} [xApiVersion] 7shifts API version
         * @param {string} [xCompanyGuid] Company GUID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTimeOffById: async (timeOffId: number, timeOffUpdateTimeOffByIdRequest: TimeOffUpdateTimeOffByIdRequest, xApiVersion?: string, xCompanyGuid?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timeOffId' is not null or undefined
            assertParamExists('updateTimeOffById', 'timeOffId', timeOffId)
            // verify required parameter 'timeOffUpdateTimeOffByIdRequest' is not null or undefined
            assertParamExists('updateTimeOffById', 'timeOffUpdateTimeOffByIdRequest', timeOffUpdateTimeOffByIdRequest)
            const localVarPath = `/v2/time_off/{time_off_id}`
                .replace(`{${"time_off_id"}}`, encodeURIComponent(String(timeOffId !== undefined ? timeOffId : `-time_off_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication cookieAuth required
            await setApiKeyToObject({object: localVarHeaderParameter, type: "Cookie", key: "Cookie", keyParamName: "7session", configuration})
            if (xApiVersion != null) {
                localVarHeaderParameter['x-api-version'] = String(xApiVersion);
            }

            if (xCompanyGuid != null) {
                localVarHeaderParameter['x-company-guid'] = String(xCompanyGuid);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: timeOffUpdateTimeOffByIdRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/time_off/{time_off_id}',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(timeOffUpdateTimeOffByIdRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TimeOffApi - functional programming interface
 * @export
 */
export const TimeOffApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TimeOffApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Approve Time Off Request
         * @param {TimeOffApiApproveRequestRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async approveRequest(requestParameters: TimeOffApiApproveRequestRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TimeOffApproveRequest200Response>> {
            const timeOffApproveRequestRequest: TimeOffApproveRequestRequest = {
                status_action_message: requestParameters.status_action_message
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.approveRequest(requestParameters.timeOffId, requestParameters.xApiVersion, requestParameters.xCompanyGuid, timeOffApproveRequestRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Create time off
         * @param {TimeOffApiCreateRequestRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createRequest(requestParameters: TimeOffApiCreateRequestRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TimeOffCreateRequest200Response>> {
            const timeOffCreateRequestRequest: TimeOffCreateRequestRequest = {
                user_id: requestParameters.user_id,
                company_id: requestParameters.company_id,
                from_date: requestParameters.from_date,
                to_date: requestParameters.to_date,
                partial: requestParameters.partial,
                partial_from: requestParameters.partial_from,
                partial_to: requestParameters.partial_to,
                comments: requestParameters.comments,
                status: requestParameters.status,
                category: requestParameters.category,
                hours: requestParameters.hours,
                status_action_user_id: requestParameters.status_action_user_id,
                status_action_message: requestParameters.status_action_message
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createRequest(timeOffCreateRequestRequest, requestParameters.xApiVersion, requestParameters.xCompanyGuid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Decline Time Off Request
         * @param {TimeOffApiDeclineRequestRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async declineRequest(requestParameters: TimeOffApiDeclineRequestRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TimeOffDeclineRequest200Response>> {
            const timeOffDeclineRequestRequest: TimeOffDeclineRequestRequest = {
                status_action_message: requestParameters.status_action_message
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.declineRequest(requestParameters.timeOffId, requestParameters.xApiVersion, requestParameters.xCompanyGuid, timeOffDeclineRequestRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Retrieve Time Off Settings
         * @param {TimeOffApiGetSettingsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSettings(requestParameters: TimeOffApiGetSettingsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TimeOffGetSettings200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSettings(requestParameters.companyId, requestParameters.xApiVersion, requestParameters.xCompanyGuid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Retrieve Time Off
         * @param {TimeOffApiGetTimeOffByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTimeOffById(requestParameters: TimeOffApiGetTimeOffByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TimeOffGetTimeOffById200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTimeOffById(requestParameters.timeOffId, requestParameters.xApiVersion, requestParameters.xCompanyGuid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Retrieve Time Off Hours
         * @param {TimeOffApiGetTotalHoursRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTotalHours(requestParameters: TimeOffApiGetTotalHoursRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TimeOffGetTotalHours200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTotalHours(requestParameters.companyId, requestParameters.employeeId, requestParameters.dateStart, requestParameters.dateEnd, requestParameters.xApiVersion, requestParameters.xCompanyGuid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary List Time Off
         * @param {TimeOffApiListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async list(requestParameters: TimeOffApiListRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TimeOffList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.list(requestParameters.companyId, requestParameters.xApiVersion, requestParameters.xCompanyGuid, requestParameters.locationId, requestParameters.userId, requestParameters.status, requestParameters.category, requestParameters.toDateGte, requestParameters.sortBy, requestParameters.sortDir, requestParameters.cursor, requestParameters.limit, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete Time Off
         * @param {TimeOffApiRemoveRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async remove(requestParameters: TimeOffApiRemoveRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.remove(requestParameters.timeOffId, requestParameters.xApiVersion, requestParameters.xCompanyGuid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Create Time Off Settings
         * @param {TimeOffApiSetTimeOffSettingsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setTimeOffSettings(requestParameters: TimeOffApiSetTimeOffSettingsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TimeOffSetTimeOffSettings200Response>> {
            const timeOffSetTimeOffSettingsRequest: TimeOffSetTimeOffSettingsRequest = {
                paid_time_off: requestParameters.paid_time_off,
                sick_time_off: requestParameters.sick_time_off,
                time_off_request_comment: requestParameters.time_off_request_comment,
                time_off_request_notice: requestParameters.time_off_request_notice
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.setTimeOffSettings(requestParameters.companyId, timeOffSetTimeOffSettingsRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update Time Off
         * @param {TimeOffApiUpdateTimeOffByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateTimeOffById(requestParameters: TimeOffApiUpdateTimeOffByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TimeOffUpdateTimeOffById200Response>> {
            const timeOffUpdateTimeOffByIdRequest: TimeOffUpdateTimeOffByIdRequest = {
                user_id: requestParameters.user_id,
                from_date: requestParameters.from_date,
                to_date: requestParameters.to_date,
                partial: requestParameters.partial,
                partial_from: requestParameters.partial_from,
                partial_to: requestParameters.partial_to,
                comments: requestParameters.comments,
                status: requestParameters.status,
                status_action_message: requestParameters.status_action_message,
                category: requestParameters.category,
                hours: requestParameters.hours
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateTimeOffById(requestParameters.timeOffId, timeOffUpdateTimeOffByIdRequest, requestParameters.xApiVersion, requestParameters.xCompanyGuid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TimeOffApi - factory interface
 * @export
 */
export const TimeOffApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TimeOffApiFp(configuration)
    return {
        /**
         * 
         * @summary Approve Time Off Request
         * @param {TimeOffApiApproveRequestRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        approveRequest(requestParameters: TimeOffApiApproveRequestRequest, options?: AxiosRequestConfig): AxiosPromise<TimeOffApproveRequest200Response> {
            return localVarFp.approveRequest(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create time off
         * @param {TimeOffApiCreateRequestRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRequest(requestParameters: TimeOffApiCreateRequestRequest, options?: AxiosRequestConfig): AxiosPromise<TimeOffCreateRequest200Response> {
            return localVarFp.createRequest(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Decline Time Off Request
         * @param {TimeOffApiDeclineRequestRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        declineRequest(requestParameters: TimeOffApiDeclineRequestRequest, options?: AxiosRequestConfig): AxiosPromise<TimeOffDeclineRequest200Response> {
            return localVarFp.declineRequest(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve Time Off Settings
         * @param {TimeOffApiGetSettingsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSettings(requestParameters: TimeOffApiGetSettingsRequest, options?: AxiosRequestConfig): AxiosPromise<TimeOffGetSettings200Response> {
            return localVarFp.getSettings(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve Time Off
         * @param {TimeOffApiGetTimeOffByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTimeOffById(requestParameters: TimeOffApiGetTimeOffByIdRequest, options?: AxiosRequestConfig): AxiosPromise<TimeOffGetTimeOffById200Response> {
            return localVarFp.getTimeOffById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve Time Off Hours
         * @param {TimeOffApiGetTotalHoursRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTotalHours(requestParameters: TimeOffApiGetTotalHoursRequest, options?: AxiosRequestConfig): AxiosPromise<TimeOffGetTotalHours200Response> {
            return localVarFp.getTotalHours(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List Time Off
         * @param {TimeOffApiListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list(requestParameters: TimeOffApiListRequest, options?: AxiosRequestConfig): AxiosPromise<TimeOffList200Response> {
            return localVarFp.list(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete Time Off
         * @param {TimeOffApiRemoveRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        remove(requestParameters: TimeOffApiRemoveRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.remove(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create Time Off Settings
         * @param {TimeOffApiSetTimeOffSettingsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setTimeOffSettings(requestParameters: TimeOffApiSetTimeOffSettingsRequest, options?: AxiosRequestConfig): AxiosPromise<TimeOffSetTimeOffSettings200Response> {
            return localVarFp.setTimeOffSettings(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update Time Off
         * @param {TimeOffApiUpdateTimeOffByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTimeOffById(requestParameters: TimeOffApiUpdateTimeOffByIdRequest, options?: AxiosRequestConfig): AxiosPromise<TimeOffUpdateTimeOffById200Response> {
            return localVarFp.updateTimeOffById(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for approveRequest operation in TimeOffApi.
 * @export
 * @interface TimeOffApiApproveRequestRequest
 */
export type TimeOffApiApproveRequestRequest = {
    
    /**
    * Time Off ID
    * @type {number}
    * @memberof TimeOffApiApproveRequest
    */
    readonly timeOffId: number
    
    /**
    * 7shifts API version
    * @type {string}
    * @memberof TimeOffApiApproveRequest
    */
    readonly xApiVersion?: string
    
    /**
    * Company GUID
    * @type {string}
    * @memberof TimeOffApiApproveRequest
    */
    readonly xCompanyGuid?: string
    
} & TimeOffApproveRequestRequest

/**
 * Request parameters for createRequest operation in TimeOffApi.
 * @export
 * @interface TimeOffApiCreateRequestRequest
 */
export type TimeOffApiCreateRequestRequest = {
    
    /**
    * 7shifts API version
    * @type {string}
    * @memberof TimeOffApiCreateRequest
    */
    readonly xApiVersion?: string
    
    /**
    * Company GUID
    * @type {string}
    * @memberof TimeOffApiCreateRequest
    */
    readonly xCompanyGuid?: string
    
} & TimeOffCreateRequestRequest

/**
 * Request parameters for declineRequest operation in TimeOffApi.
 * @export
 * @interface TimeOffApiDeclineRequestRequest
 */
export type TimeOffApiDeclineRequestRequest = {
    
    /**
    * Time Off ID
    * @type {number}
    * @memberof TimeOffApiDeclineRequest
    */
    readonly timeOffId: number
    
    /**
    * 7shifts API version
    * @type {string}
    * @memberof TimeOffApiDeclineRequest
    */
    readonly xApiVersion?: string
    
    /**
    * Company GUID
    * @type {string}
    * @memberof TimeOffApiDeclineRequest
    */
    readonly xCompanyGuid?: string
    
} & TimeOffDeclineRequestRequest

/**
 * Request parameters for getSettings operation in TimeOffApi.
 * @export
 * @interface TimeOffApiGetSettingsRequest
 */
export type TimeOffApiGetSettingsRequest = {
    
    /**
    * Company ID
    * @type {number}
    * @memberof TimeOffApiGetSettings
    */
    readonly companyId: number
    
    /**
    * 7shifts API version
    * @type {string}
    * @memberof TimeOffApiGetSettings
    */
    readonly xApiVersion?: string
    
    /**
    * Company GUID
    * @type {string}
    * @memberof TimeOffApiGetSettings
    */
    readonly xCompanyGuid?: string
    
}

/**
 * Request parameters for getTimeOffById operation in TimeOffApi.
 * @export
 * @interface TimeOffApiGetTimeOffByIdRequest
 */
export type TimeOffApiGetTimeOffByIdRequest = {
    
    /**
    * Time Off ID
    * @type {number}
    * @memberof TimeOffApiGetTimeOffById
    */
    readonly timeOffId: number
    
    /**
    * 7shifts API version
    * @type {string}
    * @memberof TimeOffApiGetTimeOffById
    */
    readonly xApiVersion?: string
    
    /**
    * Company GUID
    * @type {string}
    * @memberof TimeOffApiGetTimeOffById
    */
    readonly xCompanyGuid?: string
    
}

/**
 * Request parameters for getTotalHours operation in TimeOffApi.
 * @export
 * @interface TimeOffApiGetTotalHoursRequest
 */
export type TimeOffApiGetTotalHoursRequest = {
    
    /**
    * Company ID
    * @type {number}
    * @memberof TimeOffApiGetTotalHours
    */
    readonly companyId: number
    
    /**
    * Employee IDs
    * @type {Array<number>}
    * @memberof TimeOffApiGetTotalHours
    */
    readonly employeeId: Array<number>
    
    /**
    * An ISO 8601 date string
    * @type {string}
    * @memberof TimeOffApiGetTotalHours
    */
    readonly dateStart: string
    
    /**
    * An ISO 8601 date string
    * @type {string}
    * @memberof TimeOffApiGetTotalHours
    */
    readonly dateEnd: string
    
    /**
    * 7shifts API version
    * @type {string}
    * @memberof TimeOffApiGetTotalHours
    */
    readonly xApiVersion?: string
    
    /**
    * Company GUID
    * @type {string}
    * @memberof TimeOffApiGetTotalHours
    */
    readonly xCompanyGuid?: string
    
}

/**
 * Request parameters for list operation in TimeOffApi.
 * @export
 * @interface TimeOffApiListRequest
 */
export type TimeOffApiListRequest = {
    
    /**
    * Company ID
    * @type {number}
    * @memberof TimeOffApiList
    */
    readonly companyId: number
    
    /**
    * 7shifts API version
    * @type {string}
    * @memberof TimeOffApiList
    */
    readonly xApiVersion?: string
    
    /**
    * Company GUID
    * @type {string}
    * @memberof TimeOffApiList
    */
    readonly xCompanyGuid?: string
    
    /**
    * Location ID
    * @type {number}
    * @memberof TimeOffApiList
    */
    readonly locationId?: number
    
    /**
    * User ID
    * @type {number}
    * @memberof TimeOffApiList
    */
    readonly userId?: number
    
    /**
    * Status
    * @type {number}
    * @memberof TimeOffApiList
    */
    readonly status?: number
    
    /**
    * Category
    * @type {'paid' | 'unpaid' | 'paid_sick'}
    * @memberof TimeOffApiList
    */
    readonly category?: 'paid' | 'unpaid' | 'paid_sick'
    
    /**
    * Return time offs that end after a specified date.
    * @type {string}
    * @memberof TimeOffApiList
    */
    readonly toDateGte?: string
    
    /**
    * Sort by column
    * @type {'created' | 'from_date'}
    * @memberof TimeOffApiList
    */
    readonly sortBy?: 'created' | 'from_date'
    
    /**
    * Sort by direction (asc, desc)
    * @type {'asc' | 'desc'}
    * @memberof TimeOffApiList
    */
    readonly sortDir?: 'asc' | 'desc'
    
    /**
    * Cursor for the next or previous page of results.
    * @type {string}
    * @memberof TimeOffApiList
    */
    readonly cursor?: string
    
    /**
    * The number of results desired per page.
    * @type {number}
    * @memberof TimeOffApiList
    */
    readonly limit?: number
    
}

/**
 * Request parameters for remove operation in TimeOffApi.
 * @export
 * @interface TimeOffApiRemoveRequest
 */
export type TimeOffApiRemoveRequest = {
    
    /**
    * Time Off ID
    * @type {number}
    * @memberof TimeOffApiRemove
    */
    readonly timeOffId: number
    
    /**
    * 7shifts API version
    * @type {string}
    * @memberof TimeOffApiRemove
    */
    readonly xApiVersion?: string
    
    /**
    * Company GUID
    * @type {string}
    * @memberof TimeOffApiRemove
    */
    readonly xCompanyGuid?: string
    
}

/**
 * Request parameters for setTimeOffSettings operation in TimeOffApi.
 * @export
 * @interface TimeOffApiSetTimeOffSettingsRequest
 */
export type TimeOffApiSetTimeOffSettingsRequest = {
    
    /**
    * Company ID
    * @type {number}
    * @memberof TimeOffApiSetTimeOffSettings
    */
    readonly companyId: number
    
} & TimeOffSetTimeOffSettingsRequest

/**
 * Request parameters for updateTimeOffById operation in TimeOffApi.
 * @export
 * @interface TimeOffApiUpdateTimeOffByIdRequest
 */
export type TimeOffApiUpdateTimeOffByIdRequest = {
    
    /**
    * Time Off ID
    * @type {number}
    * @memberof TimeOffApiUpdateTimeOffById
    */
    readonly timeOffId: number
    
    /**
    * 7shifts API version
    * @type {string}
    * @memberof TimeOffApiUpdateTimeOffById
    */
    readonly xApiVersion?: string
    
    /**
    * Company GUID
    * @type {string}
    * @memberof TimeOffApiUpdateTimeOffById
    */
    readonly xCompanyGuid?: string
    
} & TimeOffUpdateTimeOffByIdRequest

/**
 * TimeOffApiGenerated - object-oriented interface
 * @export
 * @class TimeOffApiGenerated
 * @extends {BaseAPI}
 */
export class TimeOffApiGenerated extends BaseAPI {
    /**
     * 
     * @summary Approve Time Off Request
     * @param {TimeOffApiApproveRequestRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TimeOffApiGenerated
     */
    public approveRequest(requestParameters: TimeOffApiApproveRequestRequest, options?: AxiosRequestConfig) {
        return TimeOffApiFp(this.configuration).approveRequest(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create time off
     * @param {TimeOffApiCreateRequestRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TimeOffApiGenerated
     */
    public createRequest(requestParameters: TimeOffApiCreateRequestRequest, options?: AxiosRequestConfig) {
        return TimeOffApiFp(this.configuration).createRequest(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Decline Time Off Request
     * @param {TimeOffApiDeclineRequestRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TimeOffApiGenerated
     */
    public declineRequest(requestParameters: TimeOffApiDeclineRequestRequest, options?: AxiosRequestConfig) {
        return TimeOffApiFp(this.configuration).declineRequest(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve Time Off Settings
     * @param {TimeOffApiGetSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TimeOffApiGenerated
     */
    public getSettings(requestParameters: TimeOffApiGetSettingsRequest, options?: AxiosRequestConfig) {
        return TimeOffApiFp(this.configuration).getSettings(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve Time Off
     * @param {TimeOffApiGetTimeOffByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TimeOffApiGenerated
     */
    public getTimeOffById(requestParameters: TimeOffApiGetTimeOffByIdRequest, options?: AxiosRequestConfig) {
        return TimeOffApiFp(this.configuration).getTimeOffById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve Time Off Hours
     * @param {TimeOffApiGetTotalHoursRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TimeOffApiGenerated
     */
    public getTotalHours(requestParameters: TimeOffApiGetTotalHoursRequest, options?: AxiosRequestConfig) {
        return TimeOffApiFp(this.configuration).getTotalHours(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List Time Off
     * @param {TimeOffApiListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TimeOffApiGenerated
     */
    public list(requestParameters: TimeOffApiListRequest, options?: AxiosRequestConfig) {
        return TimeOffApiFp(this.configuration).list(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete Time Off
     * @param {TimeOffApiRemoveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TimeOffApiGenerated
     */
    public remove(requestParameters: TimeOffApiRemoveRequest, options?: AxiosRequestConfig) {
        return TimeOffApiFp(this.configuration).remove(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create Time Off Settings
     * @param {TimeOffApiSetTimeOffSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TimeOffApiGenerated
     */
    public setTimeOffSettings(requestParameters: TimeOffApiSetTimeOffSettingsRequest, options?: AxiosRequestConfig) {
        return TimeOffApiFp(this.configuration).setTimeOffSettings(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update Time Off
     * @param {TimeOffApiUpdateTimeOffByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TimeOffApiGenerated
     */
    public updateTimeOffById(requestParameters: TimeOffApiUpdateTimeOffByIdRequest, options?: AxiosRequestConfig) {
        return TimeOffApiFp(this.configuration).updateTimeOffById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
