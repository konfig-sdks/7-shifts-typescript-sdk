/* tslint:disable */
/* eslint-disable */
/*
7shifts API

7shifts is a team management software designed for restaurants. We help managers and operators spend less time and effort scheduling their staff, reduce their monthly labor costs and improve team communication. The result is simplified team management, one shift at a time.

7shifts also offers free mobile apps (iOS and Android) allowing managers and employees to have everything at their fingertips.

Start your free trial or request a demo at www.7shifts.com.

The version of the OpenAPI document: 2023-05-01
Contact: api-support@7shifts.com

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { CompaniesGetById500Response } from '../models';
// @ts-ignore
import { CompaniesGetByIdResponse } from '../models';
// @ts-ignore
import { CompaniesGetLaborSettings401Response } from '../models';
// @ts-ignore
import { CompaniesGetLaborSettings403Response } from '../models';
// @ts-ignore
import { CompaniesGetLaborSettings500Response } from '../models';
// @ts-ignore
import { CompaniesGetLaborSettingsResponse } from '../models';
// @ts-ignore
import { CompaniesList401Response } from '../models';
// @ts-ignore
import { CompaniesList403Response } from '../models';
// @ts-ignore
import { CompaniesList500Response } from '../models';
// @ts-ignore
import { CompaniesListInactiveReasons400Response } from '../models';
// @ts-ignore
import { CompaniesListInactiveReasons403Response } from '../models';
// @ts-ignore
import { CompaniesListInactiveReasons500Response } from '../models';
// @ts-ignore
import { CompaniesListInactiveReasonsResponse } from '../models';
// @ts-ignore
import { CompaniesListResponse } from '../models';
// @ts-ignore
import { CompaniesUpdateCompanyById403Response } from '../models';
// @ts-ignore
import { CompaniesUpdateCompanyByIdRequest } from '../models';
// @ts-ignore
import { CompaniesUpdateCompanyByIdResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * CompaniesApi - axios parameter creator
 * @export
 */
export const CompaniesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Retrieve Company
         * @param {number} id Company ID
         * @param {string} [xApiVersion] 7shifts API version
         * @param {string} [xCompanyGuid] Company GUID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById: async (id: number, xApiVersion?: string, xCompanyGuid?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getById', 'id', id)
            const localVarPath = `/v2/companies/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication cookieAuth required
            await setApiKeyToObject({object: localVarHeaderParameter, type: "Cookie", key: "Cookie", keyParamName: "7session", configuration})
            if (xApiVersion != null) {
                localVarHeaderParameter['x-api-version'] = String(xApiVersion);
            }

            if (xCompanyGuid != null) {
                localVarHeaderParameter['x-company-guid'] = String(xCompanyGuid);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/companies/{id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve Labor Settings
         * @param {number} companyId Company ID
         * @param {string} [xApiVersion] 7shifts API version
         * @param {string} [xCompanyGuid] Company GUID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLaborSettings: async (companyId: number, xApiVersion?: string, xCompanyGuid?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('getLaborSettings', 'companyId', companyId)
            const localVarPath = `/v2/company/{company_id}/labor_settings`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId !== undefined ? companyId : `-company_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication cookieAuth required
            await setApiKeyToObject({object: localVarHeaderParameter, type: "Cookie", key: "Cookie", keyParamName: "7session", configuration})
            if (xApiVersion != null) {
                localVarHeaderParameter['x-api-version'] = String(xApiVersion);
            }

            if (xCompanyGuid != null) {
                localVarHeaderParameter['x-company-guid'] = String(xCompanyGuid);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/company/{company_id}/labor_settings',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List Companies
         * @param {string} [xApiVersion] 7shifts API version
         * @param {string} [xCompanyGuid] Company GUID
         * @param {string} [modifiedSince] Return companies that have been modified since the specified date. Format YYYY-MM-DD
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list: async (xApiVersion?: string, xCompanyGuid?: string, modifiedSince?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v2/companies`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication cookieAuth required
            await setApiKeyToObject({object: localVarHeaderParameter, type: "Cookie", key: "Cookie", keyParamName: "7session", configuration})
            if (modifiedSince !== undefined) {
                localVarQueryParameter['modified_since'] = modifiedSince;
            }

            if (xApiVersion != null) {
                localVarHeaderParameter['x-api-version'] = String(xApiVersion);
            }

            if (xCompanyGuid != null) {
                localVarHeaderParameter['x-company-guid'] = String(xCompanyGuid);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/companies',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List Inactive Reasons
         * @param {number} companyId Company ID
         * @param {string} [xApiVersion] 7shifts API version
         * @param {string} [xCompanyGuid] Company GUID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listInactiveReasons: async (companyId: number, xApiVersion?: string, xCompanyGuid?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('listInactiveReasons', 'companyId', companyId)
            const localVarPath = `/v2/company/{company_id}/inactive_reasons`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId !== undefined ? companyId : `-company_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication cookieAuth required
            await setApiKeyToObject({object: localVarHeaderParameter, type: "Cookie", key: "Cookie", keyParamName: "7session", configuration})
            if (xApiVersion != null) {
                localVarHeaderParameter['x-api-version'] = String(xApiVersion);
            }

            if (xCompanyGuid != null) {
                localVarHeaderParameter['x-company-guid'] = String(xCompanyGuid);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/company/{company_id}/inactive_reasons',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update Company
         * @param {number} id Company ID
         * @param {CompaniesUpdateCompanyByIdRequest} companiesUpdateCompanyByIdRequest 
         * @param {string} [xApiVersion] 7shifts API version
         * @param {string} [xCompanyGuid] Company GUID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCompanyById: async (id: number, companiesUpdateCompanyByIdRequest: CompaniesUpdateCompanyByIdRequest, xApiVersion?: string, xCompanyGuid?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateCompanyById', 'id', id)
            // verify required parameter 'companiesUpdateCompanyByIdRequest' is not null or undefined
            assertParamExists('updateCompanyById', 'companiesUpdateCompanyByIdRequest', companiesUpdateCompanyByIdRequest)
            const localVarPath = `/v2/companies/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication cookieAuth required
            await setApiKeyToObject({object: localVarHeaderParameter, type: "Cookie", key: "Cookie", keyParamName: "7session", configuration})
            if (xApiVersion != null) {
                localVarHeaderParameter['x-api-version'] = String(xApiVersion);
            }

            if (xCompanyGuid != null) {
                localVarHeaderParameter['x-company-guid'] = String(xCompanyGuid);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: companiesUpdateCompanyByIdRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/companies/{id}',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(companiesUpdateCompanyByIdRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CompaniesApi - functional programming interface
 * @export
 */
export const CompaniesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CompaniesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Retrieve Company
         * @param {CompaniesApiGetByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getById(requestParameters: CompaniesApiGetByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CompaniesGetByIdResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getById(requestParameters.id, requestParameters.xApiVersion, requestParameters.xCompanyGuid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Retrieve Labor Settings
         * @param {CompaniesApiGetLaborSettingsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLaborSettings(requestParameters: CompaniesApiGetLaborSettingsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CompaniesGetLaborSettingsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLaborSettings(requestParameters.companyId, requestParameters.xApiVersion, requestParameters.xCompanyGuid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary List Companies
         * @param {CompaniesApiListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async list(requestParameters: CompaniesApiListRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CompaniesListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.list(requestParameters.xApiVersion, requestParameters.xCompanyGuid, requestParameters.modifiedSince, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary List Inactive Reasons
         * @param {CompaniesApiListInactiveReasonsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listInactiveReasons(requestParameters: CompaniesApiListInactiveReasonsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CompaniesListInactiveReasonsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listInactiveReasons(requestParameters.companyId, requestParameters.xApiVersion, requestParameters.xCompanyGuid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update Company
         * @param {CompaniesApiUpdateCompanyByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateCompanyById(requestParameters: CompaniesApiUpdateCompanyByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CompaniesUpdateCompanyByIdResponse>> {
            const companiesUpdateCompanyByIdRequest: CompaniesUpdateCompanyByIdRequest = {
                name: requestParameters.name,
                country: requestParameters.country,
                photo: requestParameters.photo,
                pos: requestParameters.pos
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateCompanyById(requestParameters.id, companiesUpdateCompanyByIdRequest, requestParameters.xApiVersion, requestParameters.xCompanyGuid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CompaniesApi - factory interface
 * @export
 */
export const CompaniesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CompaniesApiFp(configuration)
    return {
        /**
         * 
         * @summary Retrieve Company
         * @param {CompaniesApiGetByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById(requestParameters: CompaniesApiGetByIdRequest, options?: AxiosRequestConfig): AxiosPromise<CompaniesGetByIdResponse> {
            return localVarFp.getById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve Labor Settings
         * @param {CompaniesApiGetLaborSettingsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLaborSettings(requestParameters: CompaniesApiGetLaborSettingsRequest, options?: AxiosRequestConfig): AxiosPromise<CompaniesGetLaborSettingsResponse> {
            return localVarFp.getLaborSettings(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List Companies
         * @param {CompaniesApiListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list(requestParameters: CompaniesApiListRequest = {}, options?: AxiosRequestConfig): AxiosPromise<CompaniesListResponse> {
            return localVarFp.list(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List Inactive Reasons
         * @param {CompaniesApiListInactiveReasonsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listInactiveReasons(requestParameters: CompaniesApiListInactiveReasonsRequest, options?: AxiosRequestConfig): AxiosPromise<CompaniesListInactiveReasonsResponse> {
            return localVarFp.listInactiveReasons(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update Company
         * @param {CompaniesApiUpdateCompanyByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCompanyById(requestParameters: CompaniesApiUpdateCompanyByIdRequest, options?: AxiosRequestConfig): AxiosPromise<CompaniesUpdateCompanyByIdResponse> {
            return localVarFp.updateCompanyById(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getById operation in CompaniesApi.
 * @export
 * @interface CompaniesApiGetByIdRequest
 */
export type CompaniesApiGetByIdRequest = {
    
    /**
    * Company ID
    * @type {number}
    * @memberof CompaniesApiGetById
    */
    readonly id: number
    
    /**
    * 7shifts API version
    * @type {string}
    * @memberof CompaniesApiGetById
    */
    readonly xApiVersion?: string
    
    /**
    * Company GUID
    * @type {string}
    * @memberof CompaniesApiGetById
    */
    readonly xCompanyGuid?: string
    
}

/**
 * Request parameters for getLaborSettings operation in CompaniesApi.
 * @export
 * @interface CompaniesApiGetLaborSettingsRequest
 */
export type CompaniesApiGetLaborSettingsRequest = {
    
    /**
    * Company ID
    * @type {number}
    * @memberof CompaniesApiGetLaborSettings
    */
    readonly companyId: number
    
    /**
    * 7shifts API version
    * @type {string}
    * @memberof CompaniesApiGetLaborSettings
    */
    readonly xApiVersion?: string
    
    /**
    * Company GUID
    * @type {string}
    * @memberof CompaniesApiGetLaborSettings
    */
    readonly xCompanyGuid?: string
    
}

/**
 * Request parameters for list operation in CompaniesApi.
 * @export
 * @interface CompaniesApiListRequest
 */
export type CompaniesApiListRequest = {
    
    /**
    * 7shifts API version
    * @type {string}
    * @memberof CompaniesApiList
    */
    readonly xApiVersion?: string
    
    /**
    * Company GUID
    * @type {string}
    * @memberof CompaniesApiList
    */
    readonly xCompanyGuid?: string
    
    /**
    * Return companies that have been modified since the specified date. Format YYYY-MM-DD
    * @type {string}
    * @memberof CompaniesApiList
    */
    readonly modifiedSince?: string
    
}

/**
 * Request parameters for listInactiveReasons operation in CompaniesApi.
 * @export
 * @interface CompaniesApiListInactiveReasonsRequest
 */
export type CompaniesApiListInactiveReasonsRequest = {
    
    /**
    * Company ID
    * @type {number}
    * @memberof CompaniesApiListInactiveReasons
    */
    readonly companyId: number
    
    /**
    * 7shifts API version
    * @type {string}
    * @memberof CompaniesApiListInactiveReasons
    */
    readonly xApiVersion?: string
    
    /**
    * Company GUID
    * @type {string}
    * @memberof CompaniesApiListInactiveReasons
    */
    readonly xCompanyGuid?: string
    
}

/**
 * Request parameters for updateCompanyById operation in CompaniesApi.
 * @export
 * @interface CompaniesApiUpdateCompanyByIdRequest
 */
export type CompaniesApiUpdateCompanyByIdRequest = {
    
    /**
    * Company ID
    * @type {number}
    * @memberof CompaniesApiUpdateCompanyById
    */
    readonly id: number
    
    /**
    * 7shifts API version
    * @type {string}
    * @memberof CompaniesApiUpdateCompanyById
    */
    readonly xApiVersion?: string
    
    /**
    * Company GUID
    * @type {string}
    * @memberof CompaniesApiUpdateCompanyById
    */
    readonly xCompanyGuid?: string
    
} & CompaniesUpdateCompanyByIdRequest

/**
 * CompaniesApiGenerated - object-oriented interface
 * @export
 * @class CompaniesApiGenerated
 * @extends {BaseAPI}
 */
export class CompaniesApiGenerated extends BaseAPI {
    /**
     * 
     * @summary Retrieve Company
     * @param {CompaniesApiGetByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompaniesApiGenerated
     */
    public getById(requestParameters: CompaniesApiGetByIdRequest, options?: AxiosRequestConfig) {
        return CompaniesApiFp(this.configuration).getById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve Labor Settings
     * @param {CompaniesApiGetLaborSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompaniesApiGenerated
     */
    public getLaborSettings(requestParameters: CompaniesApiGetLaborSettingsRequest, options?: AxiosRequestConfig) {
        return CompaniesApiFp(this.configuration).getLaborSettings(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List Companies
     * @param {CompaniesApiListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompaniesApiGenerated
     */
    public list(requestParameters: CompaniesApiListRequest = {}, options?: AxiosRequestConfig) {
        return CompaniesApiFp(this.configuration).list(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List Inactive Reasons
     * @param {CompaniesApiListInactiveReasonsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompaniesApiGenerated
     */
    public listInactiveReasons(requestParameters: CompaniesApiListInactiveReasonsRequest, options?: AxiosRequestConfig) {
        return CompaniesApiFp(this.configuration).listInactiveReasons(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update Company
     * @param {CompaniesApiUpdateCompanyByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompaniesApiGenerated
     */
    public updateCompanyById(requestParameters: CompaniesApiUpdateCompanyByIdRequest, options?: AxiosRequestConfig) {
        return CompaniesApiFp(this.configuration).updateCompanyById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
