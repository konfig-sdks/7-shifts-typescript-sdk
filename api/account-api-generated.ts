/* tslint:disable */
/* eslint-disable */
/*
7shifts API

7shifts is a team management software designed for restaurants. We help managers and operators spend less time and effort scheduling their staff, reduce their monthly labor costs and improve team communication. The result is simplified team management, one shift at a time.

7shifts also offers free mobile apps (iOS and Android) allowing managers and employees to have everything at their fingertips.

Start your free trial or request a demo at www.7shifts.com.

The version of the OpenAPI document: 2023-05-01
Contact: api-support@7shifts.com

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AccountCreateTrialAccount400Response } from '../models';
// @ts-ignore
import { AccountCreateTrialAccount401Response } from '../models';
// @ts-ignore
import { AccountCreateTrialAccount403Response } from '../models';
// @ts-ignore
import { AccountCreateTrialAccount422Response } from '../models';
// @ts-ignore
import { AccountCreateTrialAccount500Response } from '../models';
// @ts-ignore
import { AccountCreateTrialAccountRequest } from '../models';
// @ts-ignore
import { AccountCreateTrialAccountResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * AccountApi - axios parameter creator
 * @export
 */
export const AccountApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create Trial Account
         * @param {AccountCreateTrialAccountRequest} accountCreateTrialAccountRequest 
         * @param {string} [xApiVersion] 7shifts API version
         * @param {string} [xCompanyGuid] Company GUID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTrialAccount: async (accountCreateTrialAccountRequest: AccountCreateTrialAccountRequest, xApiVersion?: string, xCompanyGuid?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountCreateTrialAccountRequest' is not null or undefined
            assertParamExists('createTrialAccount', 'accountCreateTrialAccountRequest', accountCreateTrialAccountRequest)
            const localVarPath = `/v2/partner_company_creation`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication cookieAuth required
            await setApiKeyToObject({object: localVarHeaderParameter, type: "Cookie", key: "Cookie", keyParamName: "7session", configuration})
            if (xApiVersion != null) {
                localVarHeaderParameter['x-api-version'] = String(xApiVersion);
            }

            if (xCompanyGuid != null) {
                localVarHeaderParameter['x-company-guid'] = String(xCompanyGuid);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: accountCreateTrialAccountRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/partner_company_creation',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(accountCreateTrialAccountRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AccountApi - functional programming interface
 * @export
 */
export const AccountApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AccountApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create Trial Account
         * @param {AccountApiCreateTrialAccountRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createTrialAccount(requestParameters: AccountApiCreateTrialAccountRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccountCreateTrialAccountResponse>> {
            const accountCreateTrialAccountRequest: AccountCreateTrialAccountRequest = {
                email: requestParameters.email,
                firstname: requestParameters.firstname,
                lastname: requestParameters.lastname,
                company_name: requestParameters.company_name,
                country: requestParameters.country,
                mobile_phone: requestParameters.mobile_phone,
                utm_campaign: requestParameters.utm_campaign,
                utm_content: requestParameters.utm_content,
                utm_medium: requestParameters.utm_medium,
                utm_source: requestParameters.utm_source,
                utm_term: requestParameters.utm_term
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createTrialAccount(accountCreateTrialAccountRequest, requestParameters.xApiVersion, requestParameters.xCompanyGuid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AccountApi - factory interface
 * @export
 */
export const AccountApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AccountApiFp(configuration)
    return {
        /**
         * 
         * @summary Create Trial Account
         * @param {AccountApiCreateTrialAccountRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTrialAccount(requestParameters: AccountApiCreateTrialAccountRequest, options?: AxiosRequestConfig): AxiosPromise<AccountCreateTrialAccountResponse> {
            return localVarFp.createTrialAccount(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createTrialAccount operation in AccountApi.
 * @export
 * @interface AccountApiCreateTrialAccountRequest
 */
export type AccountApiCreateTrialAccountRequest = {
    
    /**
    * 7shifts API version
    * @type {string}
    * @memberof AccountApiCreateTrialAccount
    */
    readonly xApiVersion?: string
    
    /**
    * Company GUID
    * @type {string}
    * @memberof AccountApiCreateTrialAccount
    */
    readonly xCompanyGuid?: string
    
} & AccountCreateTrialAccountRequest

/**
 * AccountApiGenerated - object-oriented interface
 * @export
 * @class AccountApiGenerated
 * @extends {BaseAPI}
 */
export class AccountApiGenerated extends BaseAPI {
    /**
     * 
     * @summary Create Trial Account
     * @param {AccountApiCreateTrialAccountRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApiGenerated
     */
    public createTrialAccount(requestParameters: AccountApiCreateTrialAccountRequest, options?: AxiosRequestConfig) {
        return AccountApiFp(this.configuration).createTrialAccount(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
