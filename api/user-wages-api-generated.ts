/* tslint:disable */
/* eslint-disable */
/*
7shifts API

7shifts is a team management software designed for restaurants. We help managers and operators spend less time and effort scheduling their staff, reduce their monthly labor costs and improve team communication. The result is simplified team management, one shift at a time.

7shifts also offers free mobile apps (iOS and Android) allowing managers and employees to have everything at their fingertips.

Start your free trial or request a demo at www.7shifts.com.

The version of the OpenAPI document: 2023-05-01
Contact: api-support@7shifts.com

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { UserWagesCreate403Response } from '../models';
// @ts-ignore
import { UserWagesCreate409Response } from '../models';
// @ts-ignore
import { UserWagesCreate422Response } from '../models';
// @ts-ignore
import { UserWagesCreate500Response } from '../models';
// @ts-ignore
import { UserWagesCreateRequest } from '../models';
// @ts-ignore
import { UserWagesCreateResponse } from '../models';
// @ts-ignore
import { UserWagesList403Response } from '../models';
// @ts-ignore
import { UserWagesList404Response } from '../models';
// @ts-ignore
import { UserWagesList500Response } from '../models';
// @ts-ignore
import { UserWagesListResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * UserWagesApi - axios parameter creator
 * @export
 */
export const UserWagesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create User Wage
         * @param {number} companyId Company ID
         * @param {number} userId User ID
         * @param {UserWagesCreateRequest} userWagesCreateRequest 
         * @param {string} [xApiVersion] 7shifts API version
         * @param {string} [xCompanyGuid] Company GUID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create: async (companyId: number, userId: number, userWagesCreateRequest: UserWagesCreateRequest, xApiVersion?: string, xCompanyGuid?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('create', 'companyId', companyId)
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('create', 'userId', userId)
            // verify required parameter 'userWagesCreateRequest' is not null or undefined
            assertParamExists('create', 'userWagesCreateRequest', userWagesCreateRequest)
            const localVarPath = `/v2/company/{company_id}/users/{user_id}/wages`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId !== undefined ? companyId : `-company_id-`)))
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId !== undefined ? userId : `-user_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication cookieAuth required
            await setApiKeyToObject({object: localVarHeaderParameter, type: "Cookie", key: "Cookie", keyParamName: "7session", configuration})
            if (xApiVersion != null) {
                localVarHeaderParameter['x-api-version'] = String(xApiVersion);
            }

            if (xCompanyGuid != null) {
                localVarHeaderParameter['x-company-guid'] = String(xCompanyGuid);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: userWagesCreateRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/company/{company_id}/users/{user_id}/wages',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(userWagesCreateRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List User Wages
         * @param {number} companyId Company ID
         * @param {number} userId User ID
         * @param {string} [xApiVersion] 7shifts API version
         * @param {string} [xCompanyGuid] Company GUID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list: async (companyId: number, userId: number, xApiVersion?: string, xCompanyGuid?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('list', 'companyId', companyId)
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('list', 'userId', userId)
            const localVarPath = `/v2/company/{company_id}/users/{user_id}/wages`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId !== undefined ? companyId : `-company_id-`)))
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId !== undefined ? userId : `-user_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication cookieAuth required
            await setApiKeyToObject({object: localVarHeaderParameter, type: "Cookie", key: "Cookie", keyParamName: "7session", configuration})
            if (xApiVersion != null) {
                localVarHeaderParameter['x-api-version'] = String(xApiVersion);
            }

            if (xCompanyGuid != null) {
                localVarHeaderParameter['x-company-guid'] = String(xCompanyGuid);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/company/{company_id}/users/{user_id}/wages',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserWagesApi - functional programming interface
 * @export
 */
export const UserWagesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UserWagesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create User Wage
         * @param {UserWagesApiCreateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async create(requestParameters: UserWagesApiCreateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserWagesCreateResponse>> {
            const userWagesCreateRequest: UserWagesCreateRequest = {
                effective_date: requestParameters.effective_date,
                role_id: requestParameters.role_id,
                wage_type: requestParameters.wage_type,
                wage_cents: requestParameters.wage_cents
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.create(requestParameters.companyId, requestParameters.userId, userWagesCreateRequest, requestParameters.xApiVersion, requestParameters.xCompanyGuid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary List User Wages
         * @param {UserWagesApiListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async list(requestParameters: UserWagesApiListRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserWagesListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.list(requestParameters.companyId, requestParameters.userId, requestParameters.xApiVersion, requestParameters.xCompanyGuid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UserWagesApi - factory interface
 * @export
 */
export const UserWagesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UserWagesApiFp(configuration)
    return {
        /**
         * 
         * @summary Create User Wage
         * @param {UserWagesApiCreateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create(requestParameters: UserWagesApiCreateRequest, options?: AxiosRequestConfig): AxiosPromise<UserWagesCreateResponse> {
            return localVarFp.create(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List User Wages
         * @param {UserWagesApiListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list(requestParameters: UserWagesApiListRequest, options?: AxiosRequestConfig): AxiosPromise<UserWagesListResponse> {
            return localVarFp.list(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for create operation in UserWagesApi.
 * @export
 * @interface UserWagesApiCreateRequest
 */
export type UserWagesApiCreateRequest = {
    
    /**
    * Company ID
    * @type {number}
    * @memberof UserWagesApiCreate
    */
    readonly companyId: number
    
    /**
    * User ID
    * @type {number}
    * @memberof UserWagesApiCreate
    */
    readonly userId: number
    
    /**
    * 7shifts API version
    * @type {string}
    * @memberof UserWagesApiCreate
    */
    readonly xApiVersion?: string
    
    /**
    * Company GUID
    * @type {string}
    * @memberof UserWagesApiCreate
    */
    readonly xCompanyGuid?: string
    
} & UserWagesCreateRequest

/**
 * Request parameters for list operation in UserWagesApi.
 * @export
 * @interface UserWagesApiListRequest
 */
export type UserWagesApiListRequest = {
    
    /**
    * Company ID
    * @type {number}
    * @memberof UserWagesApiList
    */
    readonly companyId: number
    
    /**
    * User ID
    * @type {number}
    * @memberof UserWagesApiList
    */
    readonly userId: number
    
    /**
    * 7shifts API version
    * @type {string}
    * @memberof UserWagesApiList
    */
    readonly xApiVersion?: string
    
    /**
    * Company GUID
    * @type {string}
    * @memberof UserWagesApiList
    */
    readonly xCompanyGuid?: string
    
}

/**
 * UserWagesApiGenerated - object-oriented interface
 * @export
 * @class UserWagesApiGenerated
 * @extends {BaseAPI}
 */
export class UserWagesApiGenerated extends BaseAPI {
    /**
     * 
     * @summary Create User Wage
     * @param {UserWagesApiCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserWagesApiGenerated
     */
    public create(requestParameters: UserWagesApiCreateRequest, options?: AxiosRequestConfig) {
        return UserWagesApiFp(this.configuration).create(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List User Wages
     * @param {UserWagesApiListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserWagesApiGenerated
     */
    public list(requestParameters: UserWagesApiListRequest, options?: AxiosRequestConfig) {
        return UserWagesApiFp(this.configuration).list(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
