/* tslint:disable */
/* eslint-disable */
/*
7shifts API

7shifts is a team management software designed for restaurants. We help managers and operators spend less time and effort scheduling their staff, reduce their monthly labor costs and improve team communication. The result is simplified team management, one shift at a time.

7shifts also offers free mobile apps (iOS and Android) allowing managers and employees to have everything at their fingertips.

Start your free trial or request a demo at www.7shifts.com.

The version of the OpenAPI document: 2023-05-01
Contact: api-support@7shifts.com

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ScheduleEventsCreateEvent400Response } from '../models';
// @ts-ignore
import { ScheduleEventsCreateEvent401Response } from '../models';
// @ts-ignore
import { ScheduleEventsCreateEvent403Response } from '../models';
// @ts-ignore
import { ScheduleEventsCreateEvent404Response } from '../models';
// @ts-ignore
import { ScheduleEventsCreateEvent422Response } from '../models';
// @ts-ignore
import { ScheduleEventsCreateEvent500Response } from '../models';
// @ts-ignore
import { ScheduleEventsCreateEventRequest } from '../models';
// @ts-ignore
import { ScheduleEventsCreateEventResponse } from '../models';
// @ts-ignore
import { ScheduleEventsDeleteEvent400Response } from '../models';
// @ts-ignore
import { ScheduleEventsDeleteEvent401Response } from '../models';
// @ts-ignore
import { ScheduleEventsDeleteEvent403Response } from '../models';
// @ts-ignore
import { ScheduleEventsDeleteEvent404Response } from '../models';
// @ts-ignore
import { ScheduleEventsDeleteEvent500Response } from '../models';
// @ts-ignore
import { ScheduleEventsDeleteEventResponse } from '../models';
// @ts-ignore
import { ScheduleEventsGetEventById401Response } from '../models';
// @ts-ignore
import { ScheduleEventsGetEventById403Response } from '../models';
// @ts-ignore
import { ScheduleEventsGetEventById404Response } from '../models';
// @ts-ignore
import { ScheduleEventsGetEventById500Response } from '../models';
// @ts-ignore
import { ScheduleEventsGetEventByIdResponse } from '../models';
// @ts-ignore
import { ScheduleEventsListEvents400Response } from '../models';
// @ts-ignore
import { ScheduleEventsListEvents401Response } from '../models';
// @ts-ignore
import { ScheduleEventsListEvents403Response } from '../models';
// @ts-ignore
import { ScheduleEventsListEvents404Response } from '../models';
// @ts-ignore
import { ScheduleEventsListEvents500Response } from '../models';
// @ts-ignore
import { ScheduleEventsListEventsResponse } from '../models';
// @ts-ignore
import { ScheduleEventsUpdateEventById400Response } from '../models';
// @ts-ignore
import { ScheduleEventsUpdateEventById401Response } from '../models';
// @ts-ignore
import { ScheduleEventsUpdateEventById403Response } from '../models';
// @ts-ignore
import { ScheduleEventsUpdateEventById404Response } from '../models';
// @ts-ignore
import { ScheduleEventsUpdateEventById422Response } from '../models';
// @ts-ignore
import { ScheduleEventsUpdateEventById500Response } from '../models';
// @ts-ignore
import { ScheduleEventsUpdateEventByIdRequest } from '../models';
// @ts-ignore
import { ScheduleEventsUpdateEventByIdResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * ScheduleEventsApi - axios parameter creator
 * @export
 */
export const ScheduleEventsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create Event
         * @param {number} companyId Company ID
         * @param {ScheduleEventsCreateEventRequest} scheduleEventsCreateEventRequest 
         * @param {string} [xApiVersion] 7shifts API version
         * @param {string} [xCompanyGuid] Company GUID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEvent: async (companyId: number, scheduleEventsCreateEventRequest: ScheduleEventsCreateEventRequest, xApiVersion?: string, xCompanyGuid?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('createEvent', 'companyId', companyId)
            // verify required parameter 'scheduleEventsCreateEventRequest' is not null or undefined
            assertParamExists('createEvent', 'scheduleEventsCreateEventRequest', scheduleEventsCreateEventRequest)
            const localVarPath = `/v2/company/{company_id}/events`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId !== undefined ? companyId : `-company_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication cookieAuth required
            await setApiKeyToObject({object: localVarHeaderParameter, type: "Cookie", key: "Cookie", keyParamName: "7session", configuration})
            if (xApiVersion != null) {
                localVarHeaderParameter['x-api-version'] = String(xApiVersion);
            }

            if (xCompanyGuid != null) {
                localVarHeaderParameter['x-company-guid'] = String(xCompanyGuid);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: scheduleEventsCreateEventRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/company/{company_id}/events',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(scheduleEventsCreateEventRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete Event
         * @param {number} companyId Company ID
         * @param {number} eventId Event ID
         * @param {string} [xApiVersion] 7shifts API version
         * @param {string} [xCompanyGuid] Company GUID
         * @param {string} [recurrenceTarget] Recurrence Target
         * @param {string} [startDate] Start of the targeted range for recurrence. Format YYYY-MM-DD HH:MM:SS
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEvent: async (companyId: number, eventId: number, xApiVersion?: string, xCompanyGuid?: string, recurrenceTarget?: string, startDate?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('deleteEvent', 'companyId', companyId)
            // verify required parameter 'eventId' is not null or undefined
            assertParamExists('deleteEvent', 'eventId', eventId)
            const localVarPath = `/v2/company/{company_id}/events/{event_id}`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId !== undefined ? companyId : `-company_id-`)))
                .replace(`{${"event_id"}}`, encodeURIComponent(String(eventId !== undefined ? eventId : `-event_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication cookieAuth required
            await setApiKeyToObject({object: localVarHeaderParameter, type: "Cookie", key: "Cookie", keyParamName: "7session", configuration})
            if (recurrenceTarget !== undefined) {
                localVarQueryParameter['recurrence_target'] = recurrenceTarget;
            }

            if (startDate !== undefined) {
                localVarQueryParameter['start_date'] = startDate;
            }

            if (xApiVersion != null) {
                localVarHeaderParameter['x-api-version'] = String(xApiVersion);
            }

            if (xCompanyGuid != null) {
                localVarHeaderParameter['x-company-guid'] = String(xCompanyGuid);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/company/{company_id}/events/{event_id}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve Event
         * @param {number} companyId Company ID
         * @param {number} eventId Event ID
         * @param {string} [xApiVersion] 7shifts API version
         * @param {string} [xCompanyGuid] Company GUID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEventById: async (companyId: number, eventId: number, xApiVersion?: string, xCompanyGuid?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('getEventById', 'companyId', companyId)
            // verify required parameter 'eventId' is not null or undefined
            assertParamExists('getEventById', 'eventId', eventId)
            const localVarPath = `/v2/company/{company_id}/events/{event_id}`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId !== undefined ? companyId : `-company_id-`)))
                .replace(`{${"event_id"}}`, encodeURIComponent(String(eventId !== undefined ? eventId : `-event_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication cookieAuth required
            await setApiKeyToObject({object: localVarHeaderParameter, type: "Cookie", key: "Cookie", keyParamName: "7session", configuration})
            if (xApiVersion != null) {
                localVarHeaderParameter['x-api-version'] = String(xApiVersion);
            }

            if (xCompanyGuid != null) {
                localVarHeaderParameter['x-company-guid'] = String(xCompanyGuid);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/company/{company_id}/events/{event_id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List Events
         * @param {number} companyId Company ID
         * @param {string | Date} startDate A date string to request only events within a range.  Format YYYY-MM-DD
         * @param {string | Date} endDate A date string to request only events within a range.  Format YYYY-MM-DD
         * @param {string} [xApiVersion] 7shifts API version
         * @param {string} [xCompanyGuid] Company GUID
         * @param {number} [locationId] Location ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listEvents: async (companyId: number, startDate: string | Date, endDate: string | Date, xApiVersion?: string, xCompanyGuid?: string, locationId?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('listEvents', 'companyId', companyId)
            // verify required parameter 'startDate' is not null or undefined
            assertParamExists('listEvents', 'startDate', startDate)
            // verify required parameter 'endDate' is not null or undefined
            assertParamExists('listEvents', 'endDate', endDate)
            const localVarPath = `/v2/company/{company_id}/events`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId !== undefined ? companyId : `-company_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication cookieAuth required
            await setApiKeyToObject({object: localVarHeaderParameter, type: "Cookie", key: "Cookie", keyParamName: "7session", configuration})
            if (locationId !== undefined) {
                localVarQueryParameter['location_id'] = locationId;
            }

            if (startDate !== undefined) {
                localVarQueryParameter['start_date'] = (startDate as any instanceof Date) ?
                    (startDate as any).toISOString().substr(0,10) :
                    startDate;
            }

            if (endDate !== undefined) {
                localVarQueryParameter['end_date'] = (endDate as any instanceof Date) ?
                    (endDate as any).toISOString().substr(0,10) :
                    endDate;
            }

            if (xApiVersion != null) {
                localVarHeaderParameter['x-api-version'] = String(xApiVersion);
            }

            if (xCompanyGuid != null) {
                localVarHeaderParameter['x-company-guid'] = String(xCompanyGuid);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/company/{company_id}/events',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update Event
         * @param {number} companyId Company ID
         * @param {number} eventId Event ID
         * @param {ScheduleEventsUpdateEventByIdRequest} scheduleEventsUpdateEventByIdRequest 
         * @param {string} [xApiVersion] 7shifts API version
         * @param {string} [xCompanyGuid] Company GUID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEventById: async (companyId: number, eventId: number, scheduleEventsUpdateEventByIdRequest: ScheduleEventsUpdateEventByIdRequest, xApiVersion?: string, xCompanyGuid?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('updateEventById', 'companyId', companyId)
            // verify required parameter 'eventId' is not null or undefined
            assertParamExists('updateEventById', 'eventId', eventId)
            // verify required parameter 'scheduleEventsUpdateEventByIdRequest' is not null or undefined
            assertParamExists('updateEventById', 'scheduleEventsUpdateEventByIdRequest', scheduleEventsUpdateEventByIdRequest)
            const localVarPath = `/v2/company/{company_id}/events/{event_id}`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId !== undefined ? companyId : `-company_id-`)))
                .replace(`{${"event_id"}}`, encodeURIComponent(String(eventId !== undefined ? eventId : `-event_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication cookieAuth required
            await setApiKeyToObject({object: localVarHeaderParameter, type: "Cookie", key: "Cookie", keyParamName: "7session", configuration})
            if (xApiVersion != null) {
                localVarHeaderParameter['x-api-version'] = String(xApiVersion);
            }

            if (xCompanyGuid != null) {
                localVarHeaderParameter['x-company-guid'] = String(xCompanyGuid);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: scheduleEventsUpdateEventByIdRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/company/{company_id}/events/{event_id}',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(scheduleEventsUpdateEventByIdRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ScheduleEventsApi - functional programming interface
 * @export
 */
export const ScheduleEventsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ScheduleEventsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create Event
         * @param {ScheduleEventsApiCreateEventRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createEvent(requestParameters: ScheduleEventsApiCreateEventRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ScheduleEventsCreateEventResponse>> {
            const scheduleEventsCreateEventRequest: ScheduleEventsCreateEventRequest = {
                title: requestParameters.title,
                description: requestParameters.description,
                location_ids: requestParameters.location_ids,
                start_date: requestParameters.start_date,
                start_time: requestParameters.start_time,
                end_date: requestParameters.end_date,
                end_time: requestParameters.end_time,
                color: requestParameters.color,
                is_multi_day: requestParameters.is_multi_day,
                recurrence: requestParameters.recurrence
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createEvent(requestParameters.companyId, scheduleEventsCreateEventRequest, requestParameters.xApiVersion, requestParameters.xCompanyGuid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete Event
         * @param {ScheduleEventsApiDeleteEventRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteEvent(requestParameters: ScheduleEventsApiDeleteEventRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ScheduleEventsDeleteEventResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteEvent(requestParameters.companyId, requestParameters.eventId, requestParameters.xApiVersion, requestParameters.xCompanyGuid, requestParameters.recurrenceTarget, requestParameters.startDate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Retrieve Event
         * @param {ScheduleEventsApiGetEventByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEventById(requestParameters: ScheduleEventsApiGetEventByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ScheduleEventsGetEventByIdResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getEventById(requestParameters.companyId, requestParameters.eventId, requestParameters.xApiVersion, requestParameters.xCompanyGuid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary List Events
         * @param {ScheduleEventsApiListEventsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listEvents(requestParameters: ScheduleEventsApiListEventsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ScheduleEventsListEventsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listEvents(requestParameters.companyId, requestParameters.startDate, requestParameters.endDate, requestParameters.xApiVersion, requestParameters.xCompanyGuid, requestParameters.locationId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update Event
         * @param {ScheduleEventsApiUpdateEventByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateEventById(requestParameters: ScheduleEventsApiUpdateEventByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ScheduleEventsUpdateEventByIdResponse>> {
            const scheduleEventsUpdateEventByIdRequest: ScheduleEventsUpdateEventByIdRequest = {
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateEventById(requestParameters.companyId, requestParameters.eventId, scheduleEventsUpdateEventByIdRequest, requestParameters.xApiVersion, requestParameters.xCompanyGuid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ScheduleEventsApi - factory interface
 * @export
 */
export const ScheduleEventsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ScheduleEventsApiFp(configuration)
    return {
        /**
         * 
         * @summary Create Event
         * @param {ScheduleEventsApiCreateEventRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEvent(requestParameters: ScheduleEventsApiCreateEventRequest, options?: AxiosRequestConfig): AxiosPromise<ScheduleEventsCreateEventResponse> {
            return localVarFp.createEvent(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete Event
         * @param {ScheduleEventsApiDeleteEventRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEvent(requestParameters: ScheduleEventsApiDeleteEventRequest, options?: AxiosRequestConfig): AxiosPromise<ScheduleEventsDeleteEventResponse> {
            return localVarFp.deleteEvent(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve Event
         * @param {ScheduleEventsApiGetEventByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEventById(requestParameters: ScheduleEventsApiGetEventByIdRequest, options?: AxiosRequestConfig): AxiosPromise<ScheduleEventsGetEventByIdResponse> {
            return localVarFp.getEventById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List Events
         * @param {ScheduleEventsApiListEventsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listEvents(requestParameters: ScheduleEventsApiListEventsRequest, options?: AxiosRequestConfig): AxiosPromise<ScheduleEventsListEventsResponse> {
            return localVarFp.listEvents(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update Event
         * @param {ScheduleEventsApiUpdateEventByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEventById(requestParameters: ScheduleEventsApiUpdateEventByIdRequest, options?: AxiosRequestConfig): AxiosPromise<ScheduleEventsUpdateEventByIdResponse> {
            return localVarFp.updateEventById(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createEvent operation in ScheduleEventsApi.
 * @export
 * @interface ScheduleEventsApiCreateEventRequest
 */
export type ScheduleEventsApiCreateEventRequest = {
    
    /**
    * Company ID
    * @type {number}
    * @memberof ScheduleEventsApiCreateEvent
    */
    readonly companyId: number
    
    /**
    * 7shifts API version
    * @type {string}
    * @memberof ScheduleEventsApiCreateEvent
    */
    readonly xApiVersion?: string
    
    /**
    * Company GUID
    * @type {string}
    * @memberof ScheduleEventsApiCreateEvent
    */
    readonly xCompanyGuid?: string
    
} & ScheduleEventsCreateEventRequest

/**
 * Request parameters for deleteEvent operation in ScheduleEventsApi.
 * @export
 * @interface ScheduleEventsApiDeleteEventRequest
 */
export type ScheduleEventsApiDeleteEventRequest = {
    
    /**
    * Company ID
    * @type {number}
    * @memberof ScheduleEventsApiDeleteEvent
    */
    readonly companyId: number
    
    /**
    * Event ID
    * @type {number}
    * @memberof ScheduleEventsApiDeleteEvent
    */
    readonly eventId: number
    
    /**
    * 7shifts API version
    * @type {string}
    * @memberof ScheduleEventsApiDeleteEvent
    */
    readonly xApiVersion?: string
    
    /**
    * Company GUID
    * @type {string}
    * @memberof ScheduleEventsApiDeleteEvent
    */
    readonly xCompanyGuid?: string
    
    /**
    * Recurrence Target
    * @type {string}
    * @memberof ScheduleEventsApiDeleteEvent
    */
    readonly recurrenceTarget?: string
    
    /**
    * Start of the targeted range for recurrence. Format YYYY-MM-DD HH:MM:SS
    * @type {string}
    * @memberof ScheduleEventsApiDeleteEvent
    */
    readonly startDate?: string
    
}

/**
 * Request parameters for getEventById operation in ScheduleEventsApi.
 * @export
 * @interface ScheduleEventsApiGetEventByIdRequest
 */
export type ScheduleEventsApiGetEventByIdRequest = {
    
    /**
    * Company ID
    * @type {number}
    * @memberof ScheduleEventsApiGetEventById
    */
    readonly companyId: number
    
    /**
    * Event ID
    * @type {number}
    * @memberof ScheduleEventsApiGetEventById
    */
    readonly eventId: number
    
    /**
    * 7shifts API version
    * @type {string}
    * @memberof ScheduleEventsApiGetEventById
    */
    readonly xApiVersion?: string
    
    /**
    * Company GUID
    * @type {string}
    * @memberof ScheduleEventsApiGetEventById
    */
    readonly xCompanyGuid?: string
    
}

/**
 * Request parameters for listEvents operation in ScheduleEventsApi.
 * @export
 * @interface ScheduleEventsApiListEventsRequest
 */
export type ScheduleEventsApiListEventsRequest = {
    
    /**
    * Company ID
    * @type {number}
    * @memberof ScheduleEventsApiListEvents
    */
    readonly companyId: number
    
    /**
    * A date string to request only events within a range.  Format YYYY-MM-DD
    * @type {string | Date}
    * @memberof ScheduleEventsApiListEvents
    */
    readonly startDate: string | Date
    
    /**
    * A date string to request only events within a range.  Format YYYY-MM-DD
    * @type {string | Date}
    * @memberof ScheduleEventsApiListEvents
    */
    readonly endDate: string | Date
    
    /**
    * 7shifts API version
    * @type {string}
    * @memberof ScheduleEventsApiListEvents
    */
    readonly xApiVersion?: string
    
    /**
    * Company GUID
    * @type {string}
    * @memberof ScheduleEventsApiListEvents
    */
    readonly xCompanyGuid?: string
    
    /**
    * Location ID
    * @type {number}
    * @memberof ScheduleEventsApiListEvents
    */
    readonly locationId?: number
    
}

/**
 * Request parameters for updateEventById operation in ScheduleEventsApi.
 * @export
 * @interface ScheduleEventsApiUpdateEventByIdRequest
 */
export type ScheduleEventsApiUpdateEventByIdRequest = {
    
    /**
    * Company ID
    * @type {number}
    * @memberof ScheduleEventsApiUpdateEventById
    */
    readonly companyId: number
    
    /**
    * Event ID
    * @type {number}
    * @memberof ScheduleEventsApiUpdateEventById
    */
    readonly eventId: number
    
    /**
    * 7shifts API version
    * @type {string}
    * @memberof ScheduleEventsApiUpdateEventById
    */
    readonly xApiVersion?: string
    
    /**
    * Company GUID
    * @type {string}
    * @memberof ScheduleEventsApiUpdateEventById
    */
    readonly xCompanyGuid?: string
    
} & ScheduleEventsUpdateEventByIdRequest

/**
 * ScheduleEventsApiGenerated - object-oriented interface
 * @export
 * @class ScheduleEventsApiGenerated
 * @extends {BaseAPI}
 */
export class ScheduleEventsApiGenerated extends BaseAPI {
    /**
     * 
     * @summary Create Event
     * @param {ScheduleEventsApiCreateEventRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScheduleEventsApiGenerated
     */
    public createEvent(requestParameters: ScheduleEventsApiCreateEventRequest, options?: AxiosRequestConfig) {
        return ScheduleEventsApiFp(this.configuration).createEvent(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete Event
     * @param {ScheduleEventsApiDeleteEventRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScheduleEventsApiGenerated
     */
    public deleteEvent(requestParameters: ScheduleEventsApiDeleteEventRequest, options?: AxiosRequestConfig) {
        return ScheduleEventsApiFp(this.configuration).deleteEvent(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve Event
     * @param {ScheduleEventsApiGetEventByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScheduleEventsApiGenerated
     */
    public getEventById(requestParameters: ScheduleEventsApiGetEventByIdRequest, options?: AxiosRequestConfig) {
        return ScheduleEventsApiFp(this.configuration).getEventById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List Events
     * @param {ScheduleEventsApiListEventsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScheduleEventsApiGenerated
     */
    public listEvents(requestParameters: ScheduleEventsApiListEventsRequest, options?: AxiosRequestConfig) {
        return ScheduleEventsApiFp(this.configuration).listEvents(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update Event
     * @param {ScheduleEventsApiUpdateEventByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScheduleEventsApiGenerated
     */
    public updateEventById(requestParameters: ScheduleEventsApiUpdateEventByIdRequest, options?: AxiosRequestConfig) {
        return ScheduleEventsApiFp(this.configuration).updateEventById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
