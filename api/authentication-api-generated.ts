/* tslint:disable */
/* eslint-disable */
/*
7shifts API

7shifts is a team management software designed for restaurants. We help managers and operators spend less time and effort scheduling their staff, reduce their monthly labor costs and improve team communication. The result is simplified team management, one shift at a time.

7shifts also offers free mobile apps (iOS and Android) allowing managers and employees to have everything at their fingertips.

Start your free trial or request a demo at www.7shifts.com.

The version of the OpenAPI document: 2023-05-01
Contact: api-support@7shifts.com

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AuthenticationGenerateOAuthToken500Response } from '../models';
// @ts-ignore
import { AuthenticationGenerateOAuthTokenRequest } from '../models';
// @ts-ignore
import { AuthenticationGenerateOAuthTokenResponse } from '../models';
// @ts-ignore
import { AuthenticationGetIdentity401Response } from '../models';
// @ts-ignore
import { AuthenticationGetIdentity500Response } from '../models';
// @ts-ignore
import { AuthenticationGetIdentityResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * AuthenticationApi - axios parameter creator
 * @export
 */
export const AuthenticationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create OAuth Token
         * @param {string} grantType Token grant type. For Partner OAuth tokens specifying client_credentials
         * @param {string} clientId 
         * @param {AuthenticationGenerateOAuthTokenRequest} authenticationGenerateOAuthTokenRequest 
         * @param {string} [clientSecret] 
         * @param {string} [scope] A space-delimited list of scopes.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateOAuthToken: async (grantType: string, clientId: string, authenticationGenerateOAuthTokenRequest: AuthenticationGenerateOAuthTokenRequest, clientSecret?: string, scope?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'grantType' is not null or undefined
            assertParamExists('generateOAuthToken', 'grantType', grantType)
            // verify required parameter 'clientId' is not null or undefined
            assertParamExists('generateOAuthToken', 'clientId', clientId)
            // verify required parameter 'authenticationGenerateOAuthTokenRequest' is not null or undefined
            assertParamExists('generateOAuthToken', 'authenticationGenerateOAuthTokenRequest', authenticationGenerateOAuthTokenRequest)
            const localVarPath = `/oauth2/token`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


            if (grantType !== undefined) {
                await addFormParam('grant_type', grantType, false, true)
            }
    
            if (clientId !== undefined) {
                await addFormParam('client_id', clientId, false, true)
            }
    
            if (clientSecret !== undefined) {
                await addFormParam('client_secret', clientSecret, false, true)
            }
    
            if (scope !== undefined) {
                await addFormParam('scope', scope, false, true)
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: authenticationGenerateOAuthTokenRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/oauth2/token',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(authenticationGenerateOAuthTokenRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve Identity
         * @param {string} [xApiVersion] 7shifts API version
         * @param {string} [xCompanyGuid] Company GUID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIdentity: async (xApiVersion?: string, xCompanyGuid?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v2/whoami`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication cookieAuth required
            await setApiKeyToObject({object: localVarHeaderParameter, type: "Cookie", key: "Cookie", keyParamName: "7session", configuration})
            if (xApiVersion != null) {
                localVarHeaderParameter['x-api-version'] = String(xApiVersion);
            }

            if (xCompanyGuid != null) {
                localVarHeaderParameter['x-company-guid'] = String(xCompanyGuid);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/whoami',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthenticationApi - functional programming interface
 * @export
 */
export const AuthenticationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthenticationApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create OAuth Token
         * @param {AuthenticationApiGenerateOAuthTokenRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async generateOAuthToken(requestParameters: AuthenticationApiGenerateOAuthTokenRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthenticationGenerateOAuthTokenResponse>> {
            const authenticationGenerateOAuthTokenRequest: AuthenticationGenerateOAuthTokenRequest = {
                grant_type: requestParameters.grant_type,
                client_id: requestParameters.client_id,
                client_secret: requestParameters.client_secret,
                scope: requestParameters.scope
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.generateOAuthToken(requestParameters.grantType, requestParameters.clientId, authenticationGenerateOAuthTokenRequest, requestParameters.clientSecret, requestParameters.scope, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Retrieve Identity
         * @param {AuthenticationApiGetIdentityRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getIdentity(requestParameters: AuthenticationApiGetIdentityRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthenticationGetIdentityResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getIdentity(requestParameters.xApiVersion, requestParameters.xCompanyGuid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AuthenticationApi - factory interface
 * @export
 */
export const AuthenticationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthenticationApiFp(configuration)
    return {
        /**
         * 
         * @summary Create OAuth Token
         * @param {AuthenticationApiGenerateOAuthTokenRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateOAuthToken(requestParameters: AuthenticationApiGenerateOAuthTokenRequest, options?: AxiosRequestConfig): AxiosPromise<AuthenticationGenerateOAuthTokenResponse> {
            return localVarFp.generateOAuthToken(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve Identity
         * @param {AuthenticationApiGetIdentityRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIdentity(requestParameters: AuthenticationApiGetIdentityRequest = {}, options?: AxiosRequestConfig): AxiosPromise<AuthenticationGetIdentityResponse> {
            return localVarFp.getIdentity(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for generateOAuthToken operation in AuthenticationApi.
 * @export
 * @interface AuthenticationApiGenerateOAuthTokenRequest
 */
export type AuthenticationApiGenerateOAuthTokenRequest = {
    
    /**
    * Token grant type. For Partner OAuth tokens specifying client_credentials
    * @type {string}
    * @memberof AuthenticationApiGenerateOAuthToken
    */
    readonly grantType: string
    
    /**
    * 
    * @type {string}
    * @memberof AuthenticationApiGenerateOAuthToken
    */
    readonly clientId: string
    
    /**
    * 
    * @type {string}
    * @memberof AuthenticationApiGenerateOAuthToken
    */
    readonly clientSecret?: string
    
    /**
    * A space-delimited list of scopes.
    * @type {string}
    * @memberof AuthenticationApiGenerateOAuthToken
    */
    readonly scope?: string
    
} & AuthenticationGenerateOAuthTokenRequest

/**
 * Request parameters for getIdentity operation in AuthenticationApi.
 * @export
 * @interface AuthenticationApiGetIdentityRequest
 */
export type AuthenticationApiGetIdentityRequest = {
    
    /**
    * 7shifts API version
    * @type {string}
    * @memberof AuthenticationApiGetIdentity
    */
    readonly xApiVersion?: string
    
    /**
    * Company GUID
    * @type {string}
    * @memberof AuthenticationApiGetIdentity
    */
    readonly xCompanyGuid?: string
    
}

/**
 * AuthenticationApiGenerated - object-oriented interface
 * @export
 * @class AuthenticationApiGenerated
 * @extends {BaseAPI}
 */
export class AuthenticationApiGenerated extends BaseAPI {
    /**
     * 
     * @summary Create OAuth Token
     * @param {AuthenticationApiGenerateOAuthTokenRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApiGenerated
     */
    public generateOAuthToken(requestParameters: AuthenticationApiGenerateOAuthTokenRequest, options?: AxiosRequestConfig) {
        return AuthenticationApiFp(this.configuration).generateOAuthToken(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve Identity
     * @param {AuthenticationApiGetIdentityRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApiGenerated
     */
    public getIdentity(requestParameters: AuthenticationApiGetIdentityRequest = {}, options?: AxiosRequestConfig) {
        return AuthenticationApiFp(this.configuration).getIdentity(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
