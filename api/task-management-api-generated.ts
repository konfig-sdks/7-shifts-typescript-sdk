/* tslint:disable */
/* eslint-disable */
/*
7shifts API

7shifts is a team management software designed for restaurants. We help managers and operators spend less time and effort scheduling their staff, reduce their monthly labor costs and improve team communication. The result is simplified team management, one shift at a time.

7shifts also offers free mobile apps (iOS and Android) allowing managers and employees to have everything at their fingertips.

Start your free trial or request a demo at www.7shifts.com.

The version of the OpenAPI document: 2023-05-01
Contact: api-support@7shifts.com

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { TaskManagementClearTask400Response } from '../models';
// @ts-ignore
import { TaskManagementClearTask401Response } from '../models';
// @ts-ignore
import { TaskManagementClearTask403Response } from '../models';
// @ts-ignore
import { TaskManagementClearTask404Response } from '../models';
// @ts-ignore
import { TaskManagementClearTask409Response } from '../models';
// @ts-ignore
import { TaskManagementClearTask422Response } from '../models';
// @ts-ignore
import { TaskManagementClearTask500Response } from '../models';
// @ts-ignore
import { TaskManagementClearTaskRequest } from '../models';
// @ts-ignore
import { TaskManagementClearTaskResponse } from '../models';
// @ts-ignore
import { TaskManagementCreateTaskListTemplate400Response } from '../models';
// @ts-ignore
import { TaskManagementCreateTaskListTemplate401Response } from '../models';
// @ts-ignore
import { TaskManagementCreateTaskListTemplate403Response } from '../models';
// @ts-ignore
import { TaskManagementCreateTaskListTemplate404Response } from '../models';
// @ts-ignore
import { TaskManagementCreateTaskListTemplate409Response } from '../models';
// @ts-ignore
import { TaskManagementCreateTaskListTemplate422Response } from '../models';
// @ts-ignore
import { TaskManagementCreateTaskListTemplate500Response } from '../models';
// @ts-ignore
import { TaskManagementCreateTaskListTemplateRequest } from '../models';
// @ts-ignore
import { TaskManagementCreateTaskListTemplateRequestAssignmentsInner } from '../models';
// @ts-ignore
import { TaskManagementCreateTaskListTemplateRequestDue } from '../models';
// @ts-ignore
import { TaskManagementCreateTaskListTemplateRequestTaskTemplatesInner } from '../models';
// @ts-ignore
import { TaskManagementCreateTaskListTemplateRequestTimeFrame } from '../models';
// @ts-ignore
import { TaskManagementCreateTaskListTemplateResponse } from '../models';
// @ts-ignore
import { TaskManagementCreateTaskTags403Response } from '../models';
// @ts-ignore
import { TaskManagementCreateTaskTags404Response } from '../models';
// @ts-ignore
import { TaskManagementCreateTaskTags422Response } from '../models';
// @ts-ignore
import { TaskManagementCreateTaskTags500Response } from '../models';
// @ts-ignore
import { TaskManagementCreateTaskTagsRequest } from '../models';
// @ts-ignore
import { TaskManagementCreateTaskTagsRequestTagsInner } from '../models';
// @ts-ignore
import { TaskManagementCreateTaskTagsResponse } from '../models';
// @ts-ignore
import { TaskManagementDeleteTaskListTemplate403Response } from '../models';
// @ts-ignore
import { TaskManagementDeleteTaskListTemplate404Response } from '../models';
// @ts-ignore
import { TaskManagementDeleteTaskListTemplate500Response } from '../models';
// @ts-ignore
import { TaskManagementDeleteTaskListTemplateResponse } from '../models';
// @ts-ignore
import { TaskManagementDeleteTaskTags403Response } from '../models';
// @ts-ignore
import { TaskManagementDeleteTaskTags404Response } from '../models';
// @ts-ignore
import { TaskManagementDeleteTaskTags500Response } from '../models';
// @ts-ignore
import { TaskManagementDeleteTaskTagsRequest } from '../models';
// @ts-ignore
import { TaskManagementDeleteTaskTagsResponse } from '../models';
// @ts-ignore
import { TaskManagementEditTaskListTemplate400Response } from '../models';
// @ts-ignore
import { TaskManagementEditTaskListTemplate401Response } from '../models';
// @ts-ignore
import { TaskManagementEditTaskListTemplate403Response } from '../models';
// @ts-ignore
import { TaskManagementEditTaskListTemplate404Response } from '../models';
// @ts-ignore
import { TaskManagementEditTaskListTemplate422Response } from '../models';
// @ts-ignore
import { TaskManagementEditTaskListTemplate500Response } from '../models';
// @ts-ignore
import { TaskManagementEditTaskListTemplateRequest } from '../models';
// @ts-ignore
import { TaskManagementEditTaskListTemplateRequestDue } from '../models';
// @ts-ignore
import { TaskManagementEditTaskListTemplateRequestTaskTemplatesInner } from '../models';
// @ts-ignore
import { TaskManagementEditTaskListTemplateRequestTimeFrame } from '../models';
// @ts-ignore
import { TaskManagementEditTaskListTemplateResponse } from '../models';
// @ts-ignore
import { TaskManagementGetSettings403Response } from '../models';
// @ts-ignore
import { TaskManagementGetSettings404Response } from '../models';
// @ts-ignore
import { TaskManagementGetSettings500Response } from '../models';
// @ts-ignore
import { TaskManagementGetSettingsResponse } from '../models';
// @ts-ignore
import { TaskManagementGetTaskList400Response } from '../models';
// @ts-ignore
import { TaskManagementGetTaskList401Response } from '../models';
// @ts-ignore
import { TaskManagementGetTaskList403Response } from '../models';
// @ts-ignore
import { TaskManagementGetTaskList404Response } from '../models';
// @ts-ignore
import { TaskManagementGetTaskList500Response } from '../models';
// @ts-ignore
import { TaskManagementGetTaskListResponse } from '../models';
// @ts-ignore
import { TaskManagementGetTaskListTemplate400Response } from '../models';
// @ts-ignore
import { TaskManagementGetTaskListTemplate401Response } from '../models';
// @ts-ignore
import { TaskManagementGetTaskListTemplate403Response } from '../models';
// @ts-ignore
import { TaskManagementGetTaskListTemplate404Response } from '../models';
// @ts-ignore
import { TaskManagementGetTaskListTemplate500Response } from '../models';
// @ts-ignore
import { TaskManagementGetTaskListTemplateResponse } from '../models';
// @ts-ignore
import { TaskManagementGetTaskListTemplates200Response } from '../models';
// @ts-ignore
import { TaskManagementGetTaskListTemplates403Response } from '../models';
// @ts-ignore
import { TaskManagementGetTaskListTemplates404Response } from '../models';
// @ts-ignore
import { TaskManagementGetTaskListTemplatesResponse } from '../models';
// @ts-ignore
import { TaskManagementGetTaskLists400Response } from '../models';
// @ts-ignore
import { TaskManagementGetTaskLists401Response } from '../models';
// @ts-ignore
import { TaskManagementGetTaskLists403Response } from '../models';
// @ts-ignore
import { TaskManagementGetTaskLists404Response } from '../models';
// @ts-ignore
import { TaskManagementGetTaskLists500Response } from '../models';
// @ts-ignore
import { TaskManagementGetTaskListsResponse } from '../models';
// @ts-ignore
import { TaskManagementListTaskListsSummary200Response } from '../models';
// @ts-ignore
import { TaskManagementListTaskListsSummary400Response } from '../models';
// @ts-ignore
import { TaskManagementListTaskListsSummary401Response } from '../models';
// @ts-ignore
import { TaskManagementListTaskListsSummary403Response } from '../models';
// @ts-ignore
import { TaskManagementListTaskListsSummary404Response } from '../models';
// @ts-ignore
import { TaskManagementListTaskListsSummaryResponse } from '../models';
// @ts-ignore
import { TaskManagementMarkComplete400Response } from '../models';
// @ts-ignore
import { TaskManagementMarkComplete401Response } from '../models';
// @ts-ignore
import { TaskManagementMarkComplete403Response } from '../models';
// @ts-ignore
import { TaskManagementMarkComplete404Response } from '../models';
// @ts-ignore
import { TaskManagementMarkComplete409Response } from '../models';
// @ts-ignore
import { TaskManagementMarkComplete422Response } from '../models';
// @ts-ignore
import { TaskManagementMarkComplete500Response } from '../models';
// @ts-ignore
import { TaskManagementMarkCompleteRequest } from '../models';
// @ts-ignore
import { TaskManagementMarkCompleteResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * TaskManagementApi - axios parameter creator
 * @export
 */
export const TaskManagementApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Clear task
         * @param {number} companyId Company ID
         * @param {number} listId Task List ID
         * @param {number} taskId Task ID
         * @param {TaskManagementClearTaskRequest} taskManagementClearTaskRequest 
         * @param {string} [xApiVersion] 7shifts API version
         * @param {string} [xCompanyGuid] Company GUID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clearTask: async (companyId: number, listId: number, taskId: number, taskManagementClearTaskRequest: TaskManagementClearTaskRequest, xApiVersion?: string, xCompanyGuid?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('clearTask', 'companyId', companyId)
            // verify required parameter 'listId' is not null or undefined
            assertParamExists('clearTask', 'listId', listId)
            // verify required parameter 'taskId' is not null or undefined
            assertParamExists('clearTask', 'taskId', taskId)
            // verify required parameter 'taskManagementClearTaskRequest' is not null or undefined
            assertParamExists('clearTask', 'taskManagementClearTaskRequest', taskManagementClearTaskRequest)
            const localVarPath = `/v2/company/{company_id}/task_lists/{list_id}/tasks/{task_id}/clear`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId !== undefined ? companyId : `-company_id-`)))
                .replace(`{${"list_id"}}`, encodeURIComponent(String(listId !== undefined ? listId : `-list_id-`)))
                .replace(`{${"task_id"}}`, encodeURIComponent(String(taskId !== undefined ? taskId : `-task_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication cookieAuth required
            await setApiKeyToObject({object: localVarHeaderParameter, type: "Cookie", key: "Cookie", keyParamName: "7session", configuration})
            if (xApiVersion != null) {
                localVarHeaderParameter['x-api-version'] = String(xApiVersion);
            }

            if (xCompanyGuid != null) {
                localVarHeaderParameter['x-company-guid'] = String(xCompanyGuid);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: taskManagementClearTaskRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/company/{company_id}/task_lists/{list_id}/tasks/{task_id}/clear',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(taskManagementClearTaskRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create Task List Template
         * @param {number} companyId Company ID
         * @param {TaskManagementCreateTaskListTemplateRequest} taskManagementCreateTaskListTemplateRequest 
         * @param {string} [xApiVersion] 7shifts API version
         * @param {string} [xCompanyGuid] Company GUID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTaskListTemplate: async (companyId: number, taskManagementCreateTaskListTemplateRequest: TaskManagementCreateTaskListTemplateRequest, xApiVersion?: string, xCompanyGuid?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('createTaskListTemplate', 'companyId', companyId)
            // verify required parameter 'taskManagementCreateTaskListTemplateRequest' is not null or undefined
            assertParamExists('createTaskListTemplate', 'taskManagementCreateTaskListTemplateRequest', taskManagementCreateTaskListTemplateRequest)
            const localVarPath = `/v2/company/{company_id}/task_list_templates`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId !== undefined ? companyId : `-company_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication cookieAuth required
            await setApiKeyToObject({object: localVarHeaderParameter, type: "Cookie", key: "Cookie", keyParamName: "7session", configuration})
            if (xApiVersion != null) {
                localVarHeaderParameter['x-api-version'] = String(xApiVersion);
            }

            if (xCompanyGuid != null) {
                localVarHeaderParameter['x-company-guid'] = String(xCompanyGuid);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: taskManagementCreateTaskListTemplateRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/company/{company_id}/task_list_templates',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(taskManagementCreateTaskListTemplateRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create Task Tags
         * @param {number} companyId Company ID
         * @param {TaskManagementCreateTaskTagsRequest} taskManagementCreateTaskTagsRequest 
         * @param {string} [xApiVersion] 7shifts API version
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTaskTags: async (companyId: number, taskManagementCreateTaskTagsRequest: TaskManagementCreateTaskTagsRequest, xApiVersion?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('createTaskTags', 'companyId', companyId)
            // verify required parameter 'taskManagementCreateTaskTagsRequest' is not null or undefined
            assertParamExists('createTaskTags', 'taskManagementCreateTaskTagsRequest', taskManagementCreateTaskTagsRequest)
            const localVarPath = `/v2/company/{company_id}/task_tags`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId !== undefined ? companyId : `-company_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication cookieAuth required
            await setApiKeyToObject({object: localVarHeaderParameter, type: "Cookie", key: "Cookie", keyParamName: "7session", configuration})
            if (xApiVersion != null) {
                localVarHeaderParameter['x-api-version'] = String(xApiVersion);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: taskManagementCreateTaskTagsRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/company/{company_id}/task_tags',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(taskManagementCreateTaskTagsRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete Task List Template
         * @param {number} companyId Company ID
         * @param {string} uuid Task List Template UUID
         * @param {string} [xApiVersion] 7shifts API version
         * @param {string} [xCompanyGuid] Company GUID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTaskListTemplate: async (companyId: number, uuid: string, xApiVersion?: string, xCompanyGuid?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('deleteTaskListTemplate', 'companyId', companyId)
            // verify required parameter 'uuid' is not null or undefined
            assertParamExists('deleteTaskListTemplate', 'uuid', uuid)
            const localVarPath = `/v2/company/{company_id}/task_list_templates/{uuid}`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId !== undefined ? companyId : `-company_id-`)))
                .replace(`{${"uuid"}}`, encodeURIComponent(String(uuid !== undefined ? uuid : `-uuid-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication cookieAuth required
            await setApiKeyToObject({object: localVarHeaderParameter, type: "Cookie", key: "Cookie", keyParamName: "7session", configuration})
            if (xApiVersion != null) {
                localVarHeaderParameter['x-api-version'] = String(xApiVersion);
            }

            if (xCompanyGuid != null) {
                localVarHeaderParameter['x-company-guid'] = String(xCompanyGuid);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/company/{company_id}/task_list_templates/{uuid}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete Task Tags
         * @param {number} companyId Company ID
         * @param {TaskManagementDeleteTaskTagsRequest} taskManagementDeleteTaskTagsRequest 
         * @param {string} [xApiVersion] 7shifts API version
         * @param {string} [xCompanyGuid] Company GUID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTaskTags: async (companyId: number, taskManagementDeleteTaskTagsRequest: TaskManagementDeleteTaskTagsRequest, xApiVersion?: string, xCompanyGuid?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('deleteTaskTags', 'companyId', companyId)
            // verify required parameter 'taskManagementDeleteTaskTagsRequest' is not null or undefined
            assertParamExists('deleteTaskTags', 'taskManagementDeleteTaskTagsRequest', taskManagementDeleteTaskTagsRequest)
            const localVarPath = `/v2/company/{company_id}/task_tags`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId !== undefined ? companyId : `-company_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication cookieAuth required
            await setApiKeyToObject({object: localVarHeaderParameter, type: "Cookie", key: "Cookie", keyParamName: "7session", configuration})
            if (xApiVersion != null) {
                localVarHeaderParameter['x-api-version'] = String(xApiVersion);
            }

            if (xCompanyGuid != null) {
                localVarHeaderParameter['x-company-guid'] = String(xCompanyGuid);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: taskManagementDeleteTaskTagsRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/company/{company_id}/task_tags',
                httpMethod: 'DELETE'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(taskManagementDeleteTaskTagsRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary edit task list template
         * @param {number} companyId Company ID
         * @param {string} uuid Task List Template UUID
         * @param {TaskManagementEditTaskListTemplateRequest} taskManagementEditTaskListTemplateRequest 
         * @param {string} [xApiVersion] 7shifts API version
         * @param {string} [xCompanyGuid] Company GUID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editTaskListTemplate: async (companyId: number, uuid: string, taskManagementEditTaskListTemplateRequest: TaskManagementEditTaskListTemplateRequest, xApiVersion?: string, xCompanyGuid?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('editTaskListTemplate', 'companyId', companyId)
            // verify required parameter 'uuid' is not null or undefined
            assertParamExists('editTaskListTemplate', 'uuid', uuid)
            // verify required parameter 'taskManagementEditTaskListTemplateRequest' is not null or undefined
            assertParamExists('editTaskListTemplate', 'taskManagementEditTaskListTemplateRequest', taskManagementEditTaskListTemplateRequest)
            const localVarPath = `/v2/company/{company_id}/task_list_templates/{uuid}`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId !== undefined ? companyId : `-company_id-`)))
                .replace(`{${"uuid"}}`, encodeURIComponent(String(uuid !== undefined ? uuid : `-uuid-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication cookieAuth required
            await setApiKeyToObject({object: localVarHeaderParameter, type: "Cookie", key: "Cookie", keyParamName: "7session", configuration})
            if (xApiVersion != null) {
                localVarHeaderParameter['x-api-version'] = String(xApiVersion);
            }

            if (xCompanyGuid != null) {
                localVarHeaderParameter['x-company-guid'] = String(xCompanyGuid);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: taskManagementEditTaskListTemplateRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/company/{company_id}/task_list_templates/{uuid}',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(taskManagementEditTaskListTemplateRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gets task management settings for a company
         * @param {number} companyId Company ID
         * @param {string} [xApiVersion] 7shifts API version
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSettings: async (companyId: number, xApiVersion?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('getSettings', 'companyId', companyId)
            const localVarPath = `/v2/company/{company_id}/task_management_settings`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId !== undefined ? companyId : `-company_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication cookieAuth required
            await setApiKeyToObject({object: localVarHeaderParameter, type: "Cookie", key: "Cookie", keyParamName: "7session", configuration})
            if (xApiVersion != null) {
                localVarHeaderParameter['x-api-version'] = String(xApiVersion);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/company/{company_id}/task_management_settings',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve Task List
         * @param {number} companyId Company ID
         * @param {number} listId List ID
         * @param {string} [xApiVersion] 7shifts API version
         * @param {string} [xCompanyGuid] Company GUID
         * @param {number} [userId] User ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTaskList: async (companyId: number, listId: number, xApiVersion?: string, xCompanyGuid?: string, userId?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('getTaskList', 'companyId', companyId)
            // verify required parameter 'listId' is not null or undefined
            assertParamExists('getTaskList', 'listId', listId)
            const localVarPath = `/v2/company/{company_id}/task_lists/{list_id}`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId !== undefined ? companyId : `-company_id-`)))
                .replace(`{${"list_id"}}`, encodeURIComponent(String(listId !== undefined ? listId : `-list_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication cookieAuth required
            await setApiKeyToObject({object: localVarHeaderParameter, type: "Cookie", key: "Cookie", keyParamName: "7session", configuration})
            if (userId !== undefined) {
                localVarQueryParameter['user_id'] = userId;
            }

            if (xApiVersion != null) {
                localVarHeaderParameter['x-api-version'] = String(xApiVersion);
            }

            if (xCompanyGuid != null) {
                localVarHeaderParameter['x-company-guid'] = String(xCompanyGuid);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/company/{company_id}/task_lists/{list_id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve Task List Template
         * @param {number} companyId Company ID
         * @param {string} uuid Task List Template UUID
         * @param {string} [xApiVersion] 7shifts API version
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTaskListTemplate: async (companyId: number, uuid: string, xApiVersion?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('getTaskListTemplate', 'companyId', companyId)
            // verify required parameter 'uuid' is not null or undefined
            assertParamExists('getTaskListTemplate', 'uuid', uuid)
            const localVarPath = `/v2/company/{company_id}/task_list_templates/{uuid}`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId !== undefined ? companyId : `-company_id-`)))
                .replace(`{${"uuid"}}`, encodeURIComponent(String(uuid !== undefined ? uuid : `-uuid-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication cookieAuth required
            await setApiKeyToObject({object: localVarHeaderParameter, type: "Cookie", key: "Cookie", keyParamName: "7session", configuration})
            if (xApiVersion != null) {
                localVarHeaderParameter['x-api-version'] = String(xApiVersion);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/company/{company_id}/task_list_templates/{uuid}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get task list templates
         * @param {number} companyId Company ID
         * @param {string} [xApiVersion] 7shifts API version
         * @param {string} [xCompanyGuid] Company GUID
         * @param {number} [locationId] Location ID
         * @param {number} [departmentId] Department ID
         * @param {number} [roleId] Role ID
         * @param {string} [cursor] Cursor for the next or previous page of results.
         * @param {number} [limit] The number of results desired per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTaskListTemplates: async (companyId: number, xApiVersion?: string, xCompanyGuid?: string, locationId?: number, departmentId?: number, roleId?: number, cursor?: string, limit?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('getTaskListTemplates', 'companyId', companyId)
            const localVarPath = `/v2/company/{company_id}/task_list_templates`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId !== undefined ? companyId : `-company_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication cookieAuth required
            await setApiKeyToObject({object: localVarHeaderParameter, type: "Cookie", key: "Cookie", keyParamName: "7session", configuration})
            if (locationId !== undefined) {
                localVarQueryParameter['location_id'] = locationId;
            }

            if (departmentId !== undefined) {
                localVarQueryParameter['department_id'] = departmentId;
            }

            if (roleId !== undefined) {
                localVarQueryParameter['role_id'] = roleId;
            }

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (xApiVersion != null) {
                localVarHeaderParameter['x-api-version'] = String(xApiVersion);
            }

            if (xCompanyGuid != null) {
                localVarHeaderParameter['x-company-guid'] = String(xCompanyGuid);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/company/{company_id}/task_list_templates',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List Task Lists
         * @param {number} companyId Company ID
         * @param {string} [xApiVersion] 7shifts API version
         * @param {string} [xCompanyGuid] Company GUID
         * @param {number} [userId] User ID
         * @param {number} [locationId] Location ID
         * @param {string} [uuid] Task List Template UUID
         * @param {string} [activeOnDate] Show only tasks lists that were active on a date (YYYY-MM-DD)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTaskLists: async (companyId: number, xApiVersion?: string, xCompanyGuid?: string, userId?: number, locationId?: number, uuid?: string, activeOnDate?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('getTaskLists', 'companyId', companyId)
            const localVarPath = `/v2/company/{company_id}/task_lists`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId !== undefined ? companyId : `-company_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication cookieAuth required
            await setApiKeyToObject({object: localVarHeaderParameter, type: "Cookie", key: "Cookie", keyParamName: "7session", configuration})
            if (userId !== undefined) {
                localVarQueryParameter['user_id'] = userId;
            }

            if (locationId !== undefined) {
                localVarQueryParameter['location_id'] = locationId;
            }

            if (uuid !== undefined) {
                localVarQueryParameter['uuid'] = uuid;
            }

            if (activeOnDate !== undefined) {
                localVarQueryParameter['active_on_date'] = activeOnDate;
            }

            if (xApiVersion != null) {
                localVarHeaderParameter['x-api-version'] = String(xApiVersion);
            }

            if (xCompanyGuid != null) {
                localVarHeaderParameter['x-company-guid'] = String(xCompanyGuid);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/company/{company_id}/task_lists',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List Task Lists Summary
         * @param {number} companyId Company ID
         * @param {number} locationId Location ID
         * @param {string} date Date of requested task lists
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTaskListsSummary: async (companyId: number, locationId: number, date: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('listTaskListsSummary', 'companyId', companyId)
            // verify required parameter 'locationId' is not null or undefined
            assertParamExists('listTaskListsSummary', 'locationId', locationId)
            // verify required parameter 'date' is not null or undefined
            assertParamExists('listTaskListsSummary', 'date', date)
            const localVarPath = `/v2/company/{company_id}/task_list_daily_summary`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId !== undefined ? companyId : `-company_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication cookieAuth required
            await setApiKeyToObject({object: localVarHeaderParameter, type: "Cookie", key: "Cookie", keyParamName: "7session", configuration})
            if (locationId !== undefined) {
                localVarQueryParameter['location_id'] = locationId;
            }

            if (date !== undefined) {
                localVarQueryParameter['date'] = date;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/company/{company_id}/task_list_daily_summary',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Complete Task
         * @param {number} companyId Company ID
         * @param {number} listId Task List ID
         * @param {number} taskId Task ID
         * @param {TaskManagementMarkCompleteRequest} taskManagementMarkCompleteRequest 
         * @param {string} [xApiVersion] 7shifts API version
         * @param {string} [xCompanyGuid] Company GUID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        markComplete: async (companyId: number, listId: number, taskId: number, taskManagementMarkCompleteRequest: TaskManagementMarkCompleteRequest, xApiVersion?: string, xCompanyGuid?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('markComplete', 'companyId', companyId)
            // verify required parameter 'listId' is not null or undefined
            assertParamExists('markComplete', 'listId', listId)
            // verify required parameter 'taskId' is not null or undefined
            assertParamExists('markComplete', 'taskId', taskId)
            // verify required parameter 'taskManagementMarkCompleteRequest' is not null or undefined
            assertParamExists('markComplete', 'taskManagementMarkCompleteRequest', taskManagementMarkCompleteRequest)
            const localVarPath = `/v2/company/{company_id}/task_lists/{list_id}/tasks/{task_id}/complete`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId !== undefined ? companyId : `-company_id-`)))
                .replace(`{${"list_id"}}`, encodeURIComponent(String(listId !== undefined ? listId : `-list_id-`)))
                .replace(`{${"task_id"}}`, encodeURIComponent(String(taskId !== undefined ? taskId : `-task_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication cookieAuth required
            await setApiKeyToObject({object: localVarHeaderParameter, type: "Cookie", key: "Cookie", keyParamName: "7session", configuration})
            if (xApiVersion != null) {
                localVarHeaderParameter['x-api-version'] = String(xApiVersion);
            }

            if (xCompanyGuid != null) {
                localVarHeaderParameter['x-company-guid'] = String(xCompanyGuid);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: taskManagementMarkCompleteRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/company/{company_id}/task_lists/{list_id}/tasks/{task_id}/complete',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(taskManagementMarkCompleteRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TaskManagementApi - functional programming interface
 * @export
 */
export const TaskManagementApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TaskManagementApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Clear task
         * @param {TaskManagementApiClearTaskRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async clearTask(requestParameters: TaskManagementApiClearTaskRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TaskManagementClearTaskResponse>> {
            const taskManagementClearTaskRequest: TaskManagementClearTaskRequest = {
                user_id: requestParameters.user_id
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.clearTask(requestParameters.companyId, requestParameters.listId, requestParameters.taskId, taskManagementClearTaskRequest, requestParameters.xApiVersion, requestParameters.xCompanyGuid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Create Task List Template
         * @param {TaskManagementApiCreateTaskListTemplateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createTaskListTemplate(requestParameters: TaskManagementApiCreateTaskListTemplateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TaskManagementCreateTaskListTemplateResponse>> {
            const taskManagementCreateTaskListTemplateRequest: TaskManagementCreateTaskListTemplateRequest = {
                title: requestParameters.title,
                description: requestParameters.description,
                recurrence: requestParameters.recurrence,
                assignments: requestParameters.assignments,
                due: requestParameters.due,
                time_frame: requestParameters.time_frame,
                task_templates: requestParameters.task_templates,
                status: requestParameters.status
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createTaskListTemplate(requestParameters.companyId, taskManagementCreateTaskListTemplateRequest, requestParameters.xApiVersion, requestParameters.xCompanyGuid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Create Task Tags
         * @param {TaskManagementApiCreateTaskTagsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createTaskTags(requestParameters: TaskManagementApiCreateTaskTagsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const taskManagementCreateTaskTagsRequest: TaskManagementCreateTaskTagsRequest = {
                tags: requestParameters.requestBody.tags,
                company_id: requestParameters.requestBody.company_id
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createTaskTags(requestParameters.companyId, taskManagementCreateTaskTagsRequest, requestParameters.xApiVersion, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete Task List Template
         * @param {TaskManagementApiDeleteTaskListTemplateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteTaskListTemplate(requestParameters: TaskManagementApiDeleteTaskListTemplateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteTaskListTemplate(requestParameters.companyId, requestParameters.uuid, requestParameters.xApiVersion, requestParameters.xCompanyGuid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete Task Tags
         * @param {TaskManagementApiDeleteTaskTagsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteTaskTags(requestParameters: TaskManagementApiDeleteTaskTagsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const taskManagementDeleteTaskTagsRequest: TaskManagementDeleteTaskTagsRequest = {
                company_id: requestParameters.requestBody.company_id,
                uuids: requestParameters.requestBody.uuids
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteTaskTags(requestParameters.companyId, taskManagementDeleteTaskTagsRequest, requestParameters.xApiVersion, requestParameters.xCompanyGuid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary edit task list template
         * @param {TaskManagementApiEditTaskListTemplateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async editTaskListTemplate(requestParameters: TaskManagementApiEditTaskListTemplateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TaskManagementEditTaskListTemplateResponse>> {
            const taskManagementEditTaskListTemplateRequest: TaskManagementEditTaskListTemplateRequest = {
                title: requestParameters.title,
                description: requestParameters.description,
                status: requestParameters.status,
                task_templates: requestParameters.task_templates,
                recurrence: requestParameters.recurrence,
                assignments: requestParameters.assignments,
                due: requestParameters.due,
                time_frame: requestParameters.time_frame
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.editTaskListTemplate(requestParameters.companyId, requestParameters.uuid, taskManagementEditTaskListTemplateRequest, requestParameters.xApiVersion, requestParameters.xCompanyGuid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Gets task management settings for a company
         * @param {TaskManagementApiGetSettingsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSettings(requestParameters: TaskManagementApiGetSettingsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TaskManagementGetSettingsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSettings(requestParameters.companyId, requestParameters.xApiVersion, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Retrieve Task List
         * @param {TaskManagementApiGetTaskListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTaskList(requestParameters: TaskManagementApiGetTaskListRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TaskManagementGetTaskListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTaskList(requestParameters.companyId, requestParameters.listId, requestParameters.xApiVersion, requestParameters.xCompanyGuid, requestParameters.userId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Retrieve Task List Template
         * @param {TaskManagementApiGetTaskListTemplateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTaskListTemplate(requestParameters: TaskManagementApiGetTaskListTemplateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TaskManagementGetTaskListTemplateResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTaskListTemplate(requestParameters.companyId, requestParameters.uuid, requestParameters.xApiVersion, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get task list templates
         * @param {TaskManagementApiGetTaskListTemplatesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTaskListTemplates(requestParameters: TaskManagementApiGetTaskListTemplatesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TaskManagementGetTaskListTemplates200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTaskListTemplates(requestParameters.companyId, requestParameters.xApiVersion, requestParameters.xCompanyGuid, requestParameters.locationId, requestParameters.departmentId, requestParameters.roleId, requestParameters.cursor, requestParameters.limit, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary List Task Lists
         * @param {TaskManagementApiGetTaskListsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTaskLists(requestParameters: TaskManagementApiGetTaskListsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TaskManagementGetTaskListsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTaskLists(requestParameters.companyId, requestParameters.xApiVersion, requestParameters.xCompanyGuid, requestParameters.userId, requestParameters.locationId, requestParameters.uuid, requestParameters.activeOnDate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary List Task Lists Summary
         * @param {TaskManagementApiListTaskListsSummaryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listTaskListsSummary(requestParameters: TaskManagementApiListTaskListsSummaryRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TaskManagementListTaskListsSummary200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listTaskListsSummary(requestParameters.companyId, requestParameters.locationId, requestParameters.date, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Complete Task
         * @param {TaskManagementApiMarkCompleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async markComplete(requestParameters: TaskManagementApiMarkCompleteRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TaskManagementMarkCompleteResponse>> {
            const taskManagementMarkCompleteRequest: TaskManagementMarkCompleteRequest = {
                user_id: requestParameters.user_id,
                completion_value: requestParameters.completion_value
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.markComplete(requestParameters.companyId, requestParameters.listId, requestParameters.taskId, taskManagementMarkCompleteRequest, requestParameters.xApiVersion, requestParameters.xCompanyGuid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TaskManagementApi - factory interface
 * @export
 */
export const TaskManagementApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TaskManagementApiFp(configuration)
    return {
        /**
         * 
         * @summary Clear task
         * @param {TaskManagementApiClearTaskRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clearTask(requestParameters: TaskManagementApiClearTaskRequest, options?: AxiosRequestConfig): AxiosPromise<TaskManagementClearTaskResponse> {
            return localVarFp.clearTask(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create Task List Template
         * @param {TaskManagementApiCreateTaskListTemplateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTaskListTemplate(requestParameters: TaskManagementApiCreateTaskListTemplateRequest, options?: AxiosRequestConfig): AxiosPromise<TaskManagementCreateTaskListTemplateResponse> {
            return localVarFp.createTaskListTemplate(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create Task Tags
         * @param {TaskManagementApiCreateTaskTagsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTaskTags(requestParameters: TaskManagementApiCreateTaskTagsRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.createTaskTags(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete Task List Template
         * @param {TaskManagementApiDeleteTaskListTemplateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTaskListTemplate(requestParameters: TaskManagementApiDeleteTaskListTemplateRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteTaskListTemplate(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete Task Tags
         * @param {TaskManagementApiDeleteTaskTagsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTaskTags(requestParameters: TaskManagementApiDeleteTaskTagsRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteTaskTags(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary edit task list template
         * @param {TaskManagementApiEditTaskListTemplateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editTaskListTemplate(requestParameters: TaskManagementApiEditTaskListTemplateRequest, options?: AxiosRequestConfig): AxiosPromise<TaskManagementEditTaskListTemplateResponse> {
            return localVarFp.editTaskListTemplate(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Gets task management settings for a company
         * @param {TaskManagementApiGetSettingsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSettings(requestParameters: TaskManagementApiGetSettingsRequest, options?: AxiosRequestConfig): AxiosPromise<TaskManagementGetSettingsResponse> {
            return localVarFp.getSettings(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve Task List
         * @param {TaskManagementApiGetTaskListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTaskList(requestParameters: TaskManagementApiGetTaskListRequest, options?: AxiosRequestConfig): AxiosPromise<TaskManagementGetTaskListResponse> {
            return localVarFp.getTaskList(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve Task List Template
         * @param {TaskManagementApiGetTaskListTemplateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTaskListTemplate(requestParameters: TaskManagementApiGetTaskListTemplateRequest, options?: AxiosRequestConfig): AxiosPromise<TaskManagementGetTaskListTemplateResponse> {
            return localVarFp.getTaskListTemplate(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get task list templates
         * @param {TaskManagementApiGetTaskListTemplatesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTaskListTemplates(requestParameters: TaskManagementApiGetTaskListTemplatesRequest, options?: AxiosRequestConfig): AxiosPromise<TaskManagementGetTaskListTemplates200Response> {
            return localVarFp.getTaskListTemplates(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List Task Lists
         * @param {TaskManagementApiGetTaskListsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTaskLists(requestParameters: TaskManagementApiGetTaskListsRequest, options?: AxiosRequestConfig): AxiosPromise<TaskManagementGetTaskListsResponse> {
            return localVarFp.getTaskLists(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List Task Lists Summary
         * @param {TaskManagementApiListTaskListsSummaryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTaskListsSummary(requestParameters: TaskManagementApiListTaskListsSummaryRequest, options?: AxiosRequestConfig): AxiosPromise<TaskManagementListTaskListsSummary200Response> {
            return localVarFp.listTaskListsSummary(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Complete Task
         * @param {TaskManagementApiMarkCompleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        markComplete(requestParameters: TaskManagementApiMarkCompleteRequest, options?: AxiosRequestConfig): AxiosPromise<TaskManagementMarkCompleteResponse> {
            return localVarFp.markComplete(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for clearTask operation in TaskManagementApi.
 * @export
 * @interface TaskManagementApiClearTaskRequest
 */
export type TaskManagementApiClearTaskRequest = {
    
    /**
    * Company ID
    * @type {number}
    * @memberof TaskManagementApiClearTask
    */
    readonly companyId: number
    
    /**
    * Task List ID
    * @type {number}
    * @memberof TaskManagementApiClearTask
    */
    readonly listId: number
    
    /**
    * Task ID
    * @type {number}
    * @memberof TaskManagementApiClearTask
    */
    readonly taskId: number
    
    /**
    * 7shifts API version
    * @type {string}
    * @memberof TaskManagementApiClearTask
    */
    readonly xApiVersion?: string
    
    /**
    * Company GUID
    * @type {string}
    * @memberof TaskManagementApiClearTask
    */
    readonly xCompanyGuid?: string
    
} & TaskManagementClearTaskRequest

/**
 * Request parameters for createTaskListTemplate operation in TaskManagementApi.
 * @export
 * @interface TaskManagementApiCreateTaskListTemplateRequest
 */
export type TaskManagementApiCreateTaskListTemplateRequest = {
    
    /**
    * Company ID
    * @type {number}
    * @memberof TaskManagementApiCreateTaskListTemplate
    */
    readonly companyId: number
    
    /**
    * 7shifts API version
    * @type {string}
    * @memberof TaskManagementApiCreateTaskListTemplate
    */
    readonly xApiVersion?: string
    
    /**
    * Company GUID
    * @type {string}
    * @memberof TaskManagementApiCreateTaskListTemplate
    */
    readonly xCompanyGuid?: string
    
} & TaskManagementCreateTaskListTemplateRequest

/**
 * Request parameters for createTaskTags operation in TaskManagementApi.
 * @export
 * @interface TaskManagementApiCreateTaskTagsRequest
 */
export type TaskManagementApiCreateTaskTagsRequest = {
    /**
    * Company ID
    * @type {number}
    * @memberof TaskManagementApiCreateTaskTags
    */
    readonly companyId: number
    /**
    * 
    * @type {TaskManagementCreateTaskTagsRequest}
    * @memberof TaskManagementApiCreateTaskTags
    */
    readonly requestBody: TaskManagementCreateTaskTagsRequest
    /**
    * 7shifts API version
    * @type {string}
    * @memberof TaskManagementApiCreateTaskTags
    */
    readonly xApiVersion?: string
}

/**
 * Request parameters for deleteTaskListTemplate operation in TaskManagementApi.
 * @export
 * @interface TaskManagementApiDeleteTaskListTemplateRequest
 */
export type TaskManagementApiDeleteTaskListTemplateRequest = {
    
    /**
    * Company ID
    * @type {number}
    * @memberof TaskManagementApiDeleteTaskListTemplate
    */
    readonly companyId: number
    
    /**
    * Task List Template UUID
    * @type {string}
    * @memberof TaskManagementApiDeleteTaskListTemplate
    */
    readonly uuid: string
    
    /**
    * 7shifts API version
    * @type {string}
    * @memberof TaskManagementApiDeleteTaskListTemplate
    */
    readonly xApiVersion?: string
    
    /**
    * Company GUID
    * @type {string}
    * @memberof TaskManagementApiDeleteTaskListTemplate
    */
    readonly xCompanyGuid?: string
    
}

/**
 * Request parameters for deleteTaskTags operation in TaskManagementApi.
 * @export
 * @interface TaskManagementApiDeleteTaskTagsRequest
 */
export type TaskManagementApiDeleteTaskTagsRequest = {
    /**
    * Company ID
    * @type {number}
    * @memberof TaskManagementApiDeleteTaskTags
    */
    readonly companyId: number
    /**
    * 
    * @type {TaskManagementDeleteTaskTagsRequest}
    * @memberof TaskManagementApiDeleteTaskTags
    */
    readonly requestBody: TaskManagementDeleteTaskTagsRequest
    /**
    * 7shifts API version
    * @type {string}
    * @memberof TaskManagementApiDeleteTaskTags
    */
    readonly xApiVersion?: string
    /**
    * Company GUID
    * @type {string}
    * @memberof TaskManagementApiDeleteTaskTags
    */
    readonly xCompanyGuid?: string
}

/**
 * Request parameters for editTaskListTemplate operation in TaskManagementApi.
 * @export
 * @interface TaskManagementApiEditTaskListTemplateRequest
 */
export type TaskManagementApiEditTaskListTemplateRequest = {
    
    /**
    * Company ID
    * @type {number}
    * @memberof TaskManagementApiEditTaskListTemplate
    */
    readonly companyId: number
    
    /**
    * Task List Template UUID
    * @type {string}
    * @memberof TaskManagementApiEditTaskListTemplate
    */
    readonly uuid: string
    
    /**
    * 7shifts API version
    * @type {string}
    * @memberof TaskManagementApiEditTaskListTemplate
    */
    readonly xApiVersion?: string
    
    /**
    * Company GUID
    * @type {string}
    * @memberof TaskManagementApiEditTaskListTemplate
    */
    readonly xCompanyGuid?: string
    
} & TaskManagementEditTaskListTemplateRequest

/**
 * Request parameters for getSettings operation in TaskManagementApi.
 * @export
 * @interface TaskManagementApiGetSettingsRequest
 */
export type TaskManagementApiGetSettingsRequest = {
    
    /**
    * Company ID
    * @type {number}
    * @memberof TaskManagementApiGetSettings
    */
    readonly companyId: number
    
    /**
    * 7shifts API version
    * @type {string}
    * @memberof TaskManagementApiGetSettings
    */
    readonly xApiVersion?: string
    
}

/**
 * Request parameters for getTaskList operation in TaskManagementApi.
 * @export
 * @interface TaskManagementApiGetTaskListRequest
 */
export type TaskManagementApiGetTaskListRequest = {
    
    /**
    * Company ID
    * @type {number}
    * @memberof TaskManagementApiGetTaskList
    */
    readonly companyId: number
    
    /**
    * List ID
    * @type {number}
    * @memberof TaskManagementApiGetTaskList
    */
    readonly listId: number
    
    /**
    * 7shifts API version
    * @type {string}
    * @memberof TaskManagementApiGetTaskList
    */
    readonly xApiVersion?: string
    
    /**
    * Company GUID
    * @type {string}
    * @memberof TaskManagementApiGetTaskList
    */
    readonly xCompanyGuid?: string
    
    /**
    * User ID
    * @type {number}
    * @memberof TaskManagementApiGetTaskList
    */
    readonly userId?: number
    
}

/**
 * Request parameters for getTaskListTemplate operation in TaskManagementApi.
 * @export
 * @interface TaskManagementApiGetTaskListTemplateRequest
 */
export type TaskManagementApiGetTaskListTemplateRequest = {
    
    /**
    * Company ID
    * @type {number}
    * @memberof TaskManagementApiGetTaskListTemplate
    */
    readonly companyId: number
    
    /**
    * Task List Template UUID
    * @type {string}
    * @memberof TaskManagementApiGetTaskListTemplate
    */
    readonly uuid: string
    
    /**
    * 7shifts API version
    * @type {string}
    * @memberof TaskManagementApiGetTaskListTemplate
    */
    readonly xApiVersion?: string
    
}

/**
 * Request parameters for getTaskListTemplates operation in TaskManagementApi.
 * @export
 * @interface TaskManagementApiGetTaskListTemplatesRequest
 */
export type TaskManagementApiGetTaskListTemplatesRequest = {
    
    /**
    * Company ID
    * @type {number}
    * @memberof TaskManagementApiGetTaskListTemplates
    */
    readonly companyId: number
    
    /**
    * 7shifts API version
    * @type {string}
    * @memberof TaskManagementApiGetTaskListTemplates
    */
    readonly xApiVersion?: string
    
    /**
    * Company GUID
    * @type {string}
    * @memberof TaskManagementApiGetTaskListTemplates
    */
    readonly xCompanyGuid?: string
    
    /**
    * Location ID
    * @type {number}
    * @memberof TaskManagementApiGetTaskListTemplates
    */
    readonly locationId?: number
    
    /**
    * Department ID
    * @type {number}
    * @memberof TaskManagementApiGetTaskListTemplates
    */
    readonly departmentId?: number
    
    /**
    * Role ID
    * @type {number}
    * @memberof TaskManagementApiGetTaskListTemplates
    */
    readonly roleId?: number
    
    /**
    * Cursor for the next or previous page of results.
    * @type {string}
    * @memberof TaskManagementApiGetTaskListTemplates
    */
    readonly cursor?: string
    
    /**
    * The number of results desired per page.
    * @type {number}
    * @memberof TaskManagementApiGetTaskListTemplates
    */
    readonly limit?: number
    
}

/**
 * Request parameters for getTaskLists operation in TaskManagementApi.
 * @export
 * @interface TaskManagementApiGetTaskListsRequest
 */
export type TaskManagementApiGetTaskListsRequest = {
    
    /**
    * Company ID
    * @type {number}
    * @memberof TaskManagementApiGetTaskLists
    */
    readonly companyId: number
    
    /**
    * 7shifts API version
    * @type {string}
    * @memberof TaskManagementApiGetTaskLists
    */
    readonly xApiVersion?: string
    
    /**
    * Company GUID
    * @type {string}
    * @memberof TaskManagementApiGetTaskLists
    */
    readonly xCompanyGuid?: string
    
    /**
    * User ID
    * @type {number}
    * @memberof TaskManagementApiGetTaskLists
    */
    readonly userId?: number
    
    /**
    * Location ID
    * @type {number}
    * @memberof TaskManagementApiGetTaskLists
    */
    readonly locationId?: number
    
    /**
    * Task List Template UUID
    * @type {string}
    * @memberof TaskManagementApiGetTaskLists
    */
    readonly uuid?: string
    
    /**
    * Show only tasks lists that were active on a date (YYYY-MM-DD)
    * @type {string}
    * @memberof TaskManagementApiGetTaskLists
    */
    readonly activeOnDate?: string
    
}

/**
 * Request parameters for listTaskListsSummary operation in TaskManagementApi.
 * @export
 * @interface TaskManagementApiListTaskListsSummaryRequest
 */
export type TaskManagementApiListTaskListsSummaryRequest = {
    
    /**
    * Company ID
    * @type {number}
    * @memberof TaskManagementApiListTaskListsSummary
    */
    readonly companyId: number
    
    /**
    * Location ID
    * @type {number}
    * @memberof TaskManagementApiListTaskListsSummary
    */
    readonly locationId: number
    
    /**
    * Date of requested task lists
    * @type {string}
    * @memberof TaskManagementApiListTaskListsSummary
    */
    readonly date: string
    
}

/**
 * Request parameters for markComplete operation in TaskManagementApi.
 * @export
 * @interface TaskManagementApiMarkCompleteRequest
 */
export type TaskManagementApiMarkCompleteRequest = {
    
    /**
    * Company ID
    * @type {number}
    * @memberof TaskManagementApiMarkComplete
    */
    readonly companyId: number
    
    /**
    * Task List ID
    * @type {number}
    * @memberof TaskManagementApiMarkComplete
    */
    readonly listId: number
    
    /**
    * Task ID
    * @type {number}
    * @memberof TaskManagementApiMarkComplete
    */
    readonly taskId: number
    
    /**
    * 7shifts API version
    * @type {string}
    * @memberof TaskManagementApiMarkComplete
    */
    readonly xApiVersion?: string
    
    /**
    * Company GUID
    * @type {string}
    * @memberof TaskManagementApiMarkComplete
    */
    readonly xCompanyGuid?: string
    
} & TaskManagementMarkCompleteRequest

/**
 * TaskManagementApiGenerated - object-oriented interface
 * @export
 * @class TaskManagementApiGenerated
 * @extends {BaseAPI}
 */
export class TaskManagementApiGenerated extends BaseAPI {
    /**
     * 
     * @summary Clear task
     * @param {TaskManagementApiClearTaskRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaskManagementApiGenerated
     */
    public clearTask(requestParameters: TaskManagementApiClearTaskRequest, options?: AxiosRequestConfig) {
        return TaskManagementApiFp(this.configuration).clearTask(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create Task List Template
     * @param {TaskManagementApiCreateTaskListTemplateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaskManagementApiGenerated
     */
    public createTaskListTemplate(requestParameters: TaskManagementApiCreateTaskListTemplateRequest, options?: AxiosRequestConfig) {
        return TaskManagementApiFp(this.configuration).createTaskListTemplate(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create Task Tags
     * @param {TaskManagementApiCreateTaskTagsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaskManagementApiGenerated
     */
    public createTaskTags(requestParameters: TaskManagementApiCreateTaskTagsRequest, options?: AxiosRequestConfig) {
        return TaskManagementApiFp(this.configuration).createTaskTags(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete Task List Template
     * @param {TaskManagementApiDeleteTaskListTemplateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaskManagementApiGenerated
     */
    public deleteTaskListTemplate(requestParameters: TaskManagementApiDeleteTaskListTemplateRequest, options?: AxiosRequestConfig) {
        return TaskManagementApiFp(this.configuration).deleteTaskListTemplate(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete Task Tags
     * @param {TaskManagementApiDeleteTaskTagsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaskManagementApiGenerated
     */
    public deleteTaskTags(requestParameters: TaskManagementApiDeleteTaskTagsRequest, options?: AxiosRequestConfig) {
        return TaskManagementApiFp(this.configuration).deleteTaskTags(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary edit task list template
     * @param {TaskManagementApiEditTaskListTemplateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaskManagementApiGenerated
     */
    public editTaskListTemplate(requestParameters: TaskManagementApiEditTaskListTemplateRequest, options?: AxiosRequestConfig) {
        return TaskManagementApiFp(this.configuration).editTaskListTemplate(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Gets task management settings for a company
     * @param {TaskManagementApiGetSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaskManagementApiGenerated
     */
    public getSettings(requestParameters: TaskManagementApiGetSettingsRequest, options?: AxiosRequestConfig) {
        return TaskManagementApiFp(this.configuration).getSettings(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve Task List
     * @param {TaskManagementApiGetTaskListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaskManagementApiGenerated
     */
    public getTaskList(requestParameters: TaskManagementApiGetTaskListRequest, options?: AxiosRequestConfig) {
        return TaskManagementApiFp(this.configuration).getTaskList(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve Task List Template
     * @param {TaskManagementApiGetTaskListTemplateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaskManagementApiGenerated
     */
    public getTaskListTemplate(requestParameters: TaskManagementApiGetTaskListTemplateRequest, options?: AxiosRequestConfig) {
        return TaskManagementApiFp(this.configuration).getTaskListTemplate(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get task list templates
     * @param {TaskManagementApiGetTaskListTemplatesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaskManagementApiGenerated
     */
    public getTaskListTemplates(requestParameters: TaskManagementApiGetTaskListTemplatesRequest, options?: AxiosRequestConfig) {
        return TaskManagementApiFp(this.configuration).getTaskListTemplates(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List Task Lists
     * @param {TaskManagementApiGetTaskListsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaskManagementApiGenerated
     */
    public getTaskLists(requestParameters: TaskManagementApiGetTaskListsRequest, options?: AxiosRequestConfig) {
        return TaskManagementApiFp(this.configuration).getTaskLists(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List Task Lists Summary
     * @param {TaskManagementApiListTaskListsSummaryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaskManagementApiGenerated
     */
    public listTaskListsSummary(requestParameters: TaskManagementApiListTaskListsSummaryRequest, options?: AxiosRequestConfig) {
        return TaskManagementApiFp(this.configuration).listTaskListsSummary(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Complete Task
     * @param {TaskManagementApiMarkCompleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaskManagementApiGenerated
     */
    public markComplete(requestParameters: TaskManagementApiMarkCompleteRequest, options?: AxiosRequestConfig) {
        return TaskManagementApiFp(this.configuration).markComplete(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
