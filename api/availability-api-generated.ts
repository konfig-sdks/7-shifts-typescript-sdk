/* tslint:disable */
/* eslint-disable */
/*
7shifts API

7shifts is a team management software designed for restaurants. We help managers and operators spend less time and effort scheduling their staff, reduce their monthly labor costs and improve team communication. The result is simplified team management, one shift at a time.

7shifts also offers free mobile apps (iOS and Android) allowing managers and employees to have everything at their fingertips.

Start your free trial or request a demo at www.7shifts.com.

The version of the OpenAPI document: 2023-05-01
Contact: api-support@7shifts.com

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AvailabilityCreateNew400Response } from '../models';
// @ts-ignore
import { AvailabilityCreateNew403Response } from '../models';
// @ts-ignore
import { AvailabilityCreateNew404Response } from '../models';
// @ts-ignore
import { AvailabilityCreateNew409Response } from '../models';
// @ts-ignore
import { AvailabilityCreateNew422Response } from '../models';
// @ts-ignore
import { AvailabilityCreateNewRequest } from '../models';
// @ts-ignore
import { AvailabilityCreateNewResponse } from '../models';
// @ts-ignore
import { AvailabilityCreateReason401Response } from '../models';
// @ts-ignore
import { AvailabilityCreateReason403Response } from '../models';
// @ts-ignore
import { AvailabilityCreateReason422Response } from '../models';
// @ts-ignore
import { AvailabilityCreateReason500Response } from '../models';
// @ts-ignore
import { AvailabilityCreateReasonRequest } from '../models';
// @ts-ignore
import { AvailabilityCreateReasonResponse } from '../models';
// @ts-ignore
import { AvailabilityDeleteReason403Response } from '../models';
// @ts-ignore
import { AvailabilityDeleteReason404Response } from '../models';
// @ts-ignore
import { AvailabilityDeleteReason500Response } from '../models';
// @ts-ignore
import { AvailabilityDeleteReasonResponse } from '../models';
// @ts-ignore
import { AvailabilityGetById401Response } from '../models';
// @ts-ignore
import { AvailabilityGetById403Response } from '../models';
// @ts-ignore
import { AvailabilityGetById404Response } from '../models';
// @ts-ignore
import { AvailabilityGetById500Response } from '../models';
// @ts-ignore
import { AvailabilityGetByIdResponse } from '../models';
// @ts-ignore
import { AvailabilityListAvailabilities400Response } from '../models';
// @ts-ignore
import { AvailabilityListAvailabilities401Response } from '../models';
// @ts-ignore
import { AvailabilityListAvailabilities403Response } from '../models';
// @ts-ignore
import { AvailabilityListAvailabilitiesResponse } from '../models';
// @ts-ignore
import { AvailabilityListReasons400Response } from '../models';
// @ts-ignore
import { AvailabilityListReasons401Response } from '../models';
// @ts-ignore
import { AvailabilityListReasons403Response } from '../models';
// @ts-ignore
import { AvailabilityListReasons500Response } from '../models';
// @ts-ignore
import { AvailabilityListReasonsResponse } from '../models';
// @ts-ignore
import { AvailabilityRemoveById403Response } from '../models';
// @ts-ignore
import { AvailabilityRemoveById404Response } from '../models';
// @ts-ignore
import { AvailabilityRemoveById500Response } from '../models';
// @ts-ignore
import { AvailabilityRemoveByIdResponse } from '../models';
// @ts-ignore
import { AvailabilityUpdateById400Response } from '../models';
// @ts-ignore
import { AvailabilityUpdateById403Response } from '../models';
// @ts-ignore
import { AvailabilityUpdateById404Response } from '../models';
// @ts-ignore
import { AvailabilityUpdateById409Response } from '../models';
// @ts-ignore
import { AvailabilityUpdateById422Response } from '../models';
// @ts-ignore
import { AvailabilityUpdateByIdRequest } from '../models';
// @ts-ignore
import { AvailabilityUpdateByIdResponse } from '../models';
// @ts-ignore
import { AvailabilityUpdateReasonById400Response } from '../models';
// @ts-ignore
import { AvailabilityUpdateReasonById403Response } from '../models';
// @ts-ignore
import { AvailabilityUpdateReasonById404Response } from '../models';
// @ts-ignore
import { AvailabilityUpdateReasonById422Response } from '../models';
// @ts-ignore
import { AvailabilityUpdateReasonById500Response } from '../models';
// @ts-ignore
import { AvailabilityUpdateReasonByIdRequest } from '../models';
// @ts-ignore
import { AvailabilityUpdateReasonByIdResponse } from '../models';
// @ts-ignore
import { AvailabilityUpdateStatus403Response } from '../models';
// @ts-ignore
import { AvailabilityUpdateStatus404Response } from '../models';
// @ts-ignore
import { AvailabilityUpdateStatus422Response } from '../models';
// @ts-ignore
import { AvailabilityUpdateStatus500Response } from '../models';
// @ts-ignore
import { AvailabilityUpdateStatusRequest } from '../models';
// @ts-ignore
import { AvailabilityUpdateStatusResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * AvailabilityApi - axios parameter creator
 * @export
 */
export const AvailabilityApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create Availability
         * @param {number} companyId Company ID
         * @param {AvailabilityCreateNewRequest} availabilityCreateNewRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNew: async (companyId: number, availabilityCreateNewRequest: AvailabilityCreateNewRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('createNew', 'companyId', companyId)
            // verify required parameter 'availabilityCreateNewRequest' is not null or undefined
            assertParamExists('createNew', 'availabilityCreateNewRequest', availabilityCreateNewRequest)
            const localVarPath = `/v2/company/{company_id}/availabilities`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId !== undefined ? companyId : `-company_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication cookieAuth required
            await setApiKeyToObject({object: localVarHeaderParameter, type: "Cookie", key: "Cookie", keyParamName: "7session", configuration})

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: availabilityCreateNewRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/company/{company_id}/availabilities',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(availabilityCreateNewRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create Availability Reason
         * @param {number} companyId Company ID
         * @param {AvailabilityCreateReasonRequest} availabilityCreateReasonRequest 
         * @param {string} [xApiVersion] 7shifts API version
         * @param {string} [xCompanyGuid] Company GUID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createReason: async (companyId: number, availabilityCreateReasonRequest: AvailabilityCreateReasonRequest, xApiVersion?: string, xCompanyGuid?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('createReason', 'companyId', companyId)
            // verify required parameter 'availabilityCreateReasonRequest' is not null or undefined
            assertParamExists('createReason', 'availabilityCreateReasonRequest', availabilityCreateReasonRequest)
            const localVarPath = `/v2/company/{company_id}/availability_reasons`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId !== undefined ? companyId : `-company_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication cookieAuth required
            await setApiKeyToObject({object: localVarHeaderParameter, type: "Cookie", key: "Cookie", keyParamName: "7session", configuration})
            if (xApiVersion != null) {
                localVarHeaderParameter['x-api-version'] = String(xApiVersion);
            }

            if (xCompanyGuid != null) {
                localVarHeaderParameter['x-company-guid'] = String(xCompanyGuid);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: availabilityCreateReasonRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/company/{company_id}/availability_reasons',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(availabilityCreateReasonRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete Availability Reason
         * @param {number} companyId Company ID
         * @param {number} availabilityReasonId Availability Reason ID
         * @param {string} [xApiVersion] 7shifts API version
         * @param {string} [xCompanyGuid] Company GUID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteReason: async (companyId: number, availabilityReasonId: number, xApiVersion?: string, xCompanyGuid?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('deleteReason', 'companyId', companyId)
            // verify required parameter 'availabilityReasonId' is not null or undefined
            assertParamExists('deleteReason', 'availabilityReasonId', availabilityReasonId)
            const localVarPath = `/v2/company/{company_id}/availability_reasons/{availability_reason_id}`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId !== undefined ? companyId : `-company_id-`)))
                .replace(`{${"availability_reason_id"}}`, encodeURIComponent(String(availabilityReasonId !== undefined ? availabilityReasonId : `-availability_reason_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication cookieAuth required
            await setApiKeyToObject({object: localVarHeaderParameter, type: "Cookie", key: "Cookie", keyParamName: "7session", configuration})
            if (xApiVersion != null) {
                localVarHeaderParameter['x-api-version'] = String(xApiVersion);
            }

            if (xCompanyGuid != null) {
                localVarHeaderParameter['x-company-guid'] = String(xCompanyGuid);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/company/{company_id}/availability_reasons/{availability_reason_id}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve Availability
         * @param {number} companyId Company ID
         * @param {number} availabilityId Availability ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById: async (companyId: number, availabilityId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('getById', 'companyId', companyId)
            // verify required parameter 'availabilityId' is not null or undefined
            assertParamExists('getById', 'availabilityId', availabilityId)
            const localVarPath = `/v2/company/{company_id}/availabilities/{availability_id}`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId !== undefined ? companyId : `-company_id-`)))
                .replace(`{${"availability_id"}}`, encodeURIComponent(String(availabilityId !== undefined ? availabilityId : `-availability_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication cookieAuth required
            await setApiKeyToObject({object: localVarHeaderParameter, type: "Cookie", key: "Cookie", keyParamName: "7session", configuration})

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/company/{company_id}/availabilities/{availability_id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List Availabilities
         * @param {number} companyId Company ID
         * @param {string} [cursor] Cursor for the next or previous page of results.
         * @param {number} [limit] The number results desired per page.
         * @param {number} [locationId] Location ID
         * @param {number} [userId] User ID
         * @param {number} [status] Return availabilities for a specified status (pending &#x3D; 0, approved &#x3D; 1, declined &#x3D; 2).
         * @param {boolean} [repeating] Return repeating or weekly availabilities.
         * @param {string} [weekGte] Return availabilities for a specific week.
         * @param {string} [weekToIncludeRepeatingGte] Return repeating availabilities that end before or on a specified week.
         * @param {string} [orderField] The field that availabilities will be sorted by.
         * @param {string} [orderDir] The direction that availabilities will be sorted by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAvailabilities: async (companyId: number, cursor?: string, limit?: number, locationId?: number, userId?: number, status?: number, repeating?: boolean, weekGte?: string, weekToIncludeRepeatingGte?: string, orderField?: string, orderDir?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('listAvailabilities', 'companyId', companyId)
            const localVarPath = `/v2/company/{company_id}/availabilities`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId !== undefined ? companyId : `-company_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication cookieAuth required
            await setApiKeyToObject({object: localVarHeaderParameter, type: "Cookie", key: "Cookie", keyParamName: "7session", configuration})
            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (locationId !== undefined) {
                localVarQueryParameter['location_id'] = locationId;
            }

            if (userId !== undefined) {
                localVarQueryParameter['user_id'] = userId;
            }

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }

            if (repeating !== undefined) {
                localVarQueryParameter['repeating'] = repeating;
            }

            if (weekGte !== undefined) {
                localVarQueryParameter['week_gte'] = weekGte;
            }

            if (weekToIncludeRepeatingGte !== undefined) {
                localVarQueryParameter['week_to_include_repeating_gte'] = weekToIncludeRepeatingGte;
            }

            if (orderField !== undefined) {
                localVarQueryParameter['order_field'] = orderField;
            }

            if (orderDir !== undefined) {
                localVarQueryParameter['order_dir'] = orderDir;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/company/{company_id}/availabilities',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List Availability Reasons
         * @param {number} companyId Company ID
         * @param {string} [xApiVersion] 7shifts API version
         * @param {string} [xCompanyGuid] Company GUID
         * @param {string} [cursor] Cursor for the next or previous page of results.
         * @param {number} [limit] The number results desired per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listReasons: async (companyId: number, xApiVersion?: string, xCompanyGuid?: string, cursor?: string, limit?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('listReasons', 'companyId', companyId)
            const localVarPath = `/v2/company/{company_id}/availability_reasons`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId !== undefined ? companyId : `-company_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication cookieAuth required
            await setApiKeyToObject({object: localVarHeaderParameter, type: "Cookie", key: "Cookie", keyParamName: "7session", configuration})
            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (xApiVersion != null) {
                localVarHeaderParameter['x-api-version'] = String(xApiVersion);
            }

            if (xCompanyGuid != null) {
                localVarHeaderParameter['x-company-guid'] = String(xCompanyGuid);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/company/{company_id}/availability_reasons',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete Availability
         * @param {number} companyId Company ID
         * @param {number} availabilityId Availability ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeById: async (companyId: number, availabilityId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('removeById', 'companyId', companyId)
            // verify required parameter 'availabilityId' is not null or undefined
            assertParamExists('removeById', 'availabilityId', availabilityId)
            const localVarPath = `/v2/company/{company_id}/availabilities/{availability_id}`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId !== undefined ? companyId : `-company_id-`)))
                .replace(`{${"availability_id"}}`, encodeURIComponent(String(availabilityId !== undefined ? availabilityId : `-availability_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication cookieAuth required
            await setApiKeyToObject({object: localVarHeaderParameter, type: "Cookie", key: "Cookie", keyParamName: "7session", configuration})

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/company/{company_id}/availabilities/{availability_id}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update Availability
         * @param {number} companyId Company ID
         * @param {number} availabilityId Availability ID
         * @param {AvailabilityUpdateByIdRequest} availabilityUpdateByIdRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateById: async (companyId: number, availabilityId: number, availabilityUpdateByIdRequest: AvailabilityUpdateByIdRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('updateById', 'companyId', companyId)
            // verify required parameter 'availabilityId' is not null or undefined
            assertParamExists('updateById', 'availabilityId', availabilityId)
            // verify required parameter 'availabilityUpdateByIdRequest' is not null or undefined
            assertParamExists('updateById', 'availabilityUpdateByIdRequest', availabilityUpdateByIdRequest)
            const localVarPath = `/v2/company/{company_id}/availabilities/{availability_id}`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId !== undefined ? companyId : `-company_id-`)))
                .replace(`{${"availability_id"}}`, encodeURIComponent(String(availabilityId !== undefined ? availabilityId : `-availability_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication cookieAuth required
            await setApiKeyToObject({object: localVarHeaderParameter, type: "Cookie", key: "Cookie", keyParamName: "7session", configuration})

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: availabilityUpdateByIdRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/company/{company_id}/availabilities/{availability_id}',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(availabilityUpdateByIdRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update Availability Reason
         * @param {number} companyId Company ID
         * @param {number} availabilityReasonId Availability Reason ID
         * @param {AvailabilityUpdateReasonByIdRequest} availabilityUpdateReasonByIdRequest 
         * @param {string} [xApiVersion] 7shifts API version
         * @param {string} [xCompanyGuid] Company GUID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateReasonById: async (companyId: number, availabilityReasonId: number, availabilityUpdateReasonByIdRequest: AvailabilityUpdateReasonByIdRequest, xApiVersion?: string, xCompanyGuid?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('updateReasonById', 'companyId', companyId)
            // verify required parameter 'availabilityReasonId' is not null or undefined
            assertParamExists('updateReasonById', 'availabilityReasonId', availabilityReasonId)
            // verify required parameter 'availabilityUpdateReasonByIdRequest' is not null or undefined
            assertParamExists('updateReasonById', 'availabilityUpdateReasonByIdRequest', availabilityUpdateReasonByIdRequest)
            const localVarPath = `/v2/company/{company_id}/availability_reasons/{availability_reason_id}`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId !== undefined ? companyId : `-company_id-`)))
                .replace(`{${"availability_reason_id"}}`, encodeURIComponent(String(availabilityReasonId !== undefined ? availabilityReasonId : `-availability_reason_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication cookieAuth required
            await setApiKeyToObject({object: localVarHeaderParameter, type: "Cookie", key: "Cookie", keyParamName: "7session", configuration})
            if (xApiVersion != null) {
                localVarHeaderParameter['x-api-version'] = String(xApiVersion);
            }

            if (xCompanyGuid != null) {
                localVarHeaderParameter['x-company-guid'] = String(xCompanyGuid);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: availabilityUpdateReasonByIdRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/company/{company_id}/availability_reasons/{availability_reason_id}',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(availabilityUpdateReasonByIdRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update Availability Status
         * @param {number} companyId Company ID
         * @param {number} availabilityId Availability ID
         * @param {AvailabilityUpdateStatusRequest} [availabilityUpdateStatusRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateStatus: async (companyId: number, availabilityId: number, availabilityUpdateStatusRequest?: AvailabilityUpdateStatusRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('updateStatus', 'companyId', companyId)
            // verify required parameter 'availabilityId' is not null or undefined
            assertParamExists('updateStatus', 'availabilityId', availabilityId)
            const localVarPath = `/v2/company/{company_id}/availabilities/{availability_id}/status`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId !== undefined ? companyId : `-company_id-`)))
                .replace(`{${"availability_id"}}`, encodeURIComponent(String(availabilityId !== undefined ? availabilityId : `-availability_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication cookieAuth required
            await setApiKeyToObject({object: localVarHeaderParameter, type: "Cookie", key: "Cookie", keyParamName: "7session", configuration})

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: availabilityUpdateStatusRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/company/{company_id}/availabilities/{availability_id}/status',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(availabilityUpdateStatusRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AvailabilityApi - functional programming interface
 * @export
 */
export const AvailabilityApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AvailabilityApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create Availability
         * @param {AvailabilityApiCreateNewRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createNew(requestParameters: AvailabilityApiCreateNewRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AvailabilityCreateNewResponse>> {
            const availabilityCreateNewRequest: AvailabilityCreateNewRequest = {
                user_id: requestParameters.user_id,
                week: requestParameters.week,
                week_to: requestParameters.week_to,
                repeat: requestParameters.repeat,
                mon: requestParameters.mon,
                mon_from: requestParameters.mon_from,
                mon_to: requestParameters.mon_to,
                mon_comments: requestParameters.mon_comments,
                mon_reason: requestParameters.mon_reason,
                tue: requestParameters.tue,
                tue_from: requestParameters.tue_from,
                tue_to: requestParameters.tue_to,
                tue_comments: requestParameters.tue_comments,
                tue_reason: requestParameters.tue_reason,
                wed: requestParameters.wed,
                wed_from: requestParameters.wed_from,
                wed_to: requestParameters.wed_to,
                wed_comments: requestParameters.wed_comments,
                wed_reason: requestParameters.wed_reason,
                thu: requestParameters.thu,
                thu_from: requestParameters.thu_from,
                thu_to: requestParameters.thu_to,
                thu_comments: requestParameters.thu_comments,
                thu_reason: requestParameters.thu_reason,
                fri: requestParameters.fri,
                fri_from: requestParameters.fri_from,
                fri_to: requestParameters.fri_to,
                fri_comments: requestParameters.fri_comments,
                fri_reason: requestParameters.fri_reason,
                sat: requestParameters.sat,
                sat_from: requestParameters.sat_from,
                sat_to: requestParameters.sat_to,
                sat_comments: requestParameters.sat_comments,
                sat_reason: requestParameters.sat_reason,
                sun: requestParameters.sun,
                sun_from: requestParameters.sun_from,
                sun_to: requestParameters.sun_to,
                sun_comments: requestParameters.sun_comments,
                sun_reason: requestParameters.sun_reason
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createNew(requestParameters.companyId, availabilityCreateNewRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Create Availability Reason
         * @param {AvailabilityApiCreateReasonRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createReason(requestParameters: AvailabilityApiCreateReasonRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AvailabilityCreateReasonResponse>> {
            const availabilityCreateReasonRequest: AvailabilityCreateReasonRequest = {
                reason: requestParameters.reason,
                comments_required: requestParameters.comments_required
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createReason(requestParameters.companyId, availabilityCreateReasonRequest, requestParameters.xApiVersion, requestParameters.xCompanyGuid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete Availability Reason
         * @param {AvailabilityApiDeleteReasonRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteReason(requestParameters: AvailabilityApiDeleteReasonRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteReason(requestParameters.companyId, requestParameters.availabilityReasonId, requestParameters.xApiVersion, requestParameters.xCompanyGuid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Retrieve Availability
         * @param {AvailabilityApiGetByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getById(requestParameters: AvailabilityApiGetByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AvailabilityGetByIdResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getById(requestParameters.companyId, requestParameters.availabilityId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary List Availabilities
         * @param {AvailabilityApiListAvailabilitiesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAvailabilities(requestParameters: AvailabilityApiListAvailabilitiesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AvailabilityListAvailabilitiesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAvailabilities(requestParameters.companyId, requestParameters.cursor, requestParameters.limit, requestParameters.locationId, requestParameters.userId, requestParameters.status, requestParameters.repeating, requestParameters.weekGte, requestParameters.weekToIncludeRepeatingGte, requestParameters.orderField, requestParameters.orderDir, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary List Availability Reasons
         * @param {AvailabilityApiListReasonsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listReasons(requestParameters: AvailabilityApiListReasonsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AvailabilityListReasonsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listReasons(requestParameters.companyId, requestParameters.xApiVersion, requestParameters.xCompanyGuid, requestParameters.cursor, requestParameters.limit, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete Availability
         * @param {AvailabilityApiRemoveByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeById(requestParameters: AvailabilityApiRemoveByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeById(requestParameters.companyId, requestParameters.availabilityId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update Availability
         * @param {AvailabilityApiUpdateByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateById(requestParameters: AvailabilityApiUpdateByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AvailabilityUpdateByIdResponse>> {
            const availabilityUpdateByIdRequest: AvailabilityUpdateByIdRequest = {
                week: requestParameters.week,
                week_to: requestParameters.week_to,
                repeat: requestParameters.repeat,
                mon: requestParameters.mon,
                mon_from: requestParameters.mon_from,
                mon_to: requestParameters.mon_to,
                mon_comments: requestParameters.mon_comments,
                mon_reason: requestParameters.mon_reason,
                tue: requestParameters.tue,
                tue_from: requestParameters.tue_from,
                tue_to: requestParameters.tue_to,
                tue_comments: requestParameters.tue_comments,
                tue_reason: requestParameters.tue_reason,
                wed: requestParameters.wed,
                wed_from: requestParameters.wed_from,
                wed_to: requestParameters.wed_to,
                wed_comments: requestParameters.wed_comments,
                wed_reason: requestParameters.wed_reason,
                thu: requestParameters.thu,
                thu_from: requestParameters.thu_from,
                thu_to: requestParameters.thu_to,
                thu_comments: requestParameters.thu_comments,
                thu_reason: requestParameters.thu_reason,
                fri: requestParameters.fri,
                fri_from: requestParameters.fri_from,
                fri_to: requestParameters.fri_to,
                fri_comments: requestParameters.fri_comments,
                fri_reason: requestParameters.fri_reason,
                sat: requestParameters.sat,
                sat_from: requestParameters.sat_from,
                sat_to: requestParameters.sat_to,
                sat_comments: requestParameters.sat_comments,
                sat_reason: requestParameters.sat_reason,
                sun: requestParameters.sun,
                sun_from: requestParameters.sun_from,
                sun_to: requestParameters.sun_to,
                sun_comments: requestParameters.sun_comments,
                sun_reason: requestParameters.sun_reason
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateById(requestParameters.companyId, requestParameters.availabilityId, availabilityUpdateByIdRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update Availability Reason
         * @param {AvailabilityApiUpdateReasonByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateReasonById(requestParameters: AvailabilityApiUpdateReasonByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AvailabilityUpdateReasonByIdResponse>> {
            const availabilityUpdateReasonByIdRequest: AvailabilityUpdateReasonByIdRequest = {
                reason: requestParameters.reason,
                comments_required: requestParameters.comments_required
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateReasonById(requestParameters.companyId, requestParameters.availabilityReasonId, availabilityUpdateReasonByIdRequest, requestParameters.xApiVersion, requestParameters.xCompanyGuid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update Availability Status
         * @param {AvailabilityApiUpdateStatusRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateStatus(requestParameters: AvailabilityApiUpdateStatusRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const availabilityUpdateStatusRequest: AvailabilityUpdateStatusRequest = {
                status: requestParameters.status,
                message: requestParameters.message
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateStatus(requestParameters.companyId, requestParameters.availabilityId, availabilityUpdateStatusRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AvailabilityApi - factory interface
 * @export
 */
export const AvailabilityApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AvailabilityApiFp(configuration)
    return {
        /**
         * 
         * @summary Create Availability
         * @param {AvailabilityApiCreateNewRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNew(requestParameters: AvailabilityApiCreateNewRequest, options?: AxiosRequestConfig): AxiosPromise<AvailabilityCreateNewResponse> {
            return localVarFp.createNew(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create Availability Reason
         * @param {AvailabilityApiCreateReasonRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createReason(requestParameters: AvailabilityApiCreateReasonRequest, options?: AxiosRequestConfig): AxiosPromise<AvailabilityCreateReasonResponse> {
            return localVarFp.createReason(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete Availability Reason
         * @param {AvailabilityApiDeleteReasonRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteReason(requestParameters: AvailabilityApiDeleteReasonRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteReason(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve Availability
         * @param {AvailabilityApiGetByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById(requestParameters: AvailabilityApiGetByIdRequest, options?: AxiosRequestConfig): AxiosPromise<AvailabilityGetByIdResponse> {
            return localVarFp.getById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List Availabilities
         * @param {AvailabilityApiListAvailabilitiesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAvailabilities(requestParameters: AvailabilityApiListAvailabilitiesRequest, options?: AxiosRequestConfig): AxiosPromise<AvailabilityListAvailabilitiesResponse> {
            return localVarFp.listAvailabilities(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List Availability Reasons
         * @param {AvailabilityApiListReasonsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listReasons(requestParameters: AvailabilityApiListReasonsRequest, options?: AxiosRequestConfig): AxiosPromise<AvailabilityListReasonsResponse> {
            return localVarFp.listReasons(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete Availability
         * @param {AvailabilityApiRemoveByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeById(requestParameters: AvailabilityApiRemoveByIdRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.removeById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update Availability
         * @param {AvailabilityApiUpdateByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateById(requestParameters: AvailabilityApiUpdateByIdRequest, options?: AxiosRequestConfig): AxiosPromise<AvailabilityUpdateByIdResponse> {
            return localVarFp.updateById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update Availability Reason
         * @param {AvailabilityApiUpdateReasonByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateReasonById(requestParameters: AvailabilityApiUpdateReasonByIdRequest, options?: AxiosRequestConfig): AxiosPromise<AvailabilityUpdateReasonByIdResponse> {
            return localVarFp.updateReasonById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update Availability Status
         * @param {AvailabilityApiUpdateStatusRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateStatus(requestParameters: AvailabilityApiUpdateStatusRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updateStatus(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createNew operation in AvailabilityApi.
 * @export
 * @interface AvailabilityApiCreateNewRequest
 */
export type AvailabilityApiCreateNewRequest = {
    
    /**
    * Company ID
    * @type {number}
    * @memberof AvailabilityApiCreateNew
    */
    readonly companyId: number
    
} & AvailabilityCreateNewRequest

/**
 * Request parameters for createReason operation in AvailabilityApi.
 * @export
 * @interface AvailabilityApiCreateReasonRequest
 */
export type AvailabilityApiCreateReasonRequest = {
    
    /**
    * Company ID
    * @type {number}
    * @memberof AvailabilityApiCreateReason
    */
    readonly companyId: number
    
    /**
    * 7shifts API version
    * @type {string}
    * @memberof AvailabilityApiCreateReason
    */
    readonly xApiVersion?: string
    
    /**
    * Company GUID
    * @type {string}
    * @memberof AvailabilityApiCreateReason
    */
    readonly xCompanyGuid?: string
    
} & AvailabilityCreateReasonRequest

/**
 * Request parameters for deleteReason operation in AvailabilityApi.
 * @export
 * @interface AvailabilityApiDeleteReasonRequest
 */
export type AvailabilityApiDeleteReasonRequest = {
    
    /**
    * Company ID
    * @type {number}
    * @memberof AvailabilityApiDeleteReason
    */
    readonly companyId: number
    
    /**
    * Availability Reason ID
    * @type {number}
    * @memberof AvailabilityApiDeleteReason
    */
    readonly availabilityReasonId: number
    
    /**
    * 7shifts API version
    * @type {string}
    * @memberof AvailabilityApiDeleteReason
    */
    readonly xApiVersion?: string
    
    /**
    * Company GUID
    * @type {string}
    * @memberof AvailabilityApiDeleteReason
    */
    readonly xCompanyGuid?: string
    
}

/**
 * Request parameters for getById operation in AvailabilityApi.
 * @export
 * @interface AvailabilityApiGetByIdRequest
 */
export type AvailabilityApiGetByIdRequest = {
    
    /**
    * Company ID
    * @type {number}
    * @memberof AvailabilityApiGetById
    */
    readonly companyId: number
    
    /**
    * Availability ID
    * @type {number}
    * @memberof AvailabilityApiGetById
    */
    readonly availabilityId: number
    
}

/**
 * Request parameters for listAvailabilities operation in AvailabilityApi.
 * @export
 * @interface AvailabilityApiListAvailabilitiesRequest
 */
export type AvailabilityApiListAvailabilitiesRequest = {
    
    /**
    * Company ID
    * @type {number}
    * @memberof AvailabilityApiListAvailabilities
    */
    readonly companyId: number
    
    /**
    * Cursor for the next or previous page of results.
    * @type {string}
    * @memberof AvailabilityApiListAvailabilities
    */
    readonly cursor?: string
    
    /**
    * The number results desired per page.
    * @type {number}
    * @memberof AvailabilityApiListAvailabilities
    */
    readonly limit?: number
    
    /**
    * Location ID
    * @type {number}
    * @memberof AvailabilityApiListAvailabilities
    */
    readonly locationId?: number
    
    /**
    * User ID
    * @type {number}
    * @memberof AvailabilityApiListAvailabilities
    */
    readonly userId?: number
    
    /**
    * Return availabilities for a specified status (pending = 0, approved = 1, declined = 2).
    * @type {number}
    * @memberof AvailabilityApiListAvailabilities
    */
    readonly status?: number
    
    /**
    * Return repeating or weekly availabilities.
    * @type {boolean}
    * @memberof AvailabilityApiListAvailabilities
    */
    readonly repeating?: boolean
    
    /**
    * Return availabilities for a specific week.
    * @type {string}
    * @memberof AvailabilityApiListAvailabilities
    */
    readonly weekGte?: string
    
    /**
    * Return repeating availabilities that end before or on a specified week.
    * @type {string}
    * @memberof AvailabilityApiListAvailabilities
    */
    readonly weekToIncludeRepeatingGte?: string
    
    /**
    * The field that availabilities will be sorted by.
    * @type {string}
    * @memberof AvailabilityApiListAvailabilities
    */
    readonly orderField?: string
    
    /**
    * The direction that availabilities will be sorted by.
    * @type {string}
    * @memberof AvailabilityApiListAvailabilities
    */
    readonly orderDir?: string
    
}

/**
 * Request parameters for listReasons operation in AvailabilityApi.
 * @export
 * @interface AvailabilityApiListReasonsRequest
 */
export type AvailabilityApiListReasonsRequest = {
    
    /**
    * Company ID
    * @type {number}
    * @memberof AvailabilityApiListReasons
    */
    readonly companyId: number
    
    /**
    * 7shifts API version
    * @type {string}
    * @memberof AvailabilityApiListReasons
    */
    readonly xApiVersion?: string
    
    /**
    * Company GUID
    * @type {string}
    * @memberof AvailabilityApiListReasons
    */
    readonly xCompanyGuid?: string
    
    /**
    * Cursor for the next or previous page of results.
    * @type {string}
    * @memberof AvailabilityApiListReasons
    */
    readonly cursor?: string
    
    /**
    * The number results desired per page.
    * @type {number}
    * @memberof AvailabilityApiListReasons
    */
    readonly limit?: number
    
}

/**
 * Request parameters for removeById operation in AvailabilityApi.
 * @export
 * @interface AvailabilityApiRemoveByIdRequest
 */
export type AvailabilityApiRemoveByIdRequest = {
    
    /**
    * Company ID
    * @type {number}
    * @memberof AvailabilityApiRemoveById
    */
    readonly companyId: number
    
    /**
    * Availability ID
    * @type {number}
    * @memberof AvailabilityApiRemoveById
    */
    readonly availabilityId: number
    
}

/**
 * Request parameters for updateById operation in AvailabilityApi.
 * @export
 * @interface AvailabilityApiUpdateByIdRequest
 */
export type AvailabilityApiUpdateByIdRequest = {
    
    /**
    * Company ID
    * @type {number}
    * @memberof AvailabilityApiUpdateById
    */
    readonly companyId: number
    
    /**
    * Availability ID
    * @type {number}
    * @memberof AvailabilityApiUpdateById
    */
    readonly availabilityId: number
    
} & AvailabilityUpdateByIdRequest

/**
 * Request parameters for updateReasonById operation in AvailabilityApi.
 * @export
 * @interface AvailabilityApiUpdateReasonByIdRequest
 */
export type AvailabilityApiUpdateReasonByIdRequest = {
    
    /**
    * Company ID
    * @type {number}
    * @memberof AvailabilityApiUpdateReasonById
    */
    readonly companyId: number
    
    /**
    * Availability Reason ID
    * @type {number}
    * @memberof AvailabilityApiUpdateReasonById
    */
    readonly availabilityReasonId: number
    
    /**
    * 7shifts API version
    * @type {string}
    * @memberof AvailabilityApiUpdateReasonById
    */
    readonly xApiVersion?: string
    
    /**
    * Company GUID
    * @type {string}
    * @memberof AvailabilityApiUpdateReasonById
    */
    readonly xCompanyGuid?: string
    
} & AvailabilityUpdateReasonByIdRequest

/**
 * Request parameters for updateStatus operation in AvailabilityApi.
 * @export
 * @interface AvailabilityApiUpdateStatusRequest
 */
export type AvailabilityApiUpdateStatusRequest = {
    
    /**
    * Company ID
    * @type {number}
    * @memberof AvailabilityApiUpdateStatus
    */
    readonly companyId: number
    
    /**
    * Availability ID
    * @type {number}
    * @memberof AvailabilityApiUpdateStatus
    */
    readonly availabilityId: number
    
} & AvailabilityUpdateStatusRequest

/**
 * AvailabilityApiGenerated - object-oriented interface
 * @export
 * @class AvailabilityApiGenerated
 * @extends {BaseAPI}
 */
export class AvailabilityApiGenerated extends BaseAPI {
    /**
     * 
     * @summary Create Availability
     * @param {AvailabilityApiCreateNewRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AvailabilityApiGenerated
     */
    public createNew(requestParameters: AvailabilityApiCreateNewRequest, options?: AxiosRequestConfig) {
        return AvailabilityApiFp(this.configuration).createNew(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create Availability Reason
     * @param {AvailabilityApiCreateReasonRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AvailabilityApiGenerated
     */
    public createReason(requestParameters: AvailabilityApiCreateReasonRequest, options?: AxiosRequestConfig) {
        return AvailabilityApiFp(this.configuration).createReason(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete Availability Reason
     * @param {AvailabilityApiDeleteReasonRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AvailabilityApiGenerated
     */
    public deleteReason(requestParameters: AvailabilityApiDeleteReasonRequest, options?: AxiosRequestConfig) {
        return AvailabilityApiFp(this.configuration).deleteReason(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve Availability
     * @param {AvailabilityApiGetByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AvailabilityApiGenerated
     */
    public getById(requestParameters: AvailabilityApiGetByIdRequest, options?: AxiosRequestConfig) {
        return AvailabilityApiFp(this.configuration).getById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List Availabilities
     * @param {AvailabilityApiListAvailabilitiesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AvailabilityApiGenerated
     */
    public listAvailabilities(requestParameters: AvailabilityApiListAvailabilitiesRequest, options?: AxiosRequestConfig) {
        return AvailabilityApiFp(this.configuration).listAvailabilities(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List Availability Reasons
     * @param {AvailabilityApiListReasonsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AvailabilityApiGenerated
     */
    public listReasons(requestParameters: AvailabilityApiListReasonsRequest, options?: AxiosRequestConfig) {
        return AvailabilityApiFp(this.configuration).listReasons(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete Availability
     * @param {AvailabilityApiRemoveByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AvailabilityApiGenerated
     */
    public removeById(requestParameters: AvailabilityApiRemoveByIdRequest, options?: AxiosRequestConfig) {
        return AvailabilityApiFp(this.configuration).removeById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update Availability
     * @param {AvailabilityApiUpdateByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AvailabilityApiGenerated
     */
    public updateById(requestParameters: AvailabilityApiUpdateByIdRequest, options?: AxiosRequestConfig) {
        return AvailabilityApiFp(this.configuration).updateById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update Availability Reason
     * @param {AvailabilityApiUpdateReasonByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AvailabilityApiGenerated
     */
    public updateReasonById(requestParameters: AvailabilityApiUpdateReasonByIdRequest, options?: AxiosRequestConfig) {
        return AvailabilityApiFp(this.configuration).updateReasonById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update Availability Status
     * @param {AvailabilityApiUpdateStatusRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AvailabilityApiGenerated
     */
    public updateStatus(requestParameters: AvailabilityApiUpdateStatusRequest, options?: AxiosRequestConfig) {
        return AvailabilityApiFp(this.configuration).updateStatus(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
