/* tslint:disable */
/* eslint-disable */
/*
7shifts API

7shifts is a team management software designed for restaurants. We help managers and operators spend less time and effort scheduling their staff, reduce their monthly labor costs and improve team communication. The result is simplified team management, one shift at a time.

7shifts also offers free mobile apps (iOS and Android) allowing managers and employees to have everything at their fingertips.

Start your free trial or request a demo at www.7shifts.com.

The version of the OpenAPI document: 2023-05-01
Contact: api-support@7shifts.com

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { LocationsCreate400Response } from '../models';
// @ts-ignore
import { LocationsCreate403Response } from '../models';
// @ts-ignore
import { LocationsCreate500Response } from '../models';
// @ts-ignore
import { LocationsCreateRequest } from '../models';
// @ts-ignore
import { LocationsCreateResponse } from '../models';
// @ts-ignore
import { LocationsGetLocation403Response } from '../models';
// @ts-ignore
import { LocationsGetLocation404Response } from '../models';
// @ts-ignore
import { LocationsGetLocation500Response } from '../models';
// @ts-ignore
import { LocationsGetLocationResponse } from '../models';
// @ts-ignore
import { LocationsListGet400Response } from '../models';
// @ts-ignore
import { LocationsListGet403Response } from '../models';
// @ts-ignore
import { LocationsListGet500Response } from '../models';
// @ts-ignore
import { LocationsListGetResponse } from '../models';
// @ts-ignore
import { LocationsRemoveLocationById404Response } from '../models';
// @ts-ignore
import { LocationsRemoveLocationById500Response } from '../models';
// @ts-ignore
import { LocationsRemoveLocationByIdResponse } from '../models';
// @ts-ignore
import { LocationsUpdateLocationById400Response } from '../models';
// @ts-ignore
import { LocationsUpdateLocationById403Response } from '../models';
// @ts-ignore
import { LocationsUpdateLocationById404Response } from '../models';
// @ts-ignore
import { LocationsUpdateLocationById500Response } from '../models';
// @ts-ignore
import { LocationsUpdateLocationByIdRequest } from '../models';
// @ts-ignore
import { LocationsUpdateLocationByIdResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * LocationsApi - axios parameter creator
 * @export
 */
export const LocationsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create Location
         * @param {number} companyId Company ID
         * @param {LocationsCreateRequest} locationsCreateRequest 
         * @param {string} [xApiVersion] 7shifts API version
         * @param {string} [xCompanyGuid] Company GUID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create: async (companyId: number, locationsCreateRequest: LocationsCreateRequest, xApiVersion?: string, xCompanyGuid?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('create', 'companyId', companyId)
            // verify required parameter 'locationsCreateRequest' is not null or undefined
            assertParamExists('create', 'locationsCreateRequest', locationsCreateRequest)
            const localVarPath = `/v2/company/{company_id}/locations`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId !== undefined ? companyId : `-company_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication cookieAuth required
            await setApiKeyToObject({object: localVarHeaderParameter, type: "Cookie", key: "Cookie", keyParamName: "7session", configuration})
            if (xApiVersion != null) {
                localVarHeaderParameter['x-api-version'] = String(xApiVersion);
            }

            if (xCompanyGuid != null) {
                localVarHeaderParameter['x-company-guid'] = String(xCompanyGuid);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: locationsCreateRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/company/{company_id}/locations',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(locationsCreateRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve Location
         * @param {number} companyId Company ID
         * @param {number} locationId Location ID
         * @param {string} [xApiVersion] 7shifts API version
         * @param {string} [xCompanyGuid] Company GUID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLocation: async (companyId: number, locationId: number, xApiVersion?: string, xCompanyGuid?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('getLocation', 'companyId', companyId)
            // verify required parameter 'locationId' is not null or undefined
            assertParamExists('getLocation', 'locationId', locationId)
            const localVarPath = `/v2/company/{company_id}/locations/{location_id}`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId !== undefined ? companyId : `-company_id-`)))
                .replace(`{${"location_id"}}`, encodeURIComponent(String(locationId !== undefined ? locationId : `-location_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication cookieAuth required
            await setApiKeyToObject({object: localVarHeaderParameter, type: "Cookie", key: "Cookie", keyParamName: "7session", configuration})
            if (xApiVersion != null) {
                localVarHeaderParameter['x-api-version'] = String(xApiVersion);
            }

            if (xCompanyGuid != null) {
                localVarHeaderParameter['x-company-guid'] = String(xCompanyGuid);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/company/{company_id}/locations/{location_id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List Locations
         * @param {number} companyId Company ID
         * @param {string} [xApiVersion] 7shifts API version
         * @param {string} [xCompanyGuid] Company GUID
         * @param {string} [modifiedSince] Return locations that have been modified since the specified date. Format YYYY-MM-DD
         * @param {boolean} [deleted] When TRUE the search will return deleted locations
         * @param {string} [cursor] Cursor for the next or previous page of results.
         * @param {number} [limit] The number of results desired per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listGet: async (companyId: number, xApiVersion?: string, xCompanyGuid?: string, modifiedSince?: string, deleted?: boolean, cursor?: string, limit?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('listGet', 'companyId', companyId)
            const localVarPath = `/v2/company/{company_id}/locations`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId !== undefined ? companyId : `-company_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication cookieAuth required
            await setApiKeyToObject({object: localVarHeaderParameter, type: "Cookie", key: "Cookie", keyParamName: "7session", configuration})
            if (modifiedSince !== undefined) {
                localVarQueryParameter['modified_since'] = modifiedSince;
            }

            if (deleted !== undefined) {
                localVarQueryParameter['deleted'] = deleted;
            }

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (xApiVersion != null) {
                localVarHeaderParameter['x-api-version'] = String(xApiVersion);
            }

            if (xCompanyGuid != null) {
                localVarHeaderParameter['x-company-guid'] = String(xCompanyGuid);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/company/{company_id}/locations',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete Location
         * @param {number} companyId Company ID
         * @param {number} locationId Location ID
         * @param {string} [xApiVersion] 7shifts API version
         * @param {string} [xCompanyGuid] Company GUID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeLocationById: async (companyId: number, locationId: number, xApiVersion?: string, xCompanyGuid?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('removeLocationById', 'companyId', companyId)
            // verify required parameter 'locationId' is not null or undefined
            assertParamExists('removeLocationById', 'locationId', locationId)
            const localVarPath = `/v2/company/{company_id}/locations/{location_id}`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId !== undefined ? companyId : `-company_id-`)))
                .replace(`{${"location_id"}}`, encodeURIComponent(String(locationId !== undefined ? locationId : `-location_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication cookieAuth required
            await setApiKeyToObject({object: localVarHeaderParameter, type: "Cookie", key: "Cookie", keyParamName: "7session", configuration})
            if (xApiVersion != null) {
                localVarHeaderParameter['x-api-version'] = String(xApiVersion);
            }

            if (xCompanyGuid != null) {
                localVarHeaderParameter['x-company-guid'] = String(xCompanyGuid);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/company/{company_id}/locations/{location_id}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update Location
         * @param {number} companyId Company ID
         * @param {number} locationId Location ID
         * @param {LocationsUpdateLocationByIdRequest} locationsUpdateLocationByIdRequest 
         * @param {string} [xApiVersion] 7shifts API version
         * @param {string} [xCompanyGuid] Company GUID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateLocationById: async (companyId: number, locationId: number, locationsUpdateLocationByIdRequest: LocationsUpdateLocationByIdRequest, xApiVersion?: string, xCompanyGuid?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('updateLocationById', 'companyId', companyId)
            // verify required parameter 'locationId' is not null or undefined
            assertParamExists('updateLocationById', 'locationId', locationId)
            // verify required parameter 'locationsUpdateLocationByIdRequest' is not null or undefined
            assertParamExists('updateLocationById', 'locationsUpdateLocationByIdRequest', locationsUpdateLocationByIdRequest)
            const localVarPath = `/v2/company/{company_id}/locations/{location_id}`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId !== undefined ? companyId : `-company_id-`)))
                .replace(`{${"location_id"}}`, encodeURIComponent(String(locationId !== undefined ? locationId : `-location_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication cookieAuth required
            await setApiKeyToObject({object: localVarHeaderParameter, type: "Cookie", key: "Cookie", keyParamName: "7session", configuration})
            if (xApiVersion != null) {
                localVarHeaderParameter['x-api-version'] = String(xApiVersion);
            }

            if (xCompanyGuid != null) {
                localVarHeaderParameter['x-company-guid'] = String(xCompanyGuid);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: locationsUpdateLocationByIdRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/company/{company_id}/locations/{location_id}',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(locationsUpdateLocationByIdRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LocationsApi - functional programming interface
 * @export
 */
export const LocationsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = LocationsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create Location
         * @param {LocationsApiCreateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async create(requestParameters: LocationsApiCreateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LocationsCreateResponse>> {
            const locationsCreateRequest: LocationsCreateRequest = {
                name: requestParameters.name,
                country: requestParameters.country,
                formatted_address: requestParameters.formatted_address,
                state: requestParameters.state,
                city: requestParameters.city,
                latitude: requestParameters.latitude,
                longitude: requestParameters.longitude,
                place_id: requestParameters.place_id,
                timezone: requestParameters.timezone,
                holiday_pay: requestParameters.holiday_pay,
                sun_hours_close: requestParameters.sun_hours_close,
                mon_hours_close: requestParameters.mon_hours_close,
                tue_hours_close: requestParameters.tue_hours_close,
                wed_hours_close: requestParameters.wed_hours_close,
                thu_hours_close: requestParameters.thu_hours_close,
                fri_hours_close: requestParameters.fri_hours_close,
                sat_hours_close: requestParameters.sat_hours_close,
                sun_hours_open: requestParameters.sun_hours_open,
                mon_hours_open: requestParameters.mon_hours_open,
                tue_hours_open: requestParameters.tue_hours_open,
                wed_hours_open: requestParameters.wed_hours_open,
                thu_hours_open: requestParameters.thu_hours_open,
                fri_hours_open: requestParameters.fri_hours_open,
                sat_hours_open: requestParameters.sat_hours_open,
                sun_is_closed: requestParameters.sun_is_closed,
                mon_is_closed: requestParameters.mon_is_closed,
                tue_is_closed: requestParameters.tue_is_closed,
                wed_is_closed: requestParameters.wed_is_closed,
                thu_is_closed: requestParameters.thu_is_closed,
                fri_is_closed: requestParameters.fri_is_closed,
                sat_is_closed: requestParameters.sat_is_closed,
                enable_shift_feedback: requestParameters.enable_shift_feedback,
                shift_feedback: requestParameters.shift_feedback,
                coupon: requestParameters.coupon,
                stripe_token_id: requestParameters.stripe_token_id,
                copy_from_id: requestParameters.copy_from_id
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.create(requestParameters.companyId, locationsCreateRequest, requestParameters.xApiVersion, requestParameters.xCompanyGuid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Retrieve Location
         * @param {LocationsApiGetLocationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLocation(requestParameters: LocationsApiGetLocationRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LocationsGetLocationResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLocation(requestParameters.companyId, requestParameters.locationId, requestParameters.xApiVersion, requestParameters.xCompanyGuid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary List Locations
         * @param {LocationsApiListGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listGet(requestParameters: LocationsApiListGetRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LocationsListGetResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listGet(requestParameters.companyId, requestParameters.xApiVersion, requestParameters.xCompanyGuid, requestParameters.modifiedSince, requestParameters.deleted, requestParameters.cursor, requestParameters.limit, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete Location
         * @param {LocationsApiRemoveLocationByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeLocationById(requestParameters: LocationsApiRemoveLocationByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeLocationById(requestParameters.companyId, requestParameters.locationId, requestParameters.xApiVersion, requestParameters.xCompanyGuid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update Location
         * @param {LocationsApiUpdateLocationByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateLocationById(requestParameters: LocationsApiUpdateLocationByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LocationsUpdateLocationByIdResponse>> {
            const locationsUpdateLocationByIdRequest: LocationsUpdateLocationByIdRequest = {
                name: requestParameters.name,
                city: requestParameters.city,
                country: requestParameters.country,
                state: requestParameters.state,
                shift_feedback: requestParameters.shift_feedback,
                formatted_address: requestParameters.formatted_address,
                lat: requestParameters.lat,
                lng: requestParameters.lng,
                place_id: requestParameters.place_id,
                timezone: requestParameters.timezone,
                hash: requestParameters.hash,
                department_based_budget: requestParameters.department_based_budget,
                holiday_pay: requestParameters.holiday_pay,
                auto_send_log_book_time: requestParameters.auto_send_log_book_time,
                sun_hours_close: requestParameters.sun_hours_close,
                mon_hours_close: requestParameters.mon_hours_close,
                tue_hours_close: requestParameters.tue_hours_close,
                wed_hours_close: requestParameters.wed_hours_close,
                thu_hours_close: requestParameters.thu_hours_close,
                fri_hours_close: requestParameters.fri_hours_close,
                sat_hours_close: requestParameters.sat_hours_close,
                sun_hours_open: requestParameters.sun_hours_open,
                mon_hours_open: requestParameters.mon_hours_open,
                tue_hours_open: requestParameters.tue_hours_open,
                wed_hours_open: requestParameters.wed_hours_open,
                thu_hours_open: requestParameters.thu_hours_open,
                fri_hours_open: requestParameters.fri_hours_open,
                sat_hours_open: requestParameters.sat_hours_open,
                sun_is_closed: requestParameters.sun_is_closed,
                mon_is_closed: requestParameters.mon_is_closed,
                tue_is_closed: requestParameters.tue_is_closed,
                wed_is_closed: requestParameters.wed_is_closed,
                thu_is_closed: requestParameters.thu_is_closed,
                fri_is_closed: requestParameters.fri_is_closed,
                sat_is_closed: requestParameters.sat_is_closed,
                message: requestParameters.message
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateLocationById(requestParameters.companyId, requestParameters.locationId, locationsUpdateLocationByIdRequest, requestParameters.xApiVersion, requestParameters.xCompanyGuid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * LocationsApi - factory interface
 * @export
 */
export const LocationsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = LocationsApiFp(configuration)
    return {
        /**
         * 
         * @summary Create Location
         * @param {LocationsApiCreateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create(requestParameters: LocationsApiCreateRequest, options?: AxiosRequestConfig): AxiosPromise<LocationsCreateResponse> {
            return localVarFp.create(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve Location
         * @param {LocationsApiGetLocationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLocation(requestParameters: LocationsApiGetLocationRequest, options?: AxiosRequestConfig): AxiosPromise<LocationsGetLocationResponse> {
            return localVarFp.getLocation(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List Locations
         * @param {LocationsApiListGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listGet(requestParameters: LocationsApiListGetRequest, options?: AxiosRequestConfig): AxiosPromise<LocationsListGetResponse> {
            return localVarFp.listGet(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete Location
         * @param {LocationsApiRemoveLocationByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeLocationById(requestParameters: LocationsApiRemoveLocationByIdRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.removeLocationById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update Location
         * @param {LocationsApiUpdateLocationByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateLocationById(requestParameters: LocationsApiUpdateLocationByIdRequest, options?: AxiosRequestConfig): AxiosPromise<LocationsUpdateLocationByIdResponse> {
            return localVarFp.updateLocationById(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for create operation in LocationsApi.
 * @export
 * @interface LocationsApiCreateRequest
 */
export type LocationsApiCreateRequest = {
    
    /**
    * Company ID
    * @type {number}
    * @memberof LocationsApiCreate
    */
    readonly companyId: number
    
    /**
    * 7shifts API version
    * @type {string}
    * @memberof LocationsApiCreate
    */
    readonly xApiVersion?: string
    
    /**
    * Company GUID
    * @type {string}
    * @memberof LocationsApiCreate
    */
    readonly xCompanyGuid?: string
    
} & LocationsCreateRequest

/**
 * Request parameters for getLocation operation in LocationsApi.
 * @export
 * @interface LocationsApiGetLocationRequest
 */
export type LocationsApiGetLocationRequest = {
    
    /**
    * Company ID
    * @type {number}
    * @memberof LocationsApiGetLocation
    */
    readonly companyId: number
    
    /**
    * Location ID
    * @type {number}
    * @memberof LocationsApiGetLocation
    */
    readonly locationId: number
    
    /**
    * 7shifts API version
    * @type {string}
    * @memberof LocationsApiGetLocation
    */
    readonly xApiVersion?: string
    
    /**
    * Company GUID
    * @type {string}
    * @memberof LocationsApiGetLocation
    */
    readonly xCompanyGuid?: string
    
}

/**
 * Request parameters for listGet operation in LocationsApi.
 * @export
 * @interface LocationsApiListGetRequest
 */
export type LocationsApiListGetRequest = {
    
    /**
    * Company ID
    * @type {number}
    * @memberof LocationsApiListGet
    */
    readonly companyId: number
    
    /**
    * 7shifts API version
    * @type {string}
    * @memberof LocationsApiListGet
    */
    readonly xApiVersion?: string
    
    /**
    * Company GUID
    * @type {string}
    * @memberof LocationsApiListGet
    */
    readonly xCompanyGuid?: string
    
    /**
    * Return locations that have been modified since the specified date. Format YYYY-MM-DD
    * @type {string}
    * @memberof LocationsApiListGet
    */
    readonly modifiedSince?: string
    
    /**
    * When TRUE the search will return deleted locations
    * @type {boolean}
    * @memberof LocationsApiListGet
    */
    readonly deleted?: boolean
    
    /**
    * Cursor for the next or previous page of results.
    * @type {string}
    * @memberof LocationsApiListGet
    */
    readonly cursor?: string
    
    /**
    * The number of results desired per page.
    * @type {number}
    * @memberof LocationsApiListGet
    */
    readonly limit?: number
    
}

/**
 * Request parameters for removeLocationById operation in LocationsApi.
 * @export
 * @interface LocationsApiRemoveLocationByIdRequest
 */
export type LocationsApiRemoveLocationByIdRequest = {
    
    /**
    * Company ID
    * @type {number}
    * @memberof LocationsApiRemoveLocationById
    */
    readonly companyId: number
    
    /**
    * Location ID
    * @type {number}
    * @memberof LocationsApiRemoveLocationById
    */
    readonly locationId: number
    
    /**
    * 7shifts API version
    * @type {string}
    * @memberof LocationsApiRemoveLocationById
    */
    readonly xApiVersion?: string
    
    /**
    * Company GUID
    * @type {string}
    * @memberof LocationsApiRemoveLocationById
    */
    readonly xCompanyGuid?: string
    
}

/**
 * Request parameters for updateLocationById operation in LocationsApi.
 * @export
 * @interface LocationsApiUpdateLocationByIdRequest
 */
export type LocationsApiUpdateLocationByIdRequest = {
    
    /**
    * Company ID
    * @type {number}
    * @memberof LocationsApiUpdateLocationById
    */
    readonly companyId: number
    
    /**
    * Location ID
    * @type {number}
    * @memberof LocationsApiUpdateLocationById
    */
    readonly locationId: number
    
    /**
    * 7shifts API version
    * @type {string}
    * @memberof LocationsApiUpdateLocationById
    */
    readonly xApiVersion?: string
    
    /**
    * Company GUID
    * @type {string}
    * @memberof LocationsApiUpdateLocationById
    */
    readonly xCompanyGuid?: string
    
} & LocationsUpdateLocationByIdRequest

/**
 * LocationsApiGenerated - object-oriented interface
 * @export
 * @class LocationsApiGenerated
 * @extends {BaseAPI}
 */
export class LocationsApiGenerated extends BaseAPI {
    /**
     * 
     * @summary Create Location
     * @param {LocationsApiCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocationsApiGenerated
     */
    public create(requestParameters: LocationsApiCreateRequest, options?: AxiosRequestConfig) {
        return LocationsApiFp(this.configuration).create(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve Location
     * @param {LocationsApiGetLocationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocationsApiGenerated
     */
    public getLocation(requestParameters: LocationsApiGetLocationRequest, options?: AxiosRequestConfig) {
        return LocationsApiFp(this.configuration).getLocation(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List Locations
     * @param {LocationsApiListGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocationsApiGenerated
     */
    public listGet(requestParameters: LocationsApiListGetRequest, options?: AxiosRequestConfig) {
        return LocationsApiFp(this.configuration).listGet(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete Location
     * @param {LocationsApiRemoveLocationByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocationsApiGenerated
     */
    public removeLocationById(requestParameters: LocationsApiRemoveLocationByIdRequest, options?: AxiosRequestConfig) {
        return LocationsApiFp(this.configuration).removeLocationById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update Location
     * @param {LocationsApiUpdateLocationByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocationsApiGenerated
     */
    public updateLocationById(requestParameters: LocationsApiUpdateLocationByIdRequest, options?: AxiosRequestConfig) {
        return LocationsApiFp(this.configuration).updateLocationById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
