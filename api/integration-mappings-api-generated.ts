/* tslint:disable */
/* eslint-disable */
/*
7shifts API

7shifts is a team management software designed for restaurants. We help managers and operators spend less time and effort scheduling their staff, reduce their monthly labor costs and improve team communication. The result is simplified team management, one shift at a time.

7shifts also offers free mobile apps (iOS and Android) allowing managers and employees to have everything at their fingertips.

Start your free trial or request a demo at www.7shifts.com.

The version of the OpenAPI document: 2023-05-01
Contact: api-support@7shifts.com

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { IntegrationMappingsCreateSalesCategoryMappingsBulk400Response } from '../models';
// @ts-ignore
import { IntegrationMappingsCreateSalesCategoryMappingsBulk401Response } from '../models';
// @ts-ignore
import { IntegrationMappingsCreateSalesCategoryMappingsBulk403Response } from '../models';
// @ts-ignore
import { IntegrationMappingsCreateSalesCategoryMappingsBulk500Response } from '../models';
// @ts-ignore
import { IntegrationMappingsCreateSalesCategoryMappingsBulkRequestInner } from '../models';
// @ts-ignore
import { IntegrationMappingsCreateSalesCategoryMappingsBulkResponse } from '../models';
// @ts-ignore
import { IntegrationMappingsDeleteSalesCategoryMappings401Response } from '../models';
// @ts-ignore
import { IntegrationMappingsDeleteSalesCategoryMappings403Response } from '../models';
// @ts-ignore
import { IntegrationMappingsDeleteSalesCategoryMappings404Response } from '../models';
// @ts-ignore
import { IntegrationMappingsDeleteSalesCategoryMappings422Response } from '../models';
// @ts-ignore
import { IntegrationMappingsDeleteSalesCategoryMappings500Response } from '../models';
// @ts-ignore
import { IntegrationMappingsDeleteSalesCategoryMappingsResponse } from '../models';
// @ts-ignore
import { IntegrationMappingsListSalesCategoryMappings400Response } from '../models';
// @ts-ignore
import { IntegrationMappingsListSalesCategoryMappings401Response } from '../models';
// @ts-ignore
import { IntegrationMappingsListSalesCategoryMappings403Response } from '../models';
// @ts-ignore
import { IntegrationMappingsListSalesCategoryMappings500Response } from '../models';
// @ts-ignore
import { IntegrationMappingsListSalesCategoryMappingsResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * IntegrationMappingsApi - axios parameter creator
 * @export
 */
export const IntegrationMappingsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create Sales Category Mappings
         * @param {number} companyId Company ID
         * @param {number} locationId Location ID
         * @param {number} departmentId Department ID
         * @param {Array<IntegrationMappingsCreateSalesCategoryMappingsBulkRequestInner>} integrationMappingsCreateSalesCategoryMappingsBulkRequestInner 
         * @param {string} [xApiVersion] 7shifts API version
         * @param {string} [xCompanyGuid] Company GUID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSalesCategoryMappingsBulk: async (companyId: number, locationId: number, departmentId: number, integrationMappingsCreateSalesCategoryMappingsBulkRequestInner: Array<IntegrationMappingsCreateSalesCategoryMappingsBulkRequestInner>, xApiVersion?: string, xCompanyGuid?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('createSalesCategoryMappingsBulk', 'companyId', companyId)
            // verify required parameter 'locationId' is not null or undefined
            assertParamExists('createSalesCategoryMappingsBulk', 'locationId', locationId)
            // verify required parameter 'departmentId' is not null or undefined
            assertParamExists('createSalesCategoryMappingsBulk', 'departmentId', departmentId)
            // verify required parameter 'integrationMappingsCreateSalesCategoryMappingsBulkRequestInner' is not null or undefined
            assertParamExists('createSalesCategoryMappingsBulk', 'integrationMappingsCreateSalesCategoryMappingsBulkRequestInner', integrationMappingsCreateSalesCategoryMappingsBulkRequestInner)
            const localVarPath = `/v2/company/{company_id}/location/{location_id}/sales_category_mappings_bulk`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId !== undefined ? companyId : `-company_id-`)))
                .replace(`{${"location_id"}}`, encodeURIComponent(String(locationId !== undefined ? locationId : `-location_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication cookieAuth required
            await setApiKeyToObject({object: localVarHeaderParameter, type: "Cookie", key: "Cookie", keyParamName: "7session", configuration})
            if (departmentId !== undefined) {
                localVarQueryParameter['department_id'] = departmentId;
            }

            if (xApiVersion != null) {
                localVarHeaderParameter['x-api-version'] = String(xApiVersion);
            }

            if (xCompanyGuid != null) {
                localVarHeaderParameter['x-company-guid'] = String(xCompanyGuid);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: integrationMappingsCreateSalesCategoryMappingsBulkRequestInner,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/company/{company_id}/location/{location_id}/sales_category_mappings_bulk',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(integrationMappingsCreateSalesCategoryMappingsBulkRequestInner, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete Sales Category Mappings
         * @param {number} companyId Company ID
         * @param {number} locationId Location ID
         * @param {string} externalId External Category ID
         * @param {number} departmentId Department ID
         * @param {string} [xApiVersion] 7shifts API version
         * @param {string} [xCompanyGuid] Company GUID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSalesCategoryMappings: async (companyId: number, locationId: number, externalId: string, departmentId: number, xApiVersion?: string, xCompanyGuid?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('deleteSalesCategoryMappings', 'companyId', companyId)
            // verify required parameter 'locationId' is not null or undefined
            assertParamExists('deleteSalesCategoryMappings', 'locationId', locationId)
            // verify required parameter 'externalId' is not null or undefined
            assertParamExists('deleteSalesCategoryMappings', 'externalId', externalId)
            // verify required parameter 'departmentId' is not null or undefined
            assertParamExists('deleteSalesCategoryMappings', 'departmentId', departmentId)
            const localVarPath = `/v2/company/{company_id}/location/{location_id}/sales_category_mappings/{external_id}`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId !== undefined ? companyId : `-company_id-`)))
                .replace(`{${"location_id"}}`, encodeURIComponent(String(locationId !== undefined ? locationId : `-location_id-`)))
                .replace(`{${"external_id"}}`, encodeURIComponent(String(externalId !== undefined ? externalId : `-external_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication cookieAuth required
            await setApiKeyToObject({object: localVarHeaderParameter, type: "Cookie", key: "Cookie", keyParamName: "7session", configuration})
            if (departmentId !== undefined) {
                localVarQueryParameter['department_id'] = departmentId;
            }

            if (xApiVersion != null) {
                localVarHeaderParameter['x-api-version'] = String(xApiVersion);
            }

            if (xCompanyGuid != null) {
                localVarHeaderParameter['x-company-guid'] = String(xCompanyGuid);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/company/{company_id}/location/{location_id}/sales_category_mappings/{external_id}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List Sales Category Mappings
         * @param {number} companyId Company ID
         * @param {number} locationId Location ID
         * @param {number} departmentId Department ID
         * @param {string} [xApiVersion] 7shifts API version
         * @param {string} [xCompanyGuid] Company GUID
         * @param {string} [cursor] Cursor for the next or previous page of results.
         * @param {number} [limit] The number of results desired per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSalesCategoryMappings: async (companyId: number, locationId: number, departmentId: number, xApiVersion?: string, xCompanyGuid?: string, cursor?: string, limit?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('listSalesCategoryMappings', 'companyId', companyId)
            // verify required parameter 'locationId' is not null or undefined
            assertParamExists('listSalesCategoryMappings', 'locationId', locationId)
            // verify required parameter 'departmentId' is not null or undefined
            assertParamExists('listSalesCategoryMappings', 'departmentId', departmentId)
            const localVarPath = `/v2/company/{company_id}/location/{location_id}/sales_category_mappings`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId !== undefined ? companyId : `-company_id-`)))
                .replace(`{${"location_id"}}`, encodeURIComponent(String(locationId !== undefined ? locationId : `-location_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication cookieAuth required
            await setApiKeyToObject({object: localVarHeaderParameter, type: "Cookie", key: "Cookie", keyParamName: "7session", configuration})
            if (departmentId !== undefined) {
                localVarQueryParameter['department_id'] = departmentId;
            }

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (xApiVersion != null) {
                localVarHeaderParameter['x-api-version'] = String(xApiVersion);
            }

            if (xCompanyGuid != null) {
                localVarHeaderParameter['x-company-guid'] = String(xCompanyGuid);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/company/{company_id}/location/{location_id}/sales_category_mappings',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * IntegrationMappingsApi - functional programming interface
 * @export
 */
export const IntegrationMappingsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = IntegrationMappingsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create Sales Category Mappings
         * @param {IntegrationMappingsApiCreateSalesCategoryMappingsBulkRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createSalesCategoryMappingsBulk(requestParameters: IntegrationMappingsApiCreateSalesCategoryMappingsBulkRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IntegrationMappingsCreateSalesCategoryMappingsBulkResponse>> {
            const integrationMappingsCreateSalesCategoryMappingsBulkRequestInner: Array<IntegrationMappingsCreateSalesCategoryMappingsBulkRequestInner> = requestParameters.requestBody;
            const localVarAxiosArgs = await localVarAxiosParamCreator.createSalesCategoryMappingsBulk(requestParameters.companyId, requestParameters.locationId, requestParameters.departmentId, integrationMappingsCreateSalesCategoryMappingsBulkRequestInner, requestParameters.xApiVersion, requestParameters.xCompanyGuid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete Sales Category Mappings
         * @param {IntegrationMappingsApiDeleteSalesCategoryMappingsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteSalesCategoryMappings(requestParameters: IntegrationMappingsApiDeleteSalesCategoryMappingsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteSalesCategoryMappings(requestParameters.companyId, requestParameters.locationId, requestParameters.externalId, requestParameters.departmentId, requestParameters.xApiVersion, requestParameters.xCompanyGuid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary List Sales Category Mappings
         * @param {IntegrationMappingsApiListSalesCategoryMappingsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listSalesCategoryMappings(requestParameters: IntegrationMappingsApiListSalesCategoryMappingsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IntegrationMappingsListSalesCategoryMappingsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listSalesCategoryMappings(requestParameters.companyId, requestParameters.locationId, requestParameters.departmentId, requestParameters.xApiVersion, requestParameters.xCompanyGuid, requestParameters.cursor, requestParameters.limit, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * IntegrationMappingsApi - factory interface
 * @export
 */
export const IntegrationMappingsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = IntegrationMappingsApiFp(configuration)
    return {
        /**
         * 
         * @summary Create Sales Category Mappings
         * @param {IntegrationMappingsApiCreateSalesCategoryMappingsBulkRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSalesCategoryMappingsBulk(requestParameters: IntegrationMappingsApiCreateSalesCategoryMappingsBulkRequest, options?: AxiosRequestConfig): AxiosPromise<IntegrationMappingsCreateSalesCategoryMappingsBulkResponse> {
            return localVarFp.createSalesCategoryMappingsBulk(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete Sales Category Mappings
         * @param {IntegrationMappingsApiDeleteSalesCategoryMappingsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSalesCategoryMappings(requestParameters: IntegrationMappingsApiDeleteSalesCategoryMappingsRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteSalesCategoryMappings(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List Sales Category Mappings
         * @param {IntegrationMappingsApiListSalesCategoryMappingsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSalesCategoryMappings(requestParameters: IntegrationMappingsApiListSalesCategoryMappingsRequest, options?: AxiosRequestConfig): AxiosPromise<IntegrationMappingsListSalesCategoryMappingsResponse> {
            return localVarFp.listSalesCategoryMappings(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createSalesCategoryMappingsBulk operation in IntegrationMappingsApi.
 * @export
 * @interface IntegrationMappingsApiCreateSalesCategoryMappingsBulkRequest
 */
export type IntegrationMappingsApiCreateSalesCategoryMappingsBulkRequest = {
    /**
    * Company ID
    * @type {number}
    * @memberof IntegrationMappingsApiCreateSalesCategoryMappingsBulk
    */
    readonly companyId: number
    /**
    * Location ID
    * @type {number}
    * @memberof IntegrationMappingsApiCreateSalesCategoryMappingsBulk
    */
    readonly locationId: number
    /**
    * Department ID
    * @type {number}
    * @memberof IntegrationMappingsApiCreateSalesCategoryMappingsBulk
    */
    readonly departmentId: number
    /**
    * 
    * @type {Array<IntegrationMappingsCreateSalesCategoryMappingsBulkRequestInner>}
    * @memberof IntegrationMappingsApiCreateSalesCategoryMappingsBulk
    */
    readonly requestBody: Array<IntegrationMappingsCreateSalesCategoryMappingsBulkRequestInner>
    /**
    * 7shifts API version
    * @type {string}
    * @memberof IntegrationMappingsApiCreateSalesCategoryMappingsBulk
    */
    readonly xApiVersion?: string
    /**
    * Company GUID
    * @type {string}
    * @memberof IntegrationMappingsApiCreateSalesCategoryMappingsBulk
    */
    readonly xCompanyGuid?: string
}

/**
 * Request parameters for deleteSalesCategoryMappings operation in IntegrationMappingsApi.
 * @export
 * @interface IntegrationMappingsApiDeleteSalesCategoryMappingsRequest
 */
export type IntegrationMappingsApiDeleteSalesCategoryMappingsRequest = {
    
    /**
    * Company ID
    * @type {number}
    * @memberof IntegrationMappingsApiDeleteSalesCategoryMappings
    */
    readonly companyId: number
    
    /**
    * Location ID
    * @type {number}
    * @memberof IntegrationMappingsApiDeleteSalesCategoryMappings
    */
    readonly locationId: number
    
    /**
    * External Category ID
    * @type {string}
    * @memberof IntegrationMappingsApiDeleteSalesCategoryMappings
    */
    readonly externalId: string
    
    /**
    * Department ID
    * @type {number}
    * @memberof IntegrationMappingsApiDeleteSalesCategoryMappings
    */
    readonly departmentId: number
    
    /**
    * 7shifts API version
    * @type {string}
    * @memberof IntegrationMappingsApiDeleteSalesCategoryMappings
    */
    readonly xApiVersion?: string
    
    /**
    * Company GUID
    * @type {string}
    * @memberof IntegrationMappingsApiDeleteSalesCategoryMappings
    */
    readonly xCompanyGuid?: string
    
}

/**
 * Request parameters for listSalesCategoryMappings operation in IntegrationMappingsApi.
 * @export
 * @interface IntegrationMappingsApiListSalesCategoryMappingsRequest
 */
export type IntegrationMappingsApiListSalesCategoryMappingsRequest = {
    
    /**
    * Company ID
    * @type {number}
    * @memberof IntegrationMappingsApiListSalesCategoryMappings
    */
    readonly companyId: number
    
    /**
    * Location ID
    * @type {number}
    * @memberof IntegrationMappingsApiListSalesCategoryMappings
    */
    readonly locationId: number
    
    /**
    * Department ID
    * @type {number}
    * @memberof IntegrationMappingsApiListSalesCategoryMappings
    */
    readonly departmentId: number
    
    /**
    * 7shifts API version
    * @type {string}
    * @memberof IntegrationMappingsApiListSalesCategoryMappings
    */
    readonly xApiVersion?: string
    
    /**
    * Company GUID
    * @type {string}
    * @memberof IntegrationMappingsApiListSalesCategoryMappings
    */
    readonly xCompanyGuid?: string
    
    /**
    * Cursor for the next or previous page of results.
    * @type {string}
    * @memberof IntegrationMappingsApiListSalesCategoryMappings
    */
    readonly cursor?: string
    
    /**
    * The number of results desired per page.
    * @type {number}
    * @memberof IntegrationMappingsApiListSalesCategoryMappings
    */
    readonly limit?: number
    
}

/**
 * IntegrationMappingsApiGenerated - object-oriented interface
 * @export
 * @class IntegrationMappingsApiGenerated
 * @extends {BaseAPI}
 */
export class IntegrationMappingsApiGenerated extends BaseAPI {
    /**
     * 
     * @summary Create Sales Category Mappings
     * @param {IntegrationMappingsApiCreateSalesCategoryMappingsBulkRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IntegrationMappingsApiGenerated
     */
    public createSalesCategoryMappingsBulk(requestParameters: IntegrationMappingsApiCreateSalesCategoryMappingsBulkRequest, options?: AxiosRequestConfig) {
        return IntegrationMappingsApiFp(this.configuration).createSalesCategoryMappingsBulk(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete Sales Category Mappings
     * @param {IntegrationMappingsApiDeleteSalesCategoryMappingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IntegrationMappingsApiGenerated
     */
    public deleteSalesCategoryMappings(requestParameters: IntegrationMappingsApiDeleteSalesCategoryMappingsRequest, options?: AxiosRequestConfig) {
        return IntegrationMappingsApiFp(this.configuration).deleteSalesCategoryMappings(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List Sales Category Mappings
     * @param {IntegrationMappingsApiListSalesCategoryMappingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IntegrationMappingsApiGenerated
     */
    public listSalesCategoryMappings(requestParameters: IntegrationMappingsApiListSalesCategoryMappingsRequest, options?: AxiosRequestConfig) {
        return IntegrationMappingsApiFp(this.configuration).listSalesCategoryMappings(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
