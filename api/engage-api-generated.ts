/* tslint:disable */
/* eslint-disable */
/*
7shifts API

7shifts is a team management software designed for restaurants. We help managers and operators spend less time and effort scheduling their staff, reduce their monthly labor costs and improve team communication. The result is simplified team management, one shift at a time.

7shifts also offers free mobile apps (iOS and Android) allowing managers and employees to have everything at their fingertips.

Start your free trial or request a demo at www.7shifts.com.

The version of the OpenAPI document: 2023-05-01
Contact: api-support@7shifts.com

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { EngageOverviewByLocationId400Response } from '../models';
// @ts-ignore
import { EngageOverviewByLocationId401Response } from '../models';
// @ts-ignore
import { EngageOverviewByLocationId403Response } from '../models';
// @ts-ignore
import { EngageOverviewByLocationId500Response } from '../models';
// @ts-ignore
import { EngageOverviewByLocationIdResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * EngageApi - axios parameter creator
 * @export
 */
export const EngageApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Retrieve Engagement Overview
         * @param {number} companyId Company ID
         * @param {number} locationId Location ID
         * @param {string} date A date with YYYY-MM-DD format
         * @param {string} [xApiVersion] 7shifts API version
         * @param {string} [xCompanyGuid] Company GUID
         * @param {'week' | 'month'} [frequency] Length of the engage data set
         * @param {'employees' | 'managers' | 'assistant_managers'} [userType] select user type for engage data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        overviewByLocationId: async (companyId: number, locationId: number, date: string, xApiVersion?: string, xCompanyGuid?: string, frequency?: 'week' | 'month', userType?: 'employees' | 'managers' | 'assistant_managers', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('overviewByLocationId', 'companyId', companyId)
            // verify required parameter 'locationId' is not null or undefined
            assertParamExists('overviewByLocationId', 'locationId', locationId)
            // verify required parameter 'date' is not null or undefined
            assertParamExists('overviewByLocationId', 'date', date)
            const localVarPath = `/v2/company/{company_id}/locations/{location_id}/engage_overview`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId !== undefined ? companyId : `-company_id-`)))
                .replace(`{${"location_id"}}`, encodeURIComponent(String(locationId !== undefined ? locationId : `-location_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication cookieAuth required
            await setApiKeyToObject({object: localVarHeaderParameter, type: "Cookie", key: "Cookie", keyParamName: "7session", configuration})
            if (date !== undefined) {
                localVarQueryParameter['date'] = date;
            }

            if (frequency !== undefined) {
                localVarQueryParameter['frequency'] = frequency;
            }

            if (userType !== undefined) {
                localVarQueryParameter['user_type'] = userType;
            }

            if (xApiVersion != null) {
                localVarHeaderParameter['x-api-version'] = String(xApiVersion);
            }

            if (xCompanyGuid != null) {
                localVarHeaderParameter['x-company-guid'] = String(xCompanyGuid);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/company/{company_id}/locations/{location_id}/engage_overview',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EngageApi - functional programming interface
 * @export
 */
export const EngageApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = EngageApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Retrieve Engagement Overview
         * @param {EngageApiOverviewByLocationIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async overviewByLocationId(requestParameters: EngageApiOverviewByLocationIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EngageOverviewByLocationIdResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.overviewByLocationId(requestParameters.companyId, requestParameters.locationId, requestParameters.date, requestParameters.xApiVersion, requestParameters.xCompanyGuid, requestParameters.frequency, requestParameters.userType, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * EngageApi - factory interface
 * @export
 */
export const EngageApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = EngageApiFp(configuration)
    return {
        /**
         * 
         * @summary Retrieve Engagement Overview
         * @param {EngageApiOverviewByLocationIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        overviewByLocationId(requestParameters: EngageApiOverviewByLocationIdRequest, options?: AxiosRequestConfig): AxiosPromise<EngageOverviewByLocationIdResponse> {
            return localVarFp.overviewByLocationId(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for overviewByLocationId operation in EngageApi.
 * @export
 * @interface EngageApiOverviewByLocationIdRequest
 */
export type EngageApiOverviewByLocationIdRequest = {
    
    /**
    * Company ID
    * @type {number}
    * @memberof EngageApiOverviewByLocationId
    */
    readonly companyId: number
    
    /**
    * Location ID
    * @type {number}
    * @memberof EngageApiOverviewByLocationId
    */
    readonly locationId: number
    
    /**
    * A date with YYYY-MM-DD format
    * @type {string}
    * @memberof EngageApiOverviewByLocationId
    */
    readonly date: string
    
    /**
    * 7shifts API version
    * @type {string}
    * @memberof EngageApiOverviewByLocationId
    */
    readonly xApiVersion?: string
    
    /**
    * Company GUID
    * @type {string}
    * @memberof EngageApiOverviewByLocationId
    */
    readonly xCompanyGuid?: string
    
    /**
    * Length of the engage data set
    * @type {'week' | 'month'}
    * @memberof EngageApiOverviewByLocationId
    */
    readonly frequency?: 'week' | 'month'
    
    /**
    * select user type for engage data
    * @type {'employees' | 'managers' | 'assistant_managers'}
    * @memberof EngageApiOverviewByLocationId
    */
    readonly userType?: 'employees' | 'managers' | 'assistant_managers'
    
}

/**
 * EngageApiGenerated - object-oriented interface
 * @export
 * @class EngageApiGenerated
 * @extends {BaseAPI}
 */
export class EngageApiGenerated extends BaseAPI {
    /**
     * 
     * @summary Retrieve Engagement Overview
     * @param {EngageApiOverviewByLocationIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EngageApiGenerated
     */
    public overviewByLocationId(requestParameters: EngageApiOverviewByLocationIdRequest, options?: AxiosRequestConfig) {
        return EngageApiFp(this.configuration).overviewByLocationId(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
