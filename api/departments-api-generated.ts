/* tslint:disable */
/* eslint-disable */
/*
7shifts API

7shifts is a team management software designed for restaurants. We help managers and operators spend less time and effort scheduling their staff, reduce their monthly labor costs and improve team communication. The result is simplified team management, one shift at a time.

7shifts also offers free mobile apps (iOS and Android) allowing managers and employees to have everything at their fingertips.

Start your free trial or request a demo at www.7shifts.com.

The version of the OpenAPI document: 2023-05-01
Contact: api-support@7shifts.com

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { DepartmentsCreateNewDepartment403Response } from '../models';
// @ts-ignore
import { DepartmentsCreateNewDepartment422Response } from '../models';
// @ts-ignore
import { DepartmentsCreateNewDepartment500Response } from '../models';
// @ts-ignore
import { DepartmentsCreateNewDepartmentRequest } from '../models';
// @ts-ignore
import { DepartmentsCreateNewDepartmentResponse } from '../models';
// @ts-ignore
import { DepartmentsDeleteById404Response } from '../models';
// @ts-ignore
import { DepartmentsDeleteById500Response } from '../models';
// @ts-ignore
import { DepartmentsDeleteByIdResponse } from '../models';
// @ts-ignore
import { DepartmentsGetDepartment403Response } from '../models';
// @ts-ignore
import { DepartmentsGetDepartment404Response } from '../models';
// @ts-ignore
import { DepartmentsGetDepartment500Response } from '../models';
// @ts-ignore
import { DepartmentsGetDepartmentResponse } from '../models';
// @ts-ignore
import { DepartmentsList400Response } from '../models';
// @ts-ignore
import { DepartmentsList403Response } from '../models';
// @ts-ignore
import { DepartmentsList500Response } from '../models';
// @ts-ignore
import { DepartmentsListResponse } from '../models';
// @ts-ignore
import { DepartmentsUpdateDepartment403Response } from '../models';
// @ts-ignore
import { DepartmentsUpdateDepartment404Response } from '../models';
// @ts-ignore
import { DepartmentsUpdateDepartment500Response } from '../models';
// @ts-ignore
import { DepartmentsUpdateDepartmentRequest } from '../models';
// @ts-ignore
import { DepartmentsUpdateDepartmentResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * DepartmentsApi - axios parameter creator
 * @export
 */
export const DepartmentsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create Department
         * @param {number} companyId Company ID
         * @param {DepartmentsCreateNewDepartmentRequest} departmentsCreateNewDepartmentRequest 
         * @param {string} [xApiVersion] 7shifts API version
         * @param {string} [xCompanyGuid] Company GUID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewDepartment: async (companyId: number, departmentsCreateNewDepartmentRequest: DepartmentsCreateNewDepartmentRequest, xApiVersion?: string, xCompanyGuid?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('createNewDepartment', 'companyId', companyId)
            // verify required parameter 'departmentsCreateNewDepartmentRequest' is not null or undefined
            assertParamExists('createNewDepartment', 'departmentsCreateNewDepartmentRequest', departmentsCreateNewDepartmentRequest)
            const localVarPath = `/v2/company/{company_id}/departments`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId !== undefined ? companyId : `-company_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication cookieAuth required
            await setApiKeyToObject({object: localVarHeaderParameter, type: "Cookie", key: "Cookie", keyParamName: "7session", configuration})
            if (xApiVersion != null) {
                localVarHeaderParameter['x-api-version'] = String(xApiVersion);
            }

            if (xCompanyGuid != null) {
                localVarHeaderParameter['x-company-guid'] = String(xCompanyGuid);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: departmentsCreateNewDepartmentRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/company/{company_id}/departments',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(departmentsCreateNewDepartmentRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete Department
         * @param {number} companyId Company ID
         * @param {number} departmentId Department ID
         * @param {string} [xApiVersion] 7shifts API version
         * @param {string} [xCompanyGuid] Company GUID
         * @param {number} [transferTo] Department ID to move roles and shifts to
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteById: async (companyId: number, departmentId: number, xApiVersion?: string, xCompanyGuid?: string, transferTo?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('deleteById', 'companyId', companyId)
            // verify required parameter 'departmentId' is not null or undefined
            assertParamExists('deleteById', 'departmentId', departmentId)
            const localVarPath = `/v2/company/{company_id}/departments/{department_id}`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId !== undefined ? companyId : `-company_id-`)))
                .replace(`{${"department_id"}}`, encodeURIComponent(String(departmentId !== undefined ? departmentId : `-department_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication cookieAuth required
            await setApiKeyToObject({object: localVarHeaderParameter, type: "Cookie", key: "Cookie", keyParamName: "7session", configuration})
            if (transferTo !== undefined) {
                localVarQueryParameter['transfer_to'] = transferTo;
            }

            if (xApiVersion != null) {
                localVarHeaderParameter['x-api-version'] = String(xApiVersion);
            }

            if (xCompanyGuid != null) {
                localVarHeaderParameter['x-company-guid'] = String(xCompanyGuid);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/company/{company_id}/departments/{department_id}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve Department
         * @param {number} companyId Company ID
         * @param {number} departmentId Department ID
         * @param {string} [xApiVersion] 7shifts API version
         * @param {string} [xCompanyGuid] Company GUID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDepartment: async (companyId: number, departmentId: number, xApiVersion?: string, xCompanyGuid?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('getDepartment', 'companyId', companyId)
            // verify required parameter 'departmentId' is not null or undefined
            assertParamExists('getDepartment', 'departmentId', departmentId)
            const localVarPath = `/v2/company/{company_id}/departments/{department_id}`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId !== undefined ? companyId : `-company_id-`)))
                .replace(`{${"department_id"}}`, encodeURIComponent(String(departmentId !== undefined ? departmentId : `-department_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication cookieAuth required
            await setApiKeyToObject({object: localVarHeaderParameter, type: "Cookie", key: "Cookie", keyParamName: "7session", configuration})
            if (xApiVersion != null) {
                localVarHeaderParameter['x-api-version'] = String(xApiVersion);
            }

            if (xCompanyGuid != null) {
                localVarHeaderParameter['x-company-guid'] = String(xCompanyGuid);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/company/{company_id}/departments/{department_id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List Departments
         * @param {number} companyId Company ID
         * @param {string} [xApiVersion] 7shifts API version
         * @param {string} [xCompanyGuid] Company GUID
         * @param {string} [modifiedSince] Return departments that have been modified since the specified date. Format YYYY-MM-DD
         * @param {string} [cursor] Cursor for the next or previous page of results.
         * @param {number} [limit] The number of results desired per page.
         * @param {number} [locationId] Return departments that match the provided location ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list: async (companyId: number, xApiVersion?: string, xCompanyGuid?: string, modifiedSince?: string, cursor?: string, limit?: number, locationId?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('list', 'companyId', companyId)
            const localVarPath = `/v2/company/{company_id}/departments`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId !== undefined ? companyId : `-company_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication cookieAuth required
            await setApiKeyToObject({object: localVarHeaderParameter, type: "Cookie", key: "Cookie", keyParamName: "7session", configuration})
            if (modifiedSince !== undefined) {
                localVarQueryParameter['modified_since'] = modifiedSince;
            }

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (locationId !== undefined) {
                localVarQueryParameter['location_id'] = locationId;
            }

            if (xApiVersion != null) {
                localVarHeaderParameter['x-api-version'] = String(xApiVersion);
            }

            if (xCompanyGuid != null) {
                localVarHeaderParameter['x-company-guid'] = String(xCompanyGuid);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/company/{company_id}/departments',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update Department
         * @param {number} companyId Company ID
         * @param {number} departmentId Department ID
         * @param {DepartmentsUpdateDepartmentRequest} departmentsUpdateDepartmentRequest 
         * @param {string} [xApiVersion] 7shifts API version
         * @param {string} [xCompanyGuid] Company GUID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDepartment: async (companyId: number, departmentId: number, departmentsUpdateDepartmentRequest: DepartmentsUpdateDepartmentRequest, xApiVersion?: string, xCompanyGuid?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('updateDepartment', 'companyId', companyId)
            // verify required parameter 'departmentId' is not null or undefined
            assertParamExists('updateDepartment', 'departmentId', departmentId)
            // verify required parameter 'departmentsUpdateDepartmentRequest' is not null or undefined
            assertParamExists('updateDepartment', 'departmentsUpdateDepartmentRequest', departmentsUpdateDepartmentRequest)
            const localVarPath = `/v2/company/{company_id}/departments/{department_id}`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId !== undefined ? companyId : `-company_id-`)))
                .replace(`{${"department_id"}}`, encodeURIComponent(String(departmentId !== undefined ? departmentId : `-department_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication cookieAuth required
            await setApiKeyToObject({object: localVarHeaderParameter, type: "Cookie", key: "Cookie", keyParamName: "7session", configuration})
            if (xApiVersion != null) {
                localVarHeaderParameter['x-api-version'] = String(xApiVersion);
            }

            if (xCompanyGuid != null) {
                localVarHeaderParameter['x-company-guid'] = String(xCompanyGuid);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: departmentsUpdateDepartmentRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/company/{company_id}/departments/{department_id}',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(departmentsUpdateDepartmentRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DepartmentsApi - functional programming interface
 * @export
 */
export const DepartmentsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DepartmentsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create Department
         * @param {DepartmentsApiCreateNewDepartmentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createNewDepartment(requestParameters: DepartmentsApiCreateNewDepartmentRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DepartmentsCreateNewDepartmentResponse>> {
            const departmentsCreateNewDepartmentRequest: DepartmentsCreateNewDepartmentRequest = {
                location_id: requestParameters.location_id,
                name: requestParameters.name,
                default: requestParameters.default
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createNewDepartment(requestParameters.companyId, departmentsCreateNewDepartmentRequest, requestParameters.xApiVersion, requestParameters.xCompanyGuid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete Department
         * @param {DepartmentsApiDeleteByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteById(requestParameters: DepartmentsApiDeleteByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteById(requestParameters.companyId, requestParameters.departmentId, requestParameters.xApiVersion, requestParameters.xCompanyGuid, requestParameters.transferTo, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Retrieve Department
         * @param {DepartmentsApiGetDepartmentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDepartment(requestParameters: DepartmentsApiGetDepartmentRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DepartmentsGetDepartmentResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDepartment(requestParameters.companyId, requestParameters.departmentId, requestParameters.xApiVersion, requestParameters.xCompanyGuid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary List Departments
         * @param {DepartmentsApiListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async list(requestParameters: DepartmentsApiListRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DepartmentsListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.list(requestParameters.companyId, requestParameters.xApiVersion, requestParameters.xCompanyGuid, requestParameters.modifiedSince, requestParameters.cursor, requestParameters.limit, requestParameters.locationId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update Department
         * @param {DepartmentsApiUpdateDepartmentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateDepartment(requestParameters: DepartmentsApiUpdateDepartmentRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DepartmentsUpdateDepartmentResponse>> {
            const departmentsUpdateDepartmentRequest: DepartmentsUpdateDepartmentRequest = {
                name: requestParameters.name,
                default: requestParameters.default
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateDepartment(requestParameters.companyId, requestParameters.departmentId, departmentsUpdateDepartmentRequest, requestParameters.xApiVersion, requestParameters.xCompanyGuid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DepartmentsApi - factory interface
 * @export
 */
export const DepartmentsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DepartmentsApiFp(configuration)
    return {
        /**
         * 
         * @summary Create Department
         * @param {DepartmentsApiCreateNewDepartmentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewDepartment(requestParameters: DepartmentsApiCreateNewDepartmentRequest, options?: AxiosRequestConfig): AxiosPromise<DepartmentsCreateNewDepartmentResponse> {
            return localVarFp.createNewDepartment(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete Department
         * @param {DepartmentsApiDeleteByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteById(requestParameters: DepartmentsApiDeleteByIdRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve Department
         * @param {DepartmentsApiGetDepartmentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDepartment(requestParameters: DepartmentsApiGetDepartmentRequest, options?: AxiosRequestConfig): AxiosPromise<DepartmentsGetDepartmentResponse> {
            return localVarFp.getDepartment(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List Departments
         * @param {DepartmentsApiListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list(requestParameters: DepartmentsApiListRequest, options?: AxiosRequestConfig): AxiosPromise<DepartmentsListResponse> {
            return localVarFp.list(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update Department
         * @param {DepartmentsApiUpdateDepartmentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDepartment(requestParameters: DepartmentsApiUpdateDepartmentRequest, options?: AxiosRequestConfig): AxiosPromise<DepartmentsUpdateDepartmentResponse> {
            return localVarFp.updateDepartment(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createNewDepartment operation in DepartmentsApi.
 * @export
 * @interface DepartmentsApiCreateNewDepartmentRequest
 */
export type DepartmentsApiCreateNewDepartmentRequest = {
    
    /**
    * Company ID
    * @type {number}
    * @memberof DepartmentsApiCreateNewDepartment
    */
    readonly companyId: number
    
    /**
    * 7shifts API version
    * @type {string}
    * @memberof DepartmentsApiCreateNewDepartment
    */
    readonly xApiVersion?: string
    
    /**
    * Company GUID
    * @type {string}
    * @memberof DepartmentsApiCreateNewDepartment
    */
    readonly xCompanyGuid?: string
    
} & DepartmentsCreateNewDepartmentRequest

/**
 * Request parameters for deleteById operation in DepartmentsApi.
 * @export
 * @interface DepartmentsApiDeleteByIdRequest
 */
export type DepartmentsApiDeleteByIdRequest = {
    
    /**
    * Company ID
    * @type {number}
    * @memberof DepartmentsApiDeleteById
    */
    readonly companyId: number
    
    /**
    * Department ID
    * @type {number}
    * @memberof DepartmentsApiDeleteById
    */
    readonly departmentId: number
    
    /**
    * 7shifts API version
    * @type {string}
    * @memberof DepartmentsApiDeleteById
    */
    readonly xApiVersion?: string
    
    /**
    * Company GUID
    * @type {string}
    * @memberof DepartmentsApiDeleteById
    */
    readonly xCompanyGuid?: string
    
    /**
    * Department ID to move roles and shifts to
    * @type {number}
    * @memberof DepartmentsApiDeleteById
    */
    readonly transferTo?: number
    
}

/**
 * Request parameters for getDepartment operation in DepartmentsApi.
 * @export
 * @interface DepartmentsApiGetDepartmentRequest
 */
export type DepartmentsApiGetDepartmentRequest = {
    
    /**
    * Company ID
    * @type {number}
    * @memberof DepartmentsApiGetDepartment
    */
    readonly companyId: number
    
    /**
    * Department ID
    * @type {number}
    * @memberof DepartmentsApiGetDepartment
    */
    readonly departmentId: number
    
    /**
    * 7shifts API version
    * @type {string}
    * @memberof DepartmentsApiGetDepartment
    */
    readonly xApiVersion?: string
    
    /**
    * Company GUID
    * @type {string}
    * @memberof DepartmentsApiGetDepartment
    */
    readonly xCompanyGuid?: string
    
}

/**
 * Request parameters for list operation in DepartmentsApi.
 * @export
 * @interface DepartmentsApiListRequest
 */
export type DepartmentsApiListRequest = {
    
    /**
    * Company ID
    * @type {number}
    * @memberof DepartmentsApiList
    */
    readonly companyId: number
    
    /**
    * 7shifts API version
    * @type {string}
    * @memberof DepartmentsApiList
    */
    readonly xApiVersion?: string
    
    /**
    * Company GUID
    * @type {string}
    * @memberof DepartmentsApiList
    */
    readonly xCompanyGuid?: string
    
    /**
    * Return departments that have been modified since the specified date. Format YYYY-MM-DD
    * @type {string}
    * @memberof DepartmentsApiList
    */
    readonly modifiedSince?: string
    
    /**
    * Cursor for the next or previous page of results.
    * @type {string}
    * @memberof DepartmentsApiList
    */
    readonly cursor?: string
    
    /**
    * The number of results desired per page.
    * @type {number}
    * @memberof DepartmentsApiList
    */
    readonly limit?: number
    
    /**
    * Return departments that match the provided location ID
    * @type {number}
    * @memberof DepartmentsApiList
    */
    readonly locationId?: number
    
}

/**
 * Request parameters for updateDepartment operation in DepartmentsApi.
 * @export
 * @interface DepartmentsApiUpdateDepartmentRequest
 */
export type DepartmentsApiUpdateDepartmentRequest = {
    
    /**
    * Company ID
    * @type {number}
    * @memberof DepartmentsApiUpdateDepartment
    */
    readonly companyId: number
    
    /**
    * Department ID
    * @type {number}
    * @memberof DepartmentsApiUpdateDepartment
    */
    readonly departmentId: number
    
    /**
    * 7shifts API version
    * @type {string}
    * @memberof DepartmentsApiUpdateDepartment
    */
    readonly xApiVersion?: string
    
    /**
    * Company GUID
    * @type {string}
    * @memberof DepartmentsApiUpdateDepartment
    */
    readonly xCompanyGuid?: string
    
} & DepartmentsUpdateDepartmentRequest

/**
 * DepartmentsApiGenerated - object-oriented interface
 * @export
 * @class DepartmentsApiGenerated
 * @extends {BaseAPI}
 */
export class DepartmentsApiGenerated extends BaseAPI {
    /**
     * 
     * @summary Create Department
     * @param {DepartmentsApiCreateNewDepartmentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DepartmentsApiGenerated
     */
    public createNewDepartment(requestParameters: DepartmentsApiCreateNewDepartmentRequest, options?: AxiosRequestConfig) {
        return DepartmentsApiFp(this.configuration).createNewDepartment(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete Department
     * @param {DepartmentsApiDeleteByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DepartmentsApiGenerated
     */
    public deleteById(requestParameters: DepartmentsApiDeleteByIdRequest, options?: AxiosRequestConfig) {
        return DepartmentsApiFp(this.configuration).deleteById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve Department
     * @param {DepartmentsApiGetDepartmentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DepartmentsApiGenerated
     */
    public getDepartment(requestParameters: DepartmentsApiGetDepartmentRequest, options?: AxiosRequestConfig) {
        return DepartmentsApiFp(this.configuration).getDepartment(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List Departments
     * @param {DepartmentsApiListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DepartmentsApiGenerated
     */
    public list(requestParameters: DepartmentsApiListRequest, options?: AxiosRequestConfig) {
        return DepartmentsApiFp(this.configuration).list(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update Department
     * @param {DepartmentsApiUpdateDepartmentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DepartmentsApiGenerated
     */
    public updateDepartment(requestParameters: DepartmentsApiUpdateDepartmentRequest, options?: AxiosRequestConfig) {
        return DepartmentsApiFp(this.configuration).updateDepartment(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
