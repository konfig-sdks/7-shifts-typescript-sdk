/* tslint:disable */
/* eslint-disable */
/*
7shifts API

7shifts is a team management software designed for restaurants. We help managers and operators spend less time and effort scheduling their staff, reduce their monthly labor costs and improve team communication. The result is simplified team management, one shift at a time.

7shifts also offers free mobile apps (iOS and Android) allowing managers and employees to have everything at their fingertips.

Start your free trial or request a demo at www.7shifts.com.

The version of the OpenAPI document: 2023-05-01
Contact: api-support@7shifts.com

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ReceiptsCreateReceipt400Response } from '../models';
// @ts-ignore
import { ReceiptsCreateReceipt403Response } from '../models';
// @ts-ignore
import { ReceiptsCreateReceipt500Response } from '../models';
// @ts-ignore
import { ReceiptsCreateReceiptRequest } from '../models';
// @ts-ignore
import { ReceiptsCreateReceiptRequestAllOfReceiptLines } from '../models';
// @ts-ignore
import { ReceiptsCreateReceiptRequestAllOfTipDetails } from '../models';
// @ts-ignore
import { ReceiptsCreateReceiptResponse } from '../models';
// @ts-ignore
import { ReceiptsGetReceipt400Response } from '../models';
// @ts-ignore
import { ReceiptsGetReceipt403Response } from '../models';
// @ts-ignore
import { ReceiptsGetReceipt404Response } from '../models';
// @ts-ignore
import { ReceiptsGetReceipt422Response } from '../models';
// @ts-ignore
import { ReceiptsGetReceipt500Response } from '../models';
// @ts-ignore
import { ReceiptsGetReceiptResponse } from '../models';
// @ts-ignore
import { ReceiptsGetSummary400Response } from '../models';
// @ts-ignore
import { ReceiptsGetSummary401Response } from '../models';
// @ts-ignore
import { ReceiptsGetSummary403Response } from '../models';
// @ts-ignore
import { ReceiptsGetSummary422Response } from '../models';
// @ts-ignore
import { ReceiptsGetSummary500Response } from '../models';
// @ts-ignore
import { ReceiptsGetSummaryResponse } from '../models';
// @ts-ignore
import { ReceiptsList400Response } from '../models';
// @ts-ignore
import { ReceiptsList401Response } from '../models';
// @ts-ignore
import { ReceiptsList403Response } from '../models';
// @ts-ignore
import { ReceiptsList404Response } from '../models';
// @ts-ignore
import { ReceiptsList422Response } from '../models';
// @ts-ignore
import { ReceiptsList500Response } from '../models';
// @ts-ignore
import { ReceiptsListResponse } from '../models';
// @ts-ignore
import { ReceiptsUpdateReceipt400Response } from '../models';
// @ts-ignore
import { ReceiptsUpdateReceipt403Response } from '../models';
// @ts-ignore
import { ReceiptsUpdateReceipt500Response } from '../models';
// @ts-ignore
import { ReceiptsUpdateReceiptRequest } from '../models';
// @ts-ignore
import { ReceiptsUpdateReceiptRequestReceiptLinesInner } from '../models';
// @ts-ignore
import { ReceiptsUpdateReceiptRequestTipDetailsInner } from '../models';
// @ts-ignore
import { ReceiptsUpdateReceiptResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * ReceiptsApi - axios parameter creator
 * @export
 */
export const ReceiptsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create Receipt
         * @param {number} companyId Company ID
         * @param {ReceiptsCreateReceiptRequest} receiptsCreateReceiptRequest Receipt
         * @param {string} [xApiVersion] 7shifts API version
         * @param {string} [xCompanyGuid] Company GUID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createReceipt: async (companyId: number, receiptsCreateReceiptRequest: ReceiptsCreateReceiptRequest, xApiVersion?: string, xCompanyGuid?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('createReceipt', 'companyId', companyId)
            // verify required parameter 'receiptsCreateReceiptRequest' is not null or undefined
            assertParamExists('createReceipt', 'receiptsCreateReceiptRequest', receiptsCreateReceiptRequest)
            const localVarPath = `/v2/company/{company_id}/receipts`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId !== undefined ? companyId : `-company_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication cookieAuth required
            await setApiKeyToObject({object: localVarHeaderParameter, type: "Cookie", key: "Cookie", keyParamName: "7session", configuration})
            if (xApiVersion != null) {
                localVarHeaderParameter['x-api-version'] = String(xApiVersion);
            }

            if (xCompanyGuid != null) {
                localVarHeaderParameter['x-company-guid'] = String(xCompanyGuid);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: receiptsCreateReceiptRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/company/{company_id}/receipts',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(receiptsCreateReceiptRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve Receipt
         * @param {number} companyId Company ID
         * @param {string} receiptId Receipt UUID
         * @param {string} [xApiVersion] 7shifts API version
         * @param {string} [xCompanyGuid] Company GUID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getReceipt: async (companyId: number, receiptId: string, xApiVersion?: string, xCompanyGuid?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('getReceipt', 'companyId', companyId)
            // verify required parameter 'receiptId' is not null or undefined
            assertParamExists('getReceipt', 'receiptId', receiptId)
            const localVarPath = `/v2/company/{company_id}/receipts/{receipt_id}`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId !== undefined ? companyId : `-company_id-`)))
                .replace(`{${"receipt_id"}}`, encodeURIComponent(String(receiptId !== undefined ? receiptId : `-receipt_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication cookieAuth required
            await setApiKeyToObject({object: localVarHeaderParameter, type: "Cookie", key: "Cookie", keyParamName: "7session", configuration})
            if (xApiVersion != null) {
                localVarHeaderParameter['x-api-version'] = String(xApiVersion);
            }

            if (xCompanyGuid != null) {
                localVarHeaderParameter['x-company-guid'] = String(xCompanyGuid);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/company/{company_id}/receipts/{receipt_id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve Receipts Summary
         * @param {number} companyId Company ID
         * @param {number} locationId Location ID
         * @param {string} [xApiVersion] 7shifts API version
         * @param {string} [xCompanyGuid] Company GUID
         * @param {string} [receiptDateGte] Return receipts that were created on or after a specific date. Limit to 31-day range with receipt_date[lte].
         * @param {string} [receiptDateLte] Return receipts that were created on or before a specific date. Limit to 31-day range with receipt_date[gte].
         * @param {string} [modifiedSince] Return receipts that were modified on or after a specific date. Limited to past 30 days.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSummary: async (companyId: number, locationId: number, xApiVersion?: string, xCompanyGuid?: string, receiptDateGte?: string, receiptDateLte?: string, modifiedSince?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('getSummary', 'companyId', companyId)
            // verify required parameter 'locationId' is not null or undefined
            assertParamExists('getSummary', 'locationId', locationId)
            const localVarPath = `/v2/company/{company_id}/receipts_summary`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId !== undefined ? companyId : `-company_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication cookieAuth required
            await setApiKeyToObject({object: localVarHeaderParameter, type: "Cookie", key: "Cookie", keyParamName: "7session", configuration})
            if (locationId !== undefined) {
                localVarQueryParameter['location_id'] = locationId;
            }

            if (receiptDateGte !== undefined) {
                localVarQueryParameter['receipt_date[gte]'] = (receiptDateGte as any instanceof Date) ?
                    (receiptDateGte as any).toISOString() :
                    receiptDateGte;
            }

            if (receiptDateLte !== undefined) {
                localVarQueryParameter['receipt_date[lte]'] = (receiptDateLte as any instanceof Date) ?
                    (receiptDateLte as any).toISOString() :
                    receiptDateLte;
            }

            if (modifiedSince !== undefined) {
                localVarQueryParameter['modified_since'] = (modifiedSince as any instanceof Date) ?
                    (modifiedSince as any).toISOString() :
                    modifiedSince;
            }

            if (xApiVersion != null) {
                localVarHeaderParameter['x-api-version'] = String(xApiVersion);
            }

            if (xCompanyGuid != null) {
                localVarHeaderParameter['x-company-guid'] = String(xCompanyGuid);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/company/{company_id}/receipts_summary',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List Receipts
         * @param {number} companyId Company ID
         * @param {number} locationId Location ID
         * @param {string} [xApiVersion] 7shifts API version
         * @param {string} [xCompanyGuid] Company GUID
         * @param {string} [receiptDateGte] Return receipts that were created on or after a specific date
         * @param {string} [receiptDateLte] Return receipts that were created on or before a specific date
         * @param {string} [modifiedSince] Return receipts that were modified on or after a specific date
         * @param {'open' | 'closed' | 'voided' | 'deleted'} [status] Filter receipts by status type
         * @param {string} [externalUserId] Filter receipts by external user id
         * @param {string} [cursor] An opaque cursor for the next or previous result set.
         * @param {number} [limit] The number of results desired per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list: async (companyId: number, locationId: number, xApiVersion?: string, xCompanyGuid?: string, receiptDateGte?: string, receiptDateLte?: string, modifiedSince?: string, status?: 'open' | 'closed' | 'voided' | 'deleted', externalUserId?: string, cursor?: string, limit?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('list', 'companyId', companyId)
            // verify required parameter 'locationId' is not null or undefined
            assertParamExists('list', 'locationId', locationId)
            const localVarPath = `/v2/company/{company_id}/receipts`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId !== undefined ? companyId : `-company_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication cookieAuth required
            await setApiKeyToObject({object: localVarHeaderParameter, type: "Cookie", key: "Cookie", keyParamName: "7session", configuration})
            if (locationId !== undefined) {
                localVarQueryParameter['location_id'] = locationId;
            }

            if (receiptDateGte !== undefined) {
                localVarQueryParameter['receipt_date[gte]'] = (receiptDateGte as any instanceof Date) ?
                    (receiptDateGte as any).toISOString() :
                    receiptDateGte;
            }

            if (receiptDateLte !== undefined) {
                localVarQueryParameter['receipt_date[lte]'] = (receiptDateLte as any instanceof Date) ?
                    (receiptDateLte as any).toISOString() :
                    receiptDateLte;
            }

            if (modifiedSince !== undefined) {
                localVarQueryParameter['modified_since'] = (modifiedSince as any instanceof Date) ?
                    (modifiedSince as any).toISOString() :
                    modifiedSince;
            }

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }

            if (externalUserId !== undefined) {
                localVarQueryParameter['external_user_id'] = externalUserId;
            }

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (xApiVersion != null) {
                localVarHeaderParameter['x-api-version'] = String(xApiVersion);
            }

            if (xCompanyGuid != null) {
                localVarHeaderParameter['x-company-guid'] = String(xCompanyGuid);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/company/{company_id}/receipts',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update Receipt
         * @param {number} companyId Company ID
         * @param {string} receiptId Receipt ID.  Either 7shifts receipt UUID or a combination of the External ID of the sales receipt in your system and a Location ID. External ID\&#39;s must start with \&#39;ext:\&#39; and the format is ext:location_id:receipt_id.
         * @param {ReceiptsUpdateReceiptRequest} receiptsUpdateReceiptRequest Receipt
         * @param {string} [xApiVersion] 7shifts API version
         * @param {string} [xCompanyGuid] Company GUID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateReceipt: async (companyId: number, receiptId: string, receiptsUpdateReceiptRequest: ReceiptsUpdateReceiptRequest, xApiVersion?: string, xCompanyGuid?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('updateReceipt', 'companyId', companyId)
            // verify required parameter 'receiptId' is not null or undefined
            assertParamExists('updateReceipt', 'receiptId', receiptId)
            // verify required parameter 'receiptsUpdateReceiptRequest' is not null or undefined
            assertParamExists('updateReceipt', 'receiptsUpdateReceiptRequest', receiptsUpdateReceiptRequest)
            const localVarPath = `/v2/company/{company_id}/receipts/{receipt_id}`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId !== undefined ? companyId : `-company_id-`)))
                .replace(`{${"receipt_id"}}`, encodeURIComponent(String(receiptId !== undefined ? receiptId : `-receipt_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication cookieAuth required
            await setApiKeyToObject({object: localVarHeaderParameter, type: "Cookie", key: "Cookie", keyParamName: "7session", configuration})
            if (xApiVersion != null) {
                localVarHeaderParameter['x-api-version'] = String(xApiVersion);
            }

            if (xCompanyGuid != null) {
                localVarHeaderParameter['x-company-guid'] = String(xCompanyGuid);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: receiptsUpdateReceiptRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/company/{company_id}/receipts/{receipt_id}',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(receiptsUpdateReceiptRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ReceiptsApi - functional programming interface
 * @export
 */
export const ReceiptsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ReceiptsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create Receipt
         * @param {ReceiptsApiCreateReceiptRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createReceipt(requestParameters: ReceiptsApiCreateReceiptRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReceiptsCreateReceiptResponse>> {
            const receiptsCreateReceiptRequest: ReceiptsCreateReceiptRequest = {
                receipt_id: requestParameters.receipt_id
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createReceipt(requestParameters.companyId, receiptsCreateReceiptRequest, requestParameters.xApiVersion, requestParameters.xCompanyGuid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Retrieve Receipt
         * @param {ReceiptsApiGetReceiptRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getReceipt(requestParameters: ReceiptsApiGetReceiptRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReceiptsGetReceiptResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getReceipt(requestParameters.companyId, requestParameters.receiptId, requestParameters.xApiVersion, requestParameters.xCompanyGuid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Retrieve Receipts Summary
         * @param {ReceiptsApiGetSummaryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSummary(requestParameters: ReceiptsApiGetSummaryRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReceiptsGetSummaryResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSummary(requestParameters.companyId, requestParameters.locationId, requestParameters.xApiVersion, requestParameters.xCompanyGuid, requestParameters.receiptDateGte, requestParameters.receiptDateLte, requestParameters.modifiedSince, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary List Receipts
         * @param {ReceiptsApiListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async list(requestParameters: ReceiptsApiListRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReceiptsListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.list(requestParameters.companyId, requestParameters.locationId, requestParameters.xApiVersion, requestParameters.xCompanyGuid, requestParameters.receiptDateGte, requestParameters.receiptDateLte, requestParameters.modifiedSince, requestParameters.status, requestParameters.externalUserId, requestParameters.cursor, requestParameters.limit, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update Receipt
         * @param {ReceiptsApiUpdateReceiptRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateReceipt(requestParameters: ReceiptsApiUpdateReceiptRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReceiptsUpdateReceiptResponse>> {
            const receiptsUpdateReceiptRequest: ReceiptsUpdateReceiptRequest = {
                receipt_date: requestParameters.receipt_date,
                net_total: requestParameters.net_total,
                gross_total: requestParameters.gross_total,
                total_receipt_discounts: requestParameters.total_receipt_discounts,
                tips: requestParameters.tips,
                external_user_id: requestParameters.external_user_id,
                revenue_center: requestParameters.revenue_center,
                receipt_lines: requestParameters.receipt_lines,
                tip_details: requestParameters.tip_details,
                status: requestParameters.status,
                order_type: requestParameters.order_type,
                dining_option: requestParameters.dining_option
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateReceipt(requestParameters.companyId, requestParameters.receiptId, receiptsUpdateReceiptRequest, requestParameters.xApiVersion, requestParameters.xCompanyGuid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ReceiptsApi - factory interface
 * @export
 */
export const ReceiptsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ReceiptsApiFp(configuration)
    return {
        /**
         * 
         * @summary Create Receipt
         * @param {ReceiptsApiCreateReceiptRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createReceipt(requestParameters: ReceiptsApiCreateReceiptRequest, options?: AxiosRequestConfig): AxiosPromise<ReceiptsCreateReceiptResponse> {
            return localVarFp.createReceipt(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve Receipt
         * @param {ReceiptsApiGetReceiptRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getReceipt(requestParameters: ReceiptsApiGetReceiptRequest, options?: AxiosRequestConfig): AxiosPromise<ReceiptsGetReceiptResponse> {
            return localVarFp.getReceipt(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve Receipts Summary
         * @param {ReceiptsApiGetSummaryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSummary(requestParameters: ReceiptsApiGetSummaryRequest, options?: AxiosRequestConfig): AxiosPromise<ReceiptsGetSummaryResponse> {
            return localVarFp.getSummary(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List Receipts
         * @param {ReceiptsApiListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list(requestParameters: ReceiptsApiListRequest, options?: AxiosRequestConfig): AxiosPromise<ReceiptsListResponse> {
            return localVarFp.list(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update Receipt
         * @param {ReceiptsApiUpdateReceiptRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateReceipt(requestParameters: ReceiptsApiUpdateReceiptRequest, options?: AxiosRequestConfig): AxiosPromise<ReceiptsUpdateReceiptResponse> {
            return localVarFp.updateReceipt(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createReceipt operation in ReceiptsApi.
 * @export
 * @interface ReceiptsApiCreateReceiptRequest
 */
export type ReceiptsApiCreateReceiptRequest = {
    
    /**
    * Company ID
    * @type {number}
    * @memberof ReceiptsApiCreateReceipt
    */
    readonly companyId: number
    
    /**
    * 7shifts API version
    * @type {string}
    * @memberof ReceiptsApiCreateReceipt
    */
    readonly xApiVersion?: string
    
    /**
    * Company GUID
    * @type {string}
    * @memberof ReceiptsApiCreateReceipt
    */
    readonly xCompanyGuid?: string
    
} & ReceiptsCreateReceiptRequest

/**
 * Request parameters for getReceipt operation in ReceiptsApi.
 * @export
 * @interface ReceiptsApiGetReceiptRequest
 */
export type ReceiptsApiGetReceiptRequest = {
    
    /**
    * Company ID
    * @type {number}
    * @memberof ReceiptsApiGetReceipt
    */
    readonly companyId: number
    
    /**
    * Receipt UUID
    * @type {string}
    * @memberof ReceiptsApiGetReceipt
    */
    readonly receiptId: string
    
    /**
    * 7shifts API version
    * @type {string}
    * @memberof ReceiptsApiGetReceipt
    */
    readonly xApiVersion?: string
    
    /**
    * Company GUID
    * @type {string}
    * @memberof ReceiptsApiGetReceipt
    */
    readonly xCompanyGuid?: string
    
}

/**
 * Request parameters for getSummary operation in ReceiptsApi.
 * @export
 * @interface ReceiptsApiGetSummaryRequest
 */
export type ReceiptsApiGetSummaryRequest = {
    
    /**
    * Company ID
    * @type {number}
    * @memberof ReceiptsApiGetSummary
    */
    readonly companyId: number
    
    /**
    * Location ID
    * @type {number}
    * @memberof ReceiptsApiGetSummary
    */
    readonly locationId: number
    
    /**
    * 7shifts API version
    * @type {string}
    * @memberof ReceiptsApiGetSummary
    */
    readonly xApiVersion?: string
    
    /**
    * Company GUID
    * @type {string}
    * @memberof ReceiptsApiGetSummary
    */
    readonly xCompanyGuid?: string
    
    /**
    * Return receipts that were created on or after a specific date. Limit to 31-day range with receipt_date[lte].
    * @type {string}
    * @memberof ReceiptsApiGetSummary
    */
    readonly receiptDateGte?: string
    
    /**
    * Return receipts that were created on or before a specific date. Limit to 31-day range with receipt_date[gte].
    * @type {string}
    * @memberof ReceiptsApiGetSummary
    */
    readonly receiptDateLte?: string
    
    /**
    * Return receipts that were modified on or after a specific date. Limited to past 30 days.
    * @type {string}
    * @memberof ReceiptsApiGetSummary
    */
    readonly modifiedSince?: string
    
}

/**
 * Request parameters for list operation in ReceiptsApi.
 * @export
 * @interface ReceiptsApiListRequest
 */
export type ReceiptsApiListRequest = {
    
    /**
    * Company ID
    * @type {number}
    * @memberof ReceiptsApiList
    */
    readonly companyId: number
    
    /**
    * Location ID
    * @type {number}
    * @memberof ReceiptsApiList
    */
    readonly locationId: number
    
    /**
    * 7shifts API version
    * @type {string}
    * @memberof ReceiptsApiList
    */
    readonly xApiVersion?: string
    
    /**
    * Company GUID
    * @type {string}
    * @memberof ReceiptsApiList
    */
    readonly xCompanyGuid?: string
    
    /**
    * Return receipts that were created on or after a specific date
    * @type {string}
    * @memberof ReceiptsApiList
    */
    readonly receiptDateGte?: string
    
    /**
    * Return receipts that were created on or before a specific date
    * @type {string}
    * @memberof ReceiptsApiList
    */
    readonly receiptDateLte?: string
    
    /**
    * Return receipts that were modified on or after a specific date
    * @type {string}
    * @memberof ReceiptsApiList
    */
    readonly modifiedSince?: string
    
    /**
    * Filter receipts by status type
    * @type {'open' | 'closed' | 'voided' | 'deleted'}
    * @memberof ReceiptsApiList
    */
    readonly status?: 'open' | 'closed' | 'voided' | 'deleted'
    
    /**
    * Filter receipts by external user id
    * @type {string}
    * @memberof ReceiptsApiList
    */
    readonly externalUserId?: string
    
    /**
    * An opaque cursor for the next or previous result set.
    * @type {string}
    * @memberof ReceiptsApiList
    */
    readonly cursor?: string
    
    /**
    * The number of results desired per page.
    * @type {number}
    * @memberof ReceiptsApiList
    */
    readonly limit?: number
    
}

/**
 * Request parameters for updateReceipt operation in ReceiptsApi.
 * @export
 * @interface ReceiptsApiUpdateReceiptRequest
 */
export type ReceiptsApiUpdateReceiptRequest = {
    
    /**
    * Company ID
    * @type {number}
    * @memberof ReceiptsApiUpdateReceipt
    */
    readonly companyId: number
    
    /**
    * Receipt ID.  Either 7shifts receipt UUID or a combination of the External ID of the sales receipt in your system and a Location ID. External ID\'s must start with \'ext:\' and the format is ext:location_id:receipt_id.
    * @type {string}
    * @memberof ReceiptsApiUpdateReceipt
    */
    readonly receiptId: string
    
    /**
    * 7shifts API version
    * @type {string}
    * @memberof ReceiptsApiUpdateReceipt
    */
    readonly xApiVersion?: string
    
    /**
    * Company GUID
    * @type {string}
    * @memberof ReceiptsApiUpdateReceipt
    */
    readonly xCompanyGuid?: string
    
} & ReceiptsUpdateReceiptRequest

/**
 * ReceiptsApiGenerated - object-oriented interface
 * @export
 * @class ReceiptsApiGenerated
 * @extends {BaseAPI}
 */
export class ReceiptsApiGenerated extends BaseAPI {
    /**
     * 
     * @summary Create Receipt
     * @param {ReceiptsApiCreateReceiptRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReceiptsApiGenerated
     */
    public createReceipt(requestParameters: ReceiptsApiCreateReceiptRequest, options?: AxiosRequestConfig) {
        return ReceiptsApiFp(this.configuration).createReceipt(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve Receipt
     * @param {ReceiptsApiGetReceiptRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReceiptsApiGenerated
     */
    public getReceipt(requestParameters: ReceiptsApiGetReceiptRequest, options?: AxiosRequestConfig) {
        return ReceiptsApiFp(this.configuration).getReceipt(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve Receipts Summary
     * @param {ReceiptsApiGetSummaryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReceiptsApiGenerated
     */
    public getSummary(requestParameters: ReceiptsApiGetSummaryRequest, options?: AxiosRequestConfig) {
        return ReceiptsApiFp(this.configuration).getSummary(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List Receipts
     * @param {ReceiptsApiListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReceiptsApiGenerated
     */
    public list(requestParameters: ReceiptsApiListRequest, options?: AxiosRequestConfig) {
        return ReceiptsApiFp(this.configuration).list(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update Receipt
     * @param {ReceiptsApiUpdateReceiptRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReceiptsApiGenerated
     */
    public updateReceipt(requestParameters: ReceiptsApiUpdateReceiptRequest, options?: AxiosRequestConfig) {
        return ReceiptsApiFp(this.configuration).updateReceipt(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
