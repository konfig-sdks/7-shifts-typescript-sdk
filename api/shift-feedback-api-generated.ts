/* tslint:disable */
/* eslint-disable */
/*
7shifts API

7shifts is a team management software designed for restaurants. We help managers and operators spend less time and effort scheduling their staff, reduce their monthly labor costs and improve team communication. The result is simplified team management, one shift at a time.

7shifts also offers free mobile apps (iOS and Android) allowing managers and employees to have everything at their fingertips.

Start your free trial or request a demo at www.7shifts.com.

The version of the OpenAPI document: 2023-05-01
Contact: api-support@7shifts.com

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ShiftFeedbackList400Response } from '../models';
// @ts-ignore
import { ShiftFeedbackList401Response } from '../models';
// @ts-ignore
import { ShiftFeedbackList403Response } from '../models';
// @ts-ignore
import { ShiftFeedbackList404Response } from '../models';
// @ts-ignore
import { ShiftFeedbackList500Response } from '../models';
// @ts-ignore
import { ShiftFeedbackListResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * ShiftFeedbackApi - axios parameter creator
 * @export
 */
export const ShiftFeedbackApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary List Shift Feedback
         * @param {number} companyId Company ID
         * @param {string | Date} startDate The start date of the range you want shift feedback for
         * @param {string | Date} endDate The end date of the range you want shift feedback for (inclusive)
         * @param {string} [xApiVersion] 7shifts API version
         * @param {string} [xCompanyGuid] Company GUID
         * @param {number} [locationId] Location ID
         * @param {number} [userId] User ID
         * @param {string} [cursor] Cursor for the next or previous page of results.
         * @param {number} [limit] The number of results desired per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list: async (companyId: number, startDate: string | Date, endDate: string | Date, xApiVersion?: string, xCompanyGuid?: string, locationId?: number, userId?: number, cursor?: string, limit?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('list', 'companyId', companyId)
            // verify required parameter 'startDate' is not null or undefined
            assertParamExists('list', 'startDate', startDate)
            // verify required parameter 'endDate' is not null or undefined
            assertParamExists('list', 'endDate', endDate)
            const localVarPath = `/v2/company/{company_id}/shift_feedback`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId !== undefined ? companyId : `-company_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication cookieAuth required
            await setApiKeyToObject({object: localVarHeaderParameter, type: "Cookie", key: "Cookie", keyParamName: "7session", configuration})
            if (startDate !== undefined) {
                localVarQueryParameter['start_date'] = (startDate as any instanceof Date) ?
                    (startDate as any).toISOString().substr(0,10) :
                    startDate;
            }

            if (endDate !== undefined) {
                localVarQueryParameter['end_date'] = (endDate as any instanceof Date) ?
                    (endDate as any).toISOString().substr(0,10) :
                    endDate;
            }

            if (locationId !== undefined) {
                localVarQueryParameter['location_id'] = locationId;
            }

            if (userId !== undefined) {
                localVarQueryParameter['user_id'] = userId;
            }

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (xApiVersion != null) {
                localVarHeaderParameter['x-api-version'] = String(xApiVersion);
            }

            if (xCompanyGuid != null) {
                localVarHeaderParameter['x-company-guid'] = String(xCompanyGuid);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/company/{company_id}/shift_feedback',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ShiftFeedbackApi - functional programming interface
 * @export
 */
export const ShiftFeedbackApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ShiftFeedbackApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary List Shift Feedback
         * @param {ShiftFeedbackApiListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async list(requestParameters: ShiftFeedbackApiListRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ShiftFeedbackListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.list(requestParameters.companyId, requestParameters.startDate, requestParameters.endDate, requestParameters.xApiVersion, requestParameters.xCompanyGuid, requestParameters.locationId, requestParameters.userId, requestParameters.cursor, requestParameters.limit, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ShiftFeedbackApi - factory interface
 * @export
 */
export const ShiftFeedbackApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ShiftFeedbackApiFp(configuration)
    return {
        /**
         * 
         * @summary List Shift Feedback
         * @param {ShiftFeedbackApiListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list(requestParameters: ShiftFeedbackApiListRequest, options?: AxiosRequestConfig): AxiosPromise<ShiftFeedbackListResponse> {
            return localVarFp.list(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for list operation in ShiftFeedbackApi.
 * @export
 * @interface ShiftFeedbackApiListRequest
 */
export type ShiftFeedbackApiListRequest = {
    
    /**
    * Company ID
    * @type {number}
    * @memberof ShiftFeedbackApiList
    */
    readonly companyId: number
    
    /**
    * The start date of the range you want shift feedback for
    * @type {string | Date}
    * @memberof ShiftFeedbackApiList
    */
    readonly startDate: string | Date
    
    /**
    * The end date of the range you want shift feedback for (inclusive)
    * @type {string | Date}
    * @memberof ShiftFeedbackApiList
    */
    readonly endDate: string | Date
    
    /**
    * 7shifts API version
    * @type {string}
    * @memberof ShiftFeedbackApiList
    */
    readonly xApiVersion?: string
    
    /**
    * Company GUID
    * @type {string}
    * @memberof ShiftFeedbackApiList
    */
    readonly xCompanyGuid?: string
    
    /**
    * Location ID
    * @type {number}
    * @memberof ShiftFeedbackApiList
    */
    readonly locationId?: number
    
    /**
    * User ID
    * @type {number}
    * @memberof ShiftFeedbackApiList
    */
    readonly userId?: number
    
    /**
    * Cursor for the next or previous page of results.
    * @type {string}
    * @memberof ShiftFeedbackApiList
    */
    readonly cursor?: string
    
    /**
    * The number of results desired per page.
    * @type {number}
    * @memberof ShiftFeedbackApiList
    */
    readonly limit?: number
    
}

/**
 * ShiftFeedbackApiGenerated - object-oriented interface
 * @export
 * @class ShiftFeedbackApiGenerated
 * @extends {BaseAPI}
 */
export class ShiftFeedbackApiGenerated extends BaseAPI {
    /**
     * 
     * @summary List Shift Feedback
     * @param {ShiftFeedbackApiListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShiftFeedbackApiGenerated
     */
    public list(requestParameters: ShiftFeedbackApiListRequest, options?: AxiosRequestConfig) {
        return ShiftFeedbackApiFp(this.configuration).list(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
