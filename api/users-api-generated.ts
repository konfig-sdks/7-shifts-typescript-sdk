/* tslint:disable */
/* eslint-disable */
/*
7shifts API

7shifts is a team management software designed for restaurants. We help managers and operators spend less time and effort scheduling their staff, reduce their monthly labor costs and improve team communication. The result is simplified team management, one shift at a time.

7shifts also offers free mobile apps (iOS and Android) allowing managers and employees to have everything at their fingertips.

Start your free trial or request a demo at www.7shifts.com.

The version of the OpenAPI document: 2023-05-01
Contact: api-support@7shifts.com

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { UsersBulkCreate400Response } from '../models';
// @ts-ignore
import { UsersBulkCreate401Response } from '../models';
// @ts-ignore
import { UsersBulkCreate403Response } from '../models';
// @ts-ignore
import { UsersBulkCreate404Response } from '../models';
// @ts-ignore
import { UsersBulkCreate500Response } from '../models';
// @ts-ignore
import { UsersBulkCreateRequestInner } from '../models';
// @ts-ignore
import { UsersBulkCreateResponse } from '../models';
// @ts-ignore
import { UsersCreateNewUser400Response } from '../models';
// @ts-ignore
import { UsersCreateNewUser401Response } from '../models';
// @ts-ignore
import { UsersCreateNewUser403Response } from '../models';
// @ts-ignore
import { UsersCreateNewUser404Response } from '../models';
// @ts-ignore
import { UsersCreateNewUser422Response } from '../models';
// @ts-ignore
import { UsersCreateNewUser500Response } from '../models';
// @ts-ignore
import { UsersCreateNewUserRequest } from '../models';
// @ts-ignore
import { UsersCreateNewUserRequestWagesInner } from '../models';
// @ts-ignore
import { UsersCreateNewUserResponse } from '../models';
// @ts-ignore
import { UsersDeactivate401Response } from '../models';
// @ts-ignore
import { UsersDeactivate403Response } from '../models';
// @ts-ignore
import { UsersDeactivate404Response } from '../models';
// @ts-ignore
import { UsersDeactivate500Response } from '../models';
// @ts-ignore
import { UsersDeactivateRequest } from '../models';
// @ts-ignore
import { UsersDeactivateResponse } from '../models';
// @ts-ignore
import { UsersGetUserByIdentifier400Response } from '../models';
// @ts-ignore
import { UsersGetUserByIdentifier403Response } from '../models';
// @ts-ignore
import { UsersGetUserByIdentifier404Response } from '../models';
// @ts-ignore
import { UsersGetUserByIdentifierResponse } from '../models';
// @ts-ignore
import { UsersList400Response } from '../models';
// @ts-ignore
import { UsersList401Response } from '../models';
// @ts-ignore
import { UsersList403Response } from '../models';
// @ts-ignore
import { UsersList500Response } from '../models';
// @ts-ignore
import { UsersListResponse } from '../models';
// @ts-ignore
import { UsersUpdateUserByIdentifier400Response } from '../models';
// @ts-ignore
import { UsersUpdateUserByIdentifier401Response } from '../models';
// @ts-ignore
import { UsersUpdateUserByIdentifier403Response } from '../models';
// @ts-ignore
import { UsersUpdateUserByIdentifier404Response } from '../models';
// @ts-ignore
import { UsersUpdateUserByIdentifier422Response } from '../models';
// @ts-ignore
import { UsersUpdateUserByIdentifier500Response } from '../models';
// @ts-ignore
import { UsersUpdateUserByIdentifierRequest } from '../models';
// @ts-ignore
import { UsersUpdateUserByIdentifierResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * UsersApi - axios parameter creator
 * @export
 */
export const UsersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create Many Users
         * @param {number} companyId Company ID
         * @param {Array<UsersBulkCreateRequestInner>} usersBulkCreateRequestInner 
         * @param {string} [xApiVersion] 7shifts API version
         * @param {string} [xCompanyGuid] Company GUID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bulkCreate: async (companyId: number, usersBulkCreateRequestInner: Array<UsersBulkCreateRequestInner>, xApiVersion?: string, xCompanyGuid?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('bulkCreate', 'companyId', companyId)
            // verify required parameter 'usersBulkCreateRequestInner' is not null or undefined
            assertParamExists('bulkCreate', 'usersBulkCreateRequestInner', usersBulkCreateRequestInner)
            const localVarPath = `/v2/company/{company_id}/create_many_users`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId !== undefined ? companyId : `-company_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication cookieAuth required
            await setApiKeyToObject({object: localVarHeaderParameter, type: "Cookie", key: "Cookie", keyParamName: "7session", configuration})
            if (xApiVersion != null) {
                localVarHeaderParameter['x-api-version'] = String(xApiVersion);
            }

            if (xCompanyGuid != null) {
                localVarHeaderParameter['x-company-guid'] = String(xCompanyGuid);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: usersBulkCreateRequestInner,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/company/{company_id}/create_many_users',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(usersBulkCreateRequestInner, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create User
         * @param {number} companyId Company ID
         * @param {UsersCreateNewUserRequest} usersCreateNewUserRequest 
         * @param {string} [xApiVersion] 7shifts API version
         * @param {string} [xCompanyGuid] Company GUID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewUser: async (companyId: number, usersCreateNewUserRequest: UsersCreateNewUserRequest, xApiVersion?: string, xCompanyGuid?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('createNewUser', 'companyId', companyId)
            // verify required parameter 'usersCreateNewUserRequest' is not null or undefined
            assertParamExists('createNewUser', 'usersCreateNewUserRequest', usersCreateNewUserRequest)
            const localVarPath = `/v2/company/{company_id}/users`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId !== undefined ? companyId : `-company_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication cookieAuth required
            await setApiKeyToObject({object: localVarHeaderParameter, type: "Cookie", key: "Cookie", keyParamName: "7session", configuration})
            if (xApiVersion != null) {
                localVarHeaderParameter['x-api-version'] = String(xApiVersion);
            }

            if (xCompanyGuid != null) {
                localVarHeaderParameter['x-company-guid'] = String(xCompanyGuid);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: usersCreateNewUserRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/company/{company_id}/users',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(usersCreateNewUserRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Deactivate User
         * @param {number} companyId Company ID
         * @param {number} identifier User ID
         * @param {string} [xApiVersion] 7shifts API version
         * @param {string} [xCompanyGuid] Company GUID
         * @param {UsersDeactivateRequest} [usersDeactivateRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deactivate: async (companyId: number, identifier: number, xApiVersion?: string, xCompanyGuid?: string, usersDeactivateRequest?: UsersDeactivateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('deactivate', 'companyId', companyId)
            // verify required parameter 'identifier' is not null or undefined
            assertParamExists('deactivate', 'identifier', identifier)
            const localVarPath = `/v2/company/{company_id}/users/{identifier}`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId !== undefined ? companyId : `-company_id-`)))
                .replace(`{${"identifier"}}`, encodeURIComponent(String(identifier !== undefined ? identifier : `-identifier-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication cookieAuth required
            await setApiKeyToObject({object: localVarHeaderParameter, type: "Cookie", key: "Cookie", keyParamName: "7session", configuration})
            if (xApiVersion != null) {
                localVarHeaderParameter['x-api-version'] = String(xApiVersion);
            }

            if (xCompanyGuid != null) {
                localVarHeaderParameter['x-company-guid'] = String(xCompanyGuid);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: usersDeactivateRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/company/{company_id}/users/{identifier}',
                httpMethod: 'DELETE'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(usersDeactivateRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve User
         * @param {number} companyId Company ID
         * @param {string} identifier User ID. Accepted values are 7shifts user id or punch id. Use prefix punch: for punch id
         * @param {string} [xApiVersion] 7shifts API version
         * @param {string} [xCompanyGuid] Company GUID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserByIdentifier: async (companyId: number, identifier: string, xApiVersion?: string, xCompanyGuid?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('getUserByIdentifier', 'companyId', companyId)
            // verify required parameter 'identifier' is not null or undefined
            assertParamExists('getUserByIdentifier', 'identifier', identifier)
            const localVarPath = `/v2/company/{company_id}/users/{identifier}`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId !== undefined ? companyId : `-company_id-`)))
                .replace(`{${"identifier"}}`, encodeURIComponent(String(identifier !== undefined ? identifier : `-identifier-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication cookieAuth required
            await setApiKeyToObject({object: localVarHeaderParameter, type: "Cookie", key: "Cookie", keyParamName: "7session", configuration})
            if (xApiVersion != null) {
                localVarHeaderParameter['x-api-version'] = String(xApiVersion);
            }

            if (xCompanyGuid != null) {
                localVarHeaderParameter['x-company-guid'] = String(xCompanyGuid);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/company/{company_id}/users/{identifier}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List Users
         * @param {number} companyId Company ID
         * @param {string} [xApiVersion] 7shifts API version
         * @param {string} [xCompanyGuid] Company GUID
         * @param {string} [modifiedSince] Return users that have been modified since the specified date. Format YYYY-MM-DD
         * @param {number} [locationId] Location ID (cannot be used in conjunction with Department ID and Role ID)
         * @param {number} [departmentId] Department ID (cannot be used in conjunction with Location ID and Role ID)
         * @param {number} [roleId] Role ID (cannot be used in conjunction with Location ID and Department ID)
         * @param {'active' | 'inactive'} [status] The user status
         * @param {string} [name] Filter by partial or full employee name
         * @param {string} [sortBy] Sort the paginated result by the given field and direction.
         * @param {string} [cursor] Cursor for the next or previous page of results.
         * @param {number} [limit] The number of results desired per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list: async (companyId: number, xApiVersion?: string, xCompanyGuid?: string, modifiedSince?: string, locationId?: number, departmentId?: number, roleId?: number, status?: 'active' | 'inactive', name?: string, sortBy?: string, cursor?: string, limit?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('list', 'companyId', companyId)
            const localVarPath = `/v2/company/{company_id}/users`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId !== undefined ? companyId : `-company_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication cookieAuth required
            await setApiKeyToObject({object: localVarHeaderParameter, type: "Cookie", key: "Cookie", keyParamName: "7session", configuration})
            if (modifiedSince !== undefined) {
                localVarQueryParameter['modified_since'] = modifiedSince;
            }

            if (locationId !== undefined) {
                localVarQueryParameter['location_id'] = locationId;
            }

            if (departmentId !== undefined) {
                localVarQueryParameter['department_id'] = departmentId;
            }

            if (roleId !== undefined) {
                localVarQueryParameter['role_id'] = roleId;
            }

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (xApiVersion != null) {
                localVarHeaderParameter['x-api-version'] = String(xApiVersion);
            }

            if (xCompanyGuid != null) {
                localVarHeaderParameter['x-company-guid'] = String(xCompanyGuid);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/company/{company_id}/users',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update User
         * @param {number} companyId Company ID
         * @param {number} identifier User ID
         * @param {UsersUpdateUserByIdentifierRequest} usersUpdateUserByIdentifierRequest 
         * @param {string} [xApiVersion] 7shifts API version
         * @param {string} [xCompanyGuid] Company GUID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserByIdentifier: async (companyId: number, identifier: number, usersUpdateUserByIdentifierRequest: UsersUpdateUserByIdentifierRequest, xApiVersion?: string, xCompanyGuid?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('updateUserByIdentifier', 'companyId', companyId)
            // verify required parameter 'identifier' is not null or undefined
            assertParamExists('updateUserByIdentifier', 'identifier', identifier)
            // verify required parameter 'usersUpdateUserByIdentifierRequest' is not null or undefined
            assertParamExists('updateUserByIdentifier', 'usersUpdateUserByIdentifierRequest', usersUpdateUserByIdentifierRequest)
            const localVarPath = `/v2/company/{company_id}/users/{identifier}`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId !== undefined ? companyId : `-company_id-`)))
                .replace(`{${"identifier"}}`, encodeURIComponent(String(identifier !== undefined ? identifier : `-identifier-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication cookieAuth required
            await setApiKeyToObject({object: localVarHeaderParameter, type: "Cookie", key: "Cookie", keyParamName: "7session", configuration})
            if (xApiVersion != null) {
                localVarHeaderParameter['x-api-version'] = String(xApiVersion);
            }

            if (xCompanyGuid != null) {
                localVarHeaderParameter['x-company-guid'] = String(xCompanyGuid);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: usersUpdateUserByIdentifierRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/company/{company_id}/users/{identifier}',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(usersUpdateUserByIdentifierRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UsersApi - functional programming interface
 * @export
 */
export const UsersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UsersApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create Many Users
         * @param {UsersApiBulkCreateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async bulkCreate(requestParameters: UsersApiBulkCreateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UsersBulkCreateResponse>> {
            const usersBulkCreateRequestInner: Array<UsersBulkCreateRequestInner> = requestParameters.requestBody;
            const localVarAxiosArgs = await localVarAxiosParamCreator.bulkCreate(requestParameters.companyId, usersBulkCreateRequestInner, requestParameters.xApiVersion, requestParameters.xCompanyGuid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Create User
         * @param {UsersApiCreateNewUserRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createNewUser(requestParameters: UsersApiCreateNewUserRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UsersCreateNewUserResponse>> {
            const usersCreateNewUserRequest: UsersCreateNewUserRequest = {
                first_name: requestParameters.first_name,
                last_name: requestParameters.last_name,
                preferred_first_name: requestParameters.preferred_first_name,
                preferred_last_name: requestParameters.preferred_last_name,
                location_ids: requestParameters.location_ids,
                department_ids: requestParameters.department_ids,
                role_ids: requestParameters.role_ids,
                email: requestParameters.email,
                mobile_number: requestParameters.mobile_number,
                home_number: requestParameters.home_number,
                address: requestParameters.address,
                postal_zip: requestParameters.postal_zip,
                city: requestParameters.city,
                prov_state: requestParameters.prov_state,
                invite_user: requestParameters.invite_user,
                notes: requestParameters.notes,
                hire_date: requestParameters.hire_date,
                type: requestParameters.type,
                employee_id: requestParameters.employee_id,
                punch_id: requestParameters.punch_id,
                birth_date: requestParameters.birth_date,
                language: requestParameters.language,
                appear_as_employee: requestParameters.appear_as_employee,
                subscribe_to_updates: requestParameters.subscribe_to_updates,
                max_weekly_hours: requestParameters.max_weekly_hours,
                wage_cents: requestParameters.wage_cents,
                wage_type: requestParameters.wage_type,
                wages: requestParameters.wages,
                permissions_template_id: requestParameters.permissions_template_id
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createNewUser(requestParameters.companyId, usersCreateNewUserRequest, requestParameters.xApiVersion, requestParameters.xCompanyGuid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Deactivate User
         * @param {UsersApiDeactivateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deactivate(requestParameters: UsersApiDeactivateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const usersDeactivateRequest: UsersDeactivateRequest = {
                inactive_reason: requestParameters.inactive_reason,
                inactive_comments: requestParameters.inactive_comments
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.deactivate(requestParameters.companyId, requestParameters.identifier, requestParameters.xApiVersion, requestParameters.xCompanyGuid, usersDeactivateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Retrieve User
         * @param {UsersApiGetUserByIdentifierRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserByIdentifier(requestParameters: UsersApiGetUserByIdentifierRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UsersGetUserByIdentifierResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserByIdentifier(requestParameters.companyId, requestParameters.identifier, requestParameters.xApiVersion, requestParameters.xCompanyGuid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary List Users
         * @param {UsersApiListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async list(requestParameters: UsersApiListRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UsersListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.list(requestParameters.companyId, requestParameters.xApiVersion, requestParameters.xCompanyGuid, requestParameters.modifiedSince, requestParameters.locationId, requestParameters.departmentId, requestParameters.roleId, requestParameters.status, requestParameters.name, requestParameters.sortBy, requestParameters.cursor, requestParameters.limit, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update User
         * @param {UsersApiUpdateUserByIdentifierRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateUserByIdentifier(requestParameters: UsersApiUpdateUserByIdentifierRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UsersUpdateUserByIdentifierResponse>> {
            const usersUpdateUserByIdentifierRequest: UsersUpdateUserByIdentifierRequest = {
                first_name: requestParameters.first_name,
                last_name: requestParameters.last_name,
                preferred_first_name: requestParameters.preferred_first_name,
                preferred_last_name: requestParameters.preferred_last_name,
                email: requestParameters.email,
                mobile_number: requestParameters.mobile_number,
                home_number: requestParameters.home_number,
                address: requestParameters.address,
                postal_zip: requestParameters.postal_zip,
                city: requestParameters.city,
                prov_state: requestParameters.prov_state,
                notes: requestParameters.notes,
                hire_date: requestParameters.hire_date,
                type: requestParameters.type,
                employee_id: requestParameters.employee_id,
                punch_id: requestParameters.punch_id,
                birth_date: requestParameters.birth_date,
                language: requestParameters.language,
                appear_as_employee: requestParameters.appear_as_employee,
                subscribe_to_updates: requestParameters.subscribe_to_updates,
                max_weekly_hours: requestParameters.max_weekly_hours,
                active: requestParameters.active,
                pronouns: requestParameters.pronouns,
                permissions_template_id: requestParameters.permissions_template_id
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateUserByIdentifier(requestParameters.companyId, requestParameters.identifier, usersUpdateUserByIdentifierRequest, requestParameters.xApiVersion, requestParameters.xCompanyGuid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UsersApi - factory interface
 * @export
 */
export const UsersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UsersApiFp(configuration)
    return {
        /**
         * 
         * @summary Create Many Users
         * @param {UsersApiBulkCreateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bulkCreate(requestParameters: UsersApiBulkCreateRequest, options?: AxiosRequestConfig): AxiosPromise<UsersBulkCreateResponse> {
            return localVarFp.bulkCreate(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create User
         * @param {UsersApiCreateNewUserRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewUser(requestParameters: UsersApiCreateNewUserRequest, options?: AxiosRequestConfig): AxiosPromise<UsersCreateNewUserResponse> {
            return localVarFp.createNewUser(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Deactivate User
         * @param {UsersApiDeactivateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deactivate(requestParameters: UsersApiDeactivateRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deactivate(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve User
         * @param {UsersApiGetUserByIdentifierRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserByIdentifier(requestParameters: UsersApiGetUserByIdentifierRequest, options?: AxiosRequestConfig): AxiosPromise<UsersGetUserByIdentifierResponse> {
            return localVarFp.getUserByIdentifier(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List Users
         * @param {UsersApiListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list(requestParameters: UsersApiListRequest, options?: AxiosRequestConfig): AxiosPromise<UsersListResponse> {
            return localVarFp.list(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update User
         * @param {UsersApiUpdateUserByIdentifierRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserByIdentifier(requestParameters: UsersApiUpdateUserByIdentifierRequest, options?: AxiosRequestConfig): AxiosPromise<UsersUpdateUserByIdentifierResponse> {
            return localVarFp.updateUserByIdentifier(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for bulkCreate operation in UsersApi.
 * @export
 * @interface UsersApiBulkCreateRequest
 */
export type UsersApiBulkCreateRequest = {
    /**
    * Company ID
    * @type {number}
    * @memberof UsersApiBulkCreate
    */
    readonly companyId: number
    /**
    * 
    * @type {Array<UsersBulkCreateRequestInner>}
    * @memberof UsersApiBulkCreate
    */
    readonly requestBody: Array<UsersBulkCreateRequestInner>
    /**
    * 7shifts API version
    * @type {string}
    * @memberof UsersApiBulkCreate
    */
    readonly xApiVersion?: string
    /**
    * Company GUID
    * @type {string}
    * @memberof UsersApiBulkCreate
    */
    readonly xCompanyGuid?: string
}

/**
 * Request parameters for createNewUser operation in UsersApi.
 * @export
 * @interface UsersApiCreateNewUserRequest
 */
export type UsersApiCreateNewUserRequest = {
    
    /**
    * Company ID
    * @type {number}
    * @memberof UsersApiCreateNewUser
    */
    readonly companyId: number
    
    /**
    * 7shifts API version
    * @type {string}
    * @memberof UsersApiCreateNewUser
    */
    readonly xApiVersion?: string
    
    /**
    * Company GUID
    * @type {string}
    * @memberof UsersApiCreateNewUser
    */
    readonly xCompanyGuid?: string
    
} & UsersCreateNewUserRequest

/**
 * Request parameters for deactivate operation in UsersApi.
 * @export
 * @interface UsersApiDeactivateRequest
 */
export type UsersApiDeactivateRequest = {
    
    /**
    * Company ID
    * @type {number}
    * @memberof UsersApiDeactivate
    */
    readonly companyId: number
    
    /**
    * User ID
    * @type {number}
    * @memberof UsersApiDeactivate
    */
    readonly identifier: number
    
    /**
    * 7shifts API version
    * @type {string}
    * @memberof UsersApiDeactivate
    */
    readonly xApiVersion?: string
    
    /**
    * Company GUID
    * @type {string}
    * @memberof UsersApiDeactivate
    */
    readonly xCompanyGuid?: string
    
} & UsersDeactivateRequest

/**
 * Request parameters for getUserByIdentifier operation in UsersApi.
 * @export
 * @interface UsersApiGetUserByIdentifierRequest
 */
export type UsersApiGetUserByIdentifierRequest = {
    
    /**
    * Company ID
    * @type {number}
    * @memberof UsersApiGetUserByIdentifier
    */
    readonly companyId: number
    
    /**
    * User ID. Accepted values are 7shifts user id or punch id. Use prefix punch: for punch id
    * @type {string}
    * @memberof UsersApiGetUserByIdentifier
    */
    readonly identifier: string
    
    /**
    * 7shifts API version
    * @type {string}
    * @memberof UsersApiGetUserByIdentifier
    */
    readonly xApiVersion?: string
    
    /**
    * Company GUID
    * @type {string}
    * @memberof UsersApiGetUserByIdentifier
    */
    readonly xCompanyGuid?: string
    
}

/**
 * Request parameters for list operation in UsersApi.
 * @export
 * @interface UsersApiListRequest
 */
export type UsersApiListRequest = {
    
    /**
    * Company ID
    * @type {number}
    * @memberof UsersApiList
    */
    readonly companyId: number
    
    /**
    * 7shifts API version
    * @type {string}
    * @memberof UsersApiList
    */
    readonly xApiVersion?: string
    
    /**
    * Company GUID
    * @type {string}
    * @memberof UsersApiList
    */
    readonly xCompanyGuid?: string
    
    /**
    * Return users that have been modified since the specified date. Format YYYY-MM-DD
    * @type {string}
    * @memberof UsersApiList
    */
    readonly modifiedSince?: string
    
    /**
    * Location ID (cannot be used in conjunction with Department ID and Role ID)
    * @type {number}
    * @memberof UsersApiList
    */
    readonly locationId?: number
    
    /**
    * Department ID (cannot be used in conjunction with Location ID and Role ID)
    * @type {number}
    * @memberof UsersApiList
    */
    readonly departmentId?: number
    
    /**
    * Role ID (cannot be used in conjunction with Location ID and Department ID)
    * @type {number}
    * @memberof UsersApiList
    */
    readonly roleId?: number
    
    /**
    * The user status
    * @type {'active' | 'inactive'}
    * @memberof UsersApiList
    */
    readonly status?: 'active' | 'inactive'
    
    /**
    * Filter by partial or full employee name
    * @type {string}
    * @memberof UsersApiList
    */
    readonly name?: string
    
    /**
    * Sort the paginated result by the given field and direction.
    * @type {string}
    * @memberof UsersApiList
    */
    readonly sortBy?: string
    
    /**
    * Cursor for the next or previous page of results.
    * @type {string}
    * @memberof UsersApiList
    */
    readonly cursor?: string
    
    /**
    * The number of results desired per page.
    * @type {number}
    * @memberof UsersApiList
    */
    readonly limit?: number
    
}

/**
 * Request parameters for updateUserByIdentifier operation in UsersApi.
 * @export
 * @interface UsersApiUpdateUserByIdentifierRequest
 */
export type UsersApiUpdateUserByIdentifierRequest = {
    
    /**
    * Company ID
    * @type {number}
    * @memberof UsersApiUpdateUserByIdentifier
    */
    readonly companyId: number
    
    /**
    * User ID
    * @type {number}
    * @memberof UsersApiUpdateUserByIdentifier
    */
    readonly identifier: number
    
    /**
    * 7shifts API version
    * @type {string}
    * @memberof UsersApiUpdateUserByIdentifier
    */
    readonly xApiVersion?: string
    
    /**
    * Company GUID
    * @type {string}
    * @memberof UsersApiUpdateUserByIdentifier
    */
    readonly xCompanyGuid?: string
    
} & UsersUpdateUserByIdentifierRequest

/**
 * UsersApiGenerated - object-oriented interface
 * @export
 * @class UsersApiGenerated
 * @extends {BaseAPI}
 */
export class UsersApiGenerated extends BaseAPI {
    /**
     * 
     * @summary Create Many Users
     * @param {UsersApiBulkCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiGenerated
     */
    public bulkCreate(requestParameters: UsersApiBulkCreateRequest, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).bulkCreate(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create User
     * @param {UsersApiCreateNewUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiGenerated
     */
    public createNewUser(requestParameters: UsersApiCreateNewUserRequest, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).createNewUser(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Deactivate User
     * @param {UsersApiDeactivateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiGenerated
     */
    public deactivate(requestParameters: UsersApiDeactivateRequest, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).deactivate(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve User
     * @param {UsersApiGetUserByIdentifierRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiGenerated
     */
    public getUserByIdentifier(requestParameters: UsersApiGetUserByIdentifierRequest, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).getUserByIdentifier(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List Users
     * @param {UsersApiListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiGenerated
     */
    public list(requestParameters: UsersApiListRequest, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).list(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update User
     * @param {UsersApiUpdateUserByIdentifierRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiGenerated
     */
    public updateUserByIdentifier(requestParameters: UsersApiUpdateUserByIdentifierRequest, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).updateUserByIdentifier(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
